(************** Content-type: application/mathematica **************
                     CreatedBy='Mathematica 5.2'

                    Mathematica-Compatible Notebook

This notebook can be used with any Mathematica-compatible
application, such as Mathematica, MathReader or Publicon. The data
for the notebook starts with the line containing stars above.

To get the notebook into a Mathematica-compatible application, do
one of the following:

* Save the data starting with the line of stars above into a file
  with a name ending in .nb, then open the file inside the
  application;

* Copy the data starting with the line of stars above to the
  clipboard, then use the Paste menu command inside the application.

Data for notebooks contains only printable 7-bit ASCII and can be
sent directly in email or through ftp in text mode.  Newlines can be
CR, LF or CRLF (Unix, Macintosh or MS-DOS style).

NOTE: If you modify the data for this notebook not in a Mathematica-
compatible application, you must delete the line below containing
the word CacheID, otherwise Mathematica-compatible applications may
try to use invalid cache data.

For more information on notebooks and Mathematica-compatible 
applications, contact Wolfram Research:
  web: http://www.wolfram.com
  email: info@wolfram.com
  phone: +1-217-398-0700 (U.S.)

Notebook reader applications are available free of charge from 
Wolfram Research.
*******************************************************************)

(*CacheID: 232*)


(*NotebookFileLineBreakTest
NotebookFileLineBreakTest*)
(*NotebookOptionsPosition[    191413,       4712]*)
(*NotebookOutlinePosition[    192328,       4741]*)
(*  CellTagsIndexPosition[    192284,       4737]*)
(*WindowFrame->Normal*)



Notebook[{

Cell[CellGroupData[{
Cell[TextData[StyleBox["Module for the Improved Newton Method",
  FontFamily->"New Century Schlbk",
  FontSize->14,
  FontWeight->"Bold",
  FontColor->RGBColor[0, 0, 1]]], "Text"],

Cell[TextData[{
  StyleBox["Numerical Methods using ",
    FontSize->14,
    FontWeight->"Bold",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["Mathematica",
    FontSize->14,
    FontWeight->"Bold",
    FontSlant->"Italic",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox[" ",
    FontSize->14,
    FontWeight->"Bold",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox[" ",
    FontSize->14],
  StyleBox["\n",
    FontSize->14,
    FontWeight->"Bold",
    FontColor->RGBColor[0.500008, 0.250004, 0.250004]],
  StyleBox["Complementary software supplements for  ",
    FontSize->14,
    FontWeight->"Bold",
    FontColor->RGBColor[0, 0.996109, 0]],
  StyleBox[" \n",
    FontSize->14],
  StyleBox[ButtonBox["Numerical Methods textbooks",
    ButtonData:>{
      URL[ "http://math.fullerton.edu/mathews/numerical.html"], None},
    ButtonStyle->"Hyperlink"],
    FontSize->14,
    FontWeight->"Bold",
    FontColor->RGBColor[0.500008, 0, 0.996109]],
  StyleBox["  ",
    FontSize->14],
  StyleBox["\n",
    FontSize->14,
    FontWeight->"Bold",
    FontColor->RGBColor[0.500008, 0.250004, 0.250004]],
  StyleBox[ButtonBox["John H. Mathews and Kurtis Fink, 2004",
    ButtonData:>{
      URL[ "http://www.ecs.fullerton.edu/~mathews/numerical.html"], None},
    ButtonStyle->"Hyperlink"],
    FontSize->14,
    FontWeight->"Bold",
    FontColor->RGBColor[0.500008, 0, 0.996109]],
  StyleBox["  ",
    FontSize->14,
    FontColor->RGBColor[0.500008, 0, 0.996109]]
}], "Text"]
}, Closed]],

Cell[TextData[{
  StyleBox["MATHEMATICAL EXPOSITION",
    FontFamily->"Times New Roman",
    FontWeight->"Bold",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["\n",
    FontFamily->"Times New Roman",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["An Improved Newton's Method",
    FontFamily->"Times New Roman",
    FontWeight->"Bold",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["\nby \nJohn H. Mathews \n",
    FontFamily->"Times New Roman",
    FontColor->RGBColor[0, 0, 1]],
  ButtonBox["The AMATYC Review, Vol. 10, No. 2, Spring, 1989, pp. 9-14.",
    ButtonData:>{
      URL[ 
      "http://math.fullerton.edu/mathews/articles/1989ImprovedNewtonMethod.\
pdf"], None},
    ButtonStyle->"Hyperlink"]
}], "Text",
  TextAlignment->Center],

Cell[TextData[{
  StyleBox["Introduction",
    FontFamily->"Times New Roman",
    FontWeight->"Bold",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["\n\n\t",
    FontFamily->"Times New Roman"],
  ButtonBox["Newton's method",
    ButtonData:>{
      URL[ "http://mathworld.wolfram.com/NewtonsMethod.html"], None},
    ButtonStyle->"Hyperlink"],
  StyleBox[" is used to locate roots of the equation  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(f \((x)\) = 0\)]],
  StyleBox[".  The Newton-Raphson iteration formula is:\n",
    FontFamily->"Times New Roman"],
  StyleBox["(1)",
    FontFamily->"Times New Roman",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["\t\t",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(g \((x)\)\  = \ \ x\  - \ \(f \((x)\)\)\/\(f' \((x)\)\)\)]]
}], "Text"],

Cell[TextData[{
  StyleBox["Given a starting value  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p\_0\)]],
  StyleBox[",   the sequence  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \({p\_k}\_\(k = 0\)\%\[Infinity]\)]],
  StyleBox["  is computed using:  \n\n",
    FontFamily->"Times New Roman"],
  StyleBox["(2)",
    FontFamily->"Times New Roman",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["\t\t",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p\_\(k + 1\)\  = \ \(g \((p\_k)\)\  = \ \ p\_k\  - \ \(f \((p\_k)\)\)\
\/\(f' \((p\_k)\)\)\)\)]],
  StyleBox["    ",
    FontFamily->"Times New Roman"],
  "for    ",
  Cell[BoxData[
      RowBox[{\(k\  = \ 0\), 
        StyleBox[",",
          FontFamily->"Times New Roman",
          FontSize->12,
          FontWeight->"Plain",
          FontSlant->"Plain",
          FontColor->GrayLevel[0],
          FontVariations->{"Underline"->False,
          "StrikeThrough"->False}], "1", 
        StyleBox[",",
          FontFamily->"Times New Roman",
          FontSize->12,
          FontWeight->"Plain",
          FontSlant->"Plain",
          FontColor->GrayLevel[0],
          FontVariations->{"Underline"->False,
          "StrikeThrough"->False}], "2", 
        StyleBox[",",
          FontFamily->"Times New Roman",
          FontSize->12,
          FontWeight->"Plain",
          FontSlant->"Plain",
          FontColor->GrayLevel[0],
          FontVariations->{"Underline"->False,
          "StrikeThrough"->False}], "..."}]]],
  "\n\nprovided that  ",
  Cell[BoxData[
      \(\(\(\ \)\(f' \((p\_k)\) \[NotEqual] 0\)\)\)]],
  ".  "
}], "Text"],

Cell[TextData[{
  StyleBox["Computer Programs  ",
    FontWeight->"Bold",
    FontColor->RGBColor[0.500008, 0, 0.996109]],
  StyleBox[ButtonBox["Newton-Raphson Method",
    ButtonData:>{
      URL[ 
      "http://www.ecs.fullerton.edu/~mathews/n2003/Newton'sMethodProg.html"], 
      None},
    ButtonStyle->"Hyperlink"],
    FontWeight->"Bold",
    FontColor->RGBColor[1, 0, 0]],
  "  ",
  StyleBox[ButtonBox["Newton-Raphson Method",
    ButtonData:>{
      URL[ "http://math.fullerton.edu/mathews/n2003/Newton'sMethodProg.html"],
       None},
    ButtonStyle->"Hyperlink"],
    FontWeight->"Bold"],
  "  "
}], "Text"],

Cell[TextData[StyleBox["Mathematica Subroutine (Newton-Raphson Iteration).",
  FontWeight->"Bold",
  FontColor->RGBColor[0.500008, 0, 0.996109]]], "Text"],

Cell[BoxData[
    \(\(\(NewtonRaphson[x0_, 
        max_]\)\(:=\)\(\[IndentingNewLine]\)\(Module[{}, \[IndentingNewLine]k\
\  = \ 0; \ \[IndentingNewLine]p0\  = \ 
          N[x0]; \ \[IndentingNewLine]Print[\*"\"\<\!\(p\_0\) = \>\"", 
          PaddedForm[p0, {16, 15}], \*"\"\<,   f[\!\(p\_0\)] = \>\"", 
          NumberForm[f[p0], 16]\ ]; \ \[IndentingNewLine]p1\  = \ 
          p0; \ \[IndentingNewLine]While[\ 
          k < max, \[IndentingNewLine]p0\  = \ 
            p1; \ \[IndentingNewLine]p1\  = \ 
            p0\  - \ f[p0]\/\(f'\)[p0]; \ \[IndentingNewLine]k\  = \ 
            k + 1; \ \ \[IndentingNewLine]Print["\<p\>"\_k, "\< = \>", 
            PaddedForm[p1, {16, 15}], "\<,   f[\>", "\<p\>"\_k, "\<] = \>", 
            NumberForm[f[p1], 
              16]\ ];\ ]; \ \[IndentingNewLine]Print["\<\n\>", "\<f[x] = \>", 
          f[x]\ ]; \ \ \[IndentingNewLine]Print["\<  p  = \>", 
          PaddedForm[
            p1, {16, 
              15}]\ ]; \ \[IndentingNewLine]Print["\< \[CapitalDelta]p  = \
\[PlusMinus]\>", Abs[p1 - p0]\ ]; \ \[IndentingNewLine]Print["\<f[p] = \>", 
          PaddedForm[f[p1], {16, 15}]\ ];\ ]\)\(\ \)\)\)], "Input"],

Cell[TextData[{
  StyleBox["\tIf the value  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p\_0\)]],
  StyleBox["  is chosen close enough to the root ",
    FontFamily->"Times New Roman"],
  StyleBox["p",
    FontFamily->"Courier New"],
  StyleBox[", then the sequence generated in (2) will converge to the root ",
    FontFamily->"Times New Roman"],
  StyleBox["p",
    FontFamily->"Courier New"],
  StyleBox[".  Sometimes the speed at which  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \({p\_k}\_\(k = 0\)\%\[Infinity]\)]],
  StyleBox["  converges is fast (quadratic) and at other times it is slow \
(linear).  To distinguish these two cases we make the following definitions.",
    
    FontFamily->"Times New Roman"]
}], "Text"],

Cell[TextData[{
  StyleBox["Definition 1 (Order of Convergence)",
    FontFamily->"Times New Roman",
    FontWeight->"Bold",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["  Assume that  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \({p\_n}\)]],
  StyleBox[" ",
    FontFamily->"Times New Roman"],
  StyleBox[" ",
    FontFamily->"Times New Roman",
    FontSize->6],
  StyleBox["converges to  p,  and set  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      RowBox[{\(E\_n\), " ", "=", " ", 
        RowBox[{
          RowBox[{"p", " ", "-", " ", 
            RowBox[{\(p\_n\), "  ", 
              StyleBox["for",
                FontFamily->"Times New Roman",
                FontSize->12,
                FontWeight->"Plain",
                FontSlant->"Plain",
                FontColor->GrayLevel[0],
                FontVariations->{"Underline"->False,
                "StrikeThrough"->False}], "  ", "n"}]}], "\[GreaterEqual]", 
          "0"}]}]]],
  StyleBox[".    If two positive constants  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(A \[NotEqual] 0\ \ and\ \ R > 0\)]],
  StyleBox["  exist, and  \n\n\t",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(\(\(lim\+\(n\  \[Rule] \ \[Infinity]\)\ \(\(|\)\(p\  - \ p\_\(n + 1\)\
\)\(|\)\)\/\(\(|\)\(p\  - \ p\_n\)\( | \^R\)\) = \ \(lim\+\(n\  \[Rule] \ \
\[Infinity]\)\ \(\(|\)\(E\_\(n + 1\)\)\(|\)\)\/\(\(|\)\(E\_n\)\( | \^R\)\)\  \
= \ A\)\)\(,\)\)\)]],
  "\n",
  StyleBox["\nthen the sequence is said to converge to  p  with ",
    FontFamily->"Times New Roman"],
  StyleBox["order of convergence R",
    FontFamily->"Times New Roman",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox[".  The number  A  is called the ",
    FontFamily->"Times New Roman"],
  StyleBox["asymptotic error constant",
    FontFamily->"Times New Roman",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox[".  The cases  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(R = 1, 2\)]],
  StyleBox["  are given special  consideration.\n\n",
    FontFamily->"Times New Roman"],
  StyleBox["(3)",
    FontFamily->"Times New Roman",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["  \tIf  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(R = 2\)]],
  StyleBox[", and    ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(lim\+\(n\  \[Rule] \ \[Infinity]\)\ \(\(|\)\(E\_\(n + \
1\)\)\(|\)\)\/\(\(|\)\(E\_n\)\( | \^2\)\)\  = \ A\)]],
  StyleBox["  \n\n   \tthen the convergence of  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \({p\_k}\_\(k = 0\)\%\[Infinity]\)]],
  StyleBox["  ",
    FontFamily->"Times New Roman",
    FontSize->6],
  StyleBox["is called ",
    FontFamily->"Times New Roman"],
  StyleBox["quadratic",
    FontFamily->"Times New Roman",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox[".\n\n",
    FontFamily->"Times New Roman"],
  StyleBox["(4)",
    FontFamily->"Times New Roman",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["   \tIf  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(R = 1\)]],
  StyleBox[", and    ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(lim\+\(n\  \[Rule] \ \[Infinity]\)\ \(\(|\)\(E\_\(n + \
1\)\)\(|\)\)\/\(\(|\)\(E\_n\)\(|\)\)\  = \ A\)]],
  "  ",
  StyleBox["\n\n   \tthen the convergence of  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \({p\_k}\_\(k = 0\)\%\[Infinity]\)]],
  StyleBox["  is called ",
    FontFamily->"Times New Roman"],
  StyleBox["linear",
    FontFamily->"Times New Roman",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox[".\n\nThe mathematical characteristic for determining which case \
occurs is the \"multiplicity\" of the root p.",
    FontFamily->"Times New Roman"]
}], "Text"],

Cell[TextData[{
  StyleBox["Definition 2 (Order of a Root)",
    FontFamily->"Times New Roman",
    FontWeight->"Bold",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["  If  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(f \((x)\)\)]],
  StyleBox["  can be factored as \n\n",
    FontFamily->"Times New Roman"],
  StyleBox["(5)",
    FontFamily->"Times New Roman",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["\t\t",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(f \((x)\)\ \  = \ \ \(\((x - p)\)\^m\) h \((x)\)\)]],
  StyleBox["    where  ",
    FontFamily->"Times New Roman"],
  "m",
  StyleBox["  is a positive integer, \n\nand  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(h \((x)\)\)]],
  StyleBox["  is continuous at  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(x = p\)]],
  StyleBox["  and  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(h \((p)\) \[NotEqual] 0\)]],
  StyleBox[",  then we say that  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(f \((x)\)\)]],
  StyleBox["  has a root of order  ",
    FontFamily->"Times New Roman"],
  "m",
  StyleBox["  at  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(x = p\)]],
  StyleBox[". \n\nA root of order  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(m = 1\)]],
  StyleBox["  is often called a ",
    FontFamily->"Times New Roman"],
  ButtonBox["simple root",
    ButtonData:>{
      URL[ "http://mathworld.wolfram.com/SimpleRoot.html"], None},
    ButtonStyle->"Hyperlink"],
  StyleBox[", and if  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(m > 1\)]],
  StyleBox["  it is called a ",
    FontFamily->"Times New Roman"],
  ButtonBox["multiple root",
    ButtonData:>{
      URL[ "http://mathworld.wolfram.com/Multiplicity.html"], None},
    ButtonStyle->"Hyperlink"],
  StyleBox[".  A root of order  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(m = 2\)]],
  StyleBox["  is sometimes called a ",
    FontFamily->"Times New Roman"],
  ButtonBox["double root",
    ButtonData:>{
      URL[ "http://mathworld.wolfram.com/MultipleRoot.html"], None},
    ButtonStyle->"Hyperlink"],
  StyleBox[", and so on.  ",
    FontFamily->"Times New Roman"]
}], "Text"],

Cell[TextData[{
  StyleBox["Theorem 1 (Convergence Rate for Newton-Raphson Iteration)",
    FontFamily->"Times New Roman",
    FontWeight->"Bold",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["  Assume that Newton-Raphson iteration (2) produces a sequence  ",
    
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \({p\_k}\_\(k = 0\)\%\[Infinity]\)]],
  StyleBox[" ",
    FontFamily->"Times New Roman"],
  StyleBox[" ",
    FontFamily->"Times New Roman",
    FontSize->6],
  StyleBox["that converges to the root  p  of the function",
    FontFamily->"Times New Roman"],
  "  ",
  Cell[BoxData[
      \(f \((x)\)\)]],
  ".  ",
  StyleBox["\n",
    FontFamily->"Times New Roman"],
  StyleBox["\n",
    FontFamily->"Times New Roman",
    FontSize->9],
  StyleBox["(6)",
    FontFamily->"Times New Roman",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["\t\tIf  p  is a simple root, then convergence is quadratic and   \
",
    FontFamily->"Times New Roman"],
  StyleBox["\n\n\t\t",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(\(\(|\)\(E\_\(k + 
              1\)\)\(|\)\(\ \)\(\(\[TildeTilde]\)\(\ \)\(\(\(\(|\)\(f'' \((p)\
\)\)\(|\)\)\/\(2 | f' \((p)\) | \)\) \((\(|\)\(E\_k\)\(|\))\)\^2\)\)\)\)]],
  "  for  k  ",
  StyleBox["sufficiently large. \n",
    FontFamily->"Times New Roman"],
  StyleBox["\n",
    FontFamily->"Times New Roman",
    FontSize->9],
  StyleBox["(7)",
    FontFamily->"Times New Roman",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["\t\tIf  p  is a multiple root of order  ",
    FontFamily->"Times New Roman"],
  "m",
  StyleBox[",  then convergence is linear and  ",
    FontFamily->"Times New Roman"],
  StyleBox["\n\t\t\n\t\t",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(\(\(|\)\(E\_\(k + 
              1\)\)\(|\)\(\ \)\(\(\[TildeTilde]\)\(\ \)\(\(m - 
                1\)\/m\)\)\(|\)\(E\_k\)\(|\)\)\)]],
  "  ",
  StyleBox["for  k  sufficiently large. ",
    FontFamily->"Times New Roman"]
}], "Text"],

Cell[TextData[{
  StyleBox["Proof  ",
    FontFamily->"New Century Schlbk",
    FontWeight->"Bold",
    FontColor->RGBColor[1, 0, 1]],
  StyleBox[ButtonBox["Newton-Raphson Method",
    ButtonData:>{
      URL[ 
      "http://www.ecs.fullerton.edu/~mathews/n2003/Newton'sMethodProof.html"],
       None},
    ButtonStyle->"Hyperlink"],
    FontWeight->"Bold",
    FontColor->RGBColor[1, 0, 0]],
  "  ",
  StyleBox[ButtonBox["Newton-Raphson Method",
    ButtonData:>{
      URL[ 
      "http://math.fullerton.edu/mathews/n2003/Newton'sMethodProof.html"], 
      None},
    ButtonStyle->"Hyperlink"],
    FontWeight->"Bold"],
  "  "
}], "Text"],

Cell[TextData[StyleBox["\tThere are two common ways to use Theorem 1 and gain \
quadratic convergence at multiple roots. We shall call these methods A and B \
(see Mathews, 1987, p. 72 and Ralston & Rabinowitz, 1978, pp. 353-356).  ",
  FontFamily->"Times New Roman"]], "Text"],

Cell[TextData[StyleBox["Method A.  Accelerated Newton-Raphson",
  FontFamily->"Times New Roman",
  FontWeight->"Bold",
  FontColor->RGBColor[0, 0, 1]]], "Text",
  TextAlignment->Left],

Cell[TextData[{
  StyleBox["\tSuppose that  p  is a root of order  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(m > 1\)]],
  StyleBox[" .  Then the accelerated Newton-Raphson formula is:  \n\n",
    FontFamily->"Times New Roman"],
  StyleBox["(8)",
    FontFamily->"Times New Roman",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["\t",
    FontFamily->"Times New Roman"],
  "\t",
  Cell[BoxData[
      \(g \((x)\)\  = \ \ x\  - \ m \( f \((x)\)\)\/\(f' \((x)\)\)\)]],
  ".  ",
  StyleBox["\n\t\nLet the starting value  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p\_0\)]],
  StyleBox["  be close to  p, and compute the sequence  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \({p\_k}\_\(k = 0\)\%\[Infinity]\)]],
  StyleBox["  iteratively;  \n\n",
    FontFamily->"Times New Roman"],
  StyleBox["(9)",
    FontFamily->"Times New Roman",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["\t",
    FontFamily->"Times New Roman"],
  "\t",
  Cell[BoxData[
      \(p\_\(k + 1\)\  = \ \(g \((p\_k)\)\  = \ \ p\_k\ \  - \ 
            m \( f \((p\_k)\)\)\/\(f' \((p\_k)\)\)\)\)]],
  "    for    ",
  Cell[BoxData[
      RowBox[{\(k = 0\), 
        StyleBox[",",
          FontFamily->"Times New Roman",
          FontSize->12,
          FontWeight->"Plain",
          FontSlant->"Plain",
          FontColor->GrayLevel[0],
          FontVariations->{"Underline"->False,
          "StrikeThrough"->False}], "1", 
        StyleBox[",",
          FontFamily->"Times New Roman",
          FontSize->12,
          FontWeight->"Plain",
          FontSlant->"Plain",
          FontColor->GrayLevel[0],
          FontVariations->{"Underline"->False,
          "StrikeThrough"->False}], "..."}]]],
  "  ",
  StyleBox["\n\nThen the sequence generated by (9) will converge \
quadratically to  p.  ",
    FontFamily->"Times New Roman"]
}], "Text"],

Cell[TextData[{
  StyleBox["Proof  ",
    FontFamily->"New Century Schlbk",
    FontWeight->"Bold",
    FontColor->RGBColor[1, 0, 1]],
  StyleBox[ButtonBox["Accelerated & Modified Newton-Raphson",
    ButtonData:>{
      URL[ 
      "http://ecs.fullerton.edu/~mathews/n2003/NewtonAccelerateProof.html"], 
      None},
    ButtonStyle->"Hyperlink"],
    FontWeight->"Bold",
    FontColor->RGBColor[1, 0, 0]],
  "  ",
  StyleBox[ButtonBox["Accelerated & Modified Newton-Raphson",
    ButtonData:>{
      URL[ 
      "http://math.fullerton.edu/mathews/n2003/NewtonAccelerateProof.html"], 
      None},
    ButtonStyle->"Hyperlink"],
    FontWeight->"Bold"],
  "  "
}], "Text"],

Cell[TextData[{
  StyleBox["Computer Programs  ",
    FontWeight->"Bold",
    FontColor->RGBColor[0.500008, 0, 0.996109]],
  StyleBox[ButtonBox["Accelerated & Modified Newton-Raphson",
    ButtonData:>{
      URL[ 
      "http://ecs.fullerton.edu/~mathews/n2003/NewtonAccelerateProg.html"], 
      None},
    ButtonStyle->"Hyperlink"],
    FontWeight->"Bold",
    FontColor->RGBColor[1, 0, 0]],
  "  ",
  StyleBox[ButtonBox["Accelerated & Modified Newton-Raphson",
    ButtonData:>{
      URL[ 
      "http://math.fullerton.edu/mathews/n2003/NewtonAccelerateProg.html"], 
      None},
    ButtonStyle->"Hyperlink"],
    FontWeight->"Bold"],
  "  "
}], "Text"],

Cell[TextData[StyleBox["Mathematica Subroutine (Accelerated Newton-Raphson \
Iteration).",
  FontWeight->"Bold",
  FontColor->RGBColor[0.500008, 0, 0.996109]]], "Text"],

Cell[BoxData[
    \(\(\(NewtonRaphsonAccelerate[x0_, m_, 
        max_]\)\(:=\)\(\[IndentingNewLine]\)\(Module[{}, \[IndentingNewLine]k\
\  = \ 0; \ \[IndentingNewLine]p0\  = \ 
          N[x0]; \ \[IndentingNewLine]Print[\*"\"\<\!\(p\_0\) = \>\"", 
          PaddedForm[p0, {16, 15}], \*"\"\<,   f[\!\(p\_0\)] = \>\"", 
          NumberForm[f[p0], 16]\ ]; \ \[IndentingNewLine]p1\  = \ 
          p0; \ \[IndentingNewLine]While[\ 
          k < max, \[IndentingNewLine]p0\  = \ 
            p1; \ \[IndentingNewLine]p1\  = \ 
            p0\ \  - \ m\ f[p0]\/\(f'\)[p0]; \ \[IndentingNewLine]k\  = \ 
            k + 1; \ \ \[IndentingNewLine]Print["\<p\>"\_k, "\< = \>", 
            PaddedForm[p1, {16, 15}], "\<,   f[\>", "\<p\>"\_k, "\<] = \>", 
            NumberForm[f[p1], 
              16]\ ];\ ]; \ \[IndentingNewLine]Print["\<\n\>", "\<f[x] = \>", 
          f[x]\ ]; \ \ \[IndentingNewLine]Print["\<  p  = \>", 
          PaddedForm[
            p1, {16, 
              15}]\ ]; \ \[IndentingNewLine]Print["\< \[CapitalDelta]p  = \
\[PlusMinus]\>", Abs[p1 - p0]\ ]; \ \[IndentingNewLine]Print["\<f[p] = \>", 
          PaddedForm[f[p1], {16, 15}]\ ];\ ]\)\(\ \)\)\)], "Input"],

Cell[TextData[{
  StyleBox["\tOn the other hand, if  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(f \((x)\)\  = \ \(\((x - p)\)\^m\) h \((x)\)\)]],
  StyleBox["  then one can show that the function  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(u \((x)\)\  = \ \(f \((x)\)\)\/\(f' \((x)\)\)\)]],
  StyleBox["  has a simple root at  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(x = p\)]],
  StyleBox[".  ",
    FontFamily->"Times New Roman"]
}], "Text"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Derivation",
  FontWeight->"Bold",
  FontColor->RGBColor[1, 0, 1]]], "Text"],

Cell[BoxData[{
    \(\(Clear[f, h, m, x, u];\)\), "\[IndentingNewLine]", 
    \(\(f[x_] = \(\((x - p)\)\^m\) h[x];\)\), "\[IndentingNewLine]", 
    \(\(u[x_] = f[x]\/\(f'\)[x];\)\), "\[IndentingNewLine]", 
    \(\(u[x_] = 
        Together[MapAll[FullSimplify, u[x]]];\)\), "\[IndentingNewLine]", 
    \(\(Print["\< f[x] = \>", f[x]\ ];\)\ \), "\[IndentingNewLine]", 
    \(\(Print["\<f'[x] = \>", \(f'\)[x]\ ];\)\ \), "\[IndentingNewLine]", 
    \(\(Print["\<\>"];\)\ \), "\[IndentingNewLine]", 
    \(\(Print["\< u[x] = \>", u[x]\ ];\)\ \), "\[IndentingNewLine]", 
    \(\(Print["\< u[p] = \>", u[p]\ ];\)\ \), "\[IndentingNewLine]", 
    \(\(Print["\<u'[p] = \>", \(u'\)[
          p], "\< \[NotEqual] 0\>"\ ];\)\ \), "\[IndentingNewLine]", 
    \(\(Print["\<Therefore,\>"];\)\ \), "\[IndentingNewLine]", 
    \(\(Print["\< u[x]  has a simple root at  x = p.\>"];\)\ \)}], "Input"]
}, Closed]],

Cell[TextData[{
  StyleBox["\tUsing  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(u \((x)\)\)]],
  StyleBox["  in place of  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(f \((x)\)\)]],
  StyleBox["  in formula (1) yields Method B.",
    FontFamily->"Times New Roman"]
}], "Text"],

Cell[TextData[{
  StyleBox["Method B.  Modified Newton-Raphson",
    FontFamily->"Times New Roman",
    FontWeight->"Bold",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["\n\n\tSuppose that  p  is a root of order  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(m > 1\)]],
  StyleBox[" .  Then the modified Newton-Raphson formula is:  \n\t\n",
    FontFamily->"Times New Roman"],
  StyleBox["(10)",
    FontFamily->"Times New Roman",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["\t\t",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(g \((x)\)\  = \ \ x\  - \ \(f \((x)\)\ f' \((x)\)\)\/\(\((f' \((x)\))\
\)\^2 - f \((x)\)\ f'' \((x)\)\)\)]],
  "  "
}], "Text"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Derivation",
  FontWeight->"Bold",
  FontColor->RGBColor[1, 0, 1]]], "Text"],

Cell[BoxData[{
    \(\(Clear[f, g, x, u];\)\), "\[IndentingNewLine]", 
    \(\(u[x_] = f[x]\/\(f'\)[x];\)\), "\[IndentingNewLine]", 
    \(\(u[x_] = 
        Together[MapAll[FullSimplify, u[x]]];\)\), "\[IndentingNewLine]", 
    \(\(g[x_] = x\  - u[x]\/\(u'\)[x];\)\), "\[IndentingNewLine]", 
    \(\(Print["\< u[x] = \>", u[x]\ ];\)\ \), "\[IndentingNewLine]", 
    \(\(Print["\<u'[x] = \>", \(u'\)[x]\ ];\)\ \), "\[IndentingNewLine]", 
    \(\(Print["\<\>"];\)\ \), "\[IndentingNewLine]", 
    \(\(Print[\*"\"\<g[x]  = x - \!\(u[x]\/\(u'\)[x]\)\>\""];\)\ \), "\
\[IndentingNewLine]", 
    \(\(Print["\<g[x]  = \>", 
        x\  - \ u[x]\/\(u'\)[x]];\)\ \), "\[IndentingNewLine]", 
    \(\(Print["\<g[x]  = \>", 
        x\  - \ Simplify[\ u[x]\/\(u'\)[x]]];\)\ \)}], "Input"]
}, Closed]],

Cell[TextData[{
  StyleBox["Let the starting value  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p\_0\)]],
  StyleBox["  be close to  p, and compute the sequence  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \({p\_k}\_\(k = 0\)\%\[Infinity]\)]],
  StyleBox["  iteratively;  ",
    FontFamily->"Times New Roman"],
  "\n\n",
  StyleBox["(11)",
    FontColor->RGBColor[0, 0, 1]],
  "\t\t",
  Cell[BoxData[
      \(p\_\(k + 1\)\  = \ \(g \((p\_k)\)\  = \ 
          p\_k\  - \ \(f \((p\_k)\)\ f' \((p\_k)\)\)\/\(\((f' \
\((p\_k)\))\)\^2 - f \((p\_k)\)\ f'' \((p\_k)\)\)\)\)]],
  "    for    ",
  Cell[BoxData[
      RowBox[{\(k = 0\), 
        StyleBox[",",
          FontFamily->"Times New Roman",
          FontSize->12,
          FontWeight->"Plain",
          FontSlant->"Plain",
          FontColor->GrayLevel[0],
          FontVariations->{"Underline"->False,
          "StrikeThrough"->False}], "1", 
        StyleBox[",",
          FontFamily->"Times New Roman",
          FontSize->12,
          FontWeight->"Plain",
          FontSlant->"Plain",
          FontColor->GrayLevel[0],
          FontVariations->{"Underline"->False,
          "StrikeThrough"->False}], "..."}]]],
  "  \n\nThen the sequence ",
  StyleBox["generated by (11) converges quadratically to",
    FontFamily->"Times New Roman"],
  "  ",
  StyleBox["p",
    FontFamily->"Courier New"],
  ".  "
}], "Text"],

Cell[TextData[{
  StyleBox["Proof  ",
    FontFamily->"New Century Schlbk",
    FontWeight->"Bold",
    FontColor->RGBColor[1, 0, 1]],
  StyleBox[ButtonBox["Accelerated & Modified Newton-Raphson",
    ButtonData:>{
      URL[ 
      "http://ecs.fullerton.edu/~mathews/n2003/NewtonAccelerateProof.html"], 
      None},
    ButtonStyle->"Hyperlink"],
    FontWeight->"Bold",
    FontColor->RGBColor[1, 0, 0]],
  "  ",
  StyleBox[ButtonBox["Accelerated & Modified Newton-Raphson",
    ButtonData:>{
      URL[ 
      "http://math.fullerton.edu/mathews/n2003/NewtonAccelerateProof.html"], 
      None},
    ButtonStyle->"Hyperlink"],
    FontWeight->"Bold"],
  "  "
}], "Text"],

Cell[TextData[{
  StyleBox["Computer Programs  ",
    FontWeight->"Bold",
    FontColor->RGBColor[0.500008, 0, 0.996109]],
  StyleBox[ButtonBox["Accelerated & Modified Newton-Raphson",
    ButtonData:>{
      URL[ 
      "http://ecs.fullerton.edu/~mathews/n2003/NewtonAccelerateProg.html"], 
      None},
    ButtonStyle->"Hyperlink"],
    FontWeight->"Bold",
    FontColor->RGBColor[1, 0, 0]],
  "  ",
  StyleBox[ButtonBox["Accelerated & Modified Newton-Raphson",
    ButtonData:>{
      URL[ 
      "http://math.fullerton.edu/mathews/n2003/NewtonAccelerateProg.html"], 
      None},
    ButtonStyle->"Hyperlink"],
    FontWeight->"Bold"],
  "  "
}], "Text"],

Cell[TextData[StyleBox["Mathematica Subroutine (Modified Newton-Raphson \
Iteration).",
  FontWeight->"Bold",
  FontColor->RGBColor[0.500008, 0, 0.996109]]], "Text"],

Cell[BoxData[
    \(\(\(NewtonRaphsonModified[x0_, 
        max_]\)\(:=\)\(\[IndentingNewLine]\)\(Module[{}, \[IndentingNewLine]u[
            x_]\  = \ f[x]\/\(f'\)[x]; \ \[IndentingNewLine]g[x_]\  = \ 
          x\  - \ u[x]\/\(u'\)[x]\ ; \[IndentingNewLine]k\  = \ 
          0; \ \[IndentingNewLine]p0\  = \ 
          N[x0]; \ \ \[IndentingNewLine]Print[\*"\"\<\!\(p\_0\) = \>\"", 
          PaddedForm[p0, {16, 15}], \*"\"\<,   f[\!\(p\_0\)] = \>\"", 
          NumberForm[f[p0], 16]\ ]; \ \[IndentingNewLine]p1\  = \ 
          p0; \ \[IndentingNewLine]While[\ 
          k < max, \[IndentingNewLine]p0\  = \ 
            p1; \ \[IndentingNewLine]p1\  = \ 
            g[p0]; \ \ \ \[IndentingNewLine]k\  = \ 
            k + 1; \ \ \[IndentingNewLine]Print["\<p\>"\_k, "\< = \>", 
            PaddedForm[p1, {16, 15}], "\<,   f[\>", "\<p\>"\_k, "\<] = \>", 
            NumberForm[f[p1], 
              16]\ ];\ ]; \ \[IndentingNewLine]Print["\<\n\>", "\<f[x] = \>", 
          f[x]\ ]; \ \ \[IndentingNewLine]Print["\<  p  = \>", 
          PaddedForm[
            p1, {16, 
              15}]\ ]; \ \[IndentingNewLine]Print["\< \[CapitalDelta]p  = \
\[PlusMinus]\>", Abs[p1 - p0]\ ]; \ \[IndentingNewLine]Print["\<f[p] = \>", 
          PaddedForm[f[p1], {16, 15}]\ ];\ ]\)\(\ \)\)\)], "Input"],

Cell[TextData[StyleBox["Limitations of Methods A and B",
  FontFamily->"Times New Roman",
  FontWeight->"Bold",
  FontColor->RGBColor[0, 0, 1]]], "Text",
  TextAlignment->Left],

Cell[TextData[{
  StyleBox["\tMethod A has the disadvantage that the order  ",
    FontFamily->"Times New Roman"],
  "m",
  StyleBox["  of the root must be known a priori.  Determining  ",
    FontFamily->"Times New Roman"],
  "m",
  StyleBox["  is often laborious because some type of mathematical analysis \
must be used.  It is usually found by looking at the values of the higher \
derivatives of  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(f \((x)\)\)]],
  StyleBox[".  That is,  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(f \((x)\) = 0\)]],
  StyleBox["  has a root of order  ",
    FontFamily->"Times New Roman"],
  "m",
  StyleBox["  at  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(x = p\)]],
  StyleBox["  if and only if  \n\n",
    FontFamily->"Times New Roman"],
  StyleBox["(12)",
    FontFamily->"Times New Roman",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["\t\t",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      RowBox[{\(f \((p)\) = 0\), 
        StyleBox[",",
          FontFamily->"Times New Roman",
          FontSize->12,
          FontWeight->"Plain",
          FontSlant->"Plain",
          FontColor->GrayLevel[0],
          FontVariations->{"Underline"->False,
          "StrikeThrough"->False}], 
        StyleBox[" ",
          FontFamily->"Times New Roman",
          FontSize->12,
          FontWeight->"Plain",
          FontSlant->"Plain",
          FontColor->GrayLevel[0],
          FontVariations->{"Underline"->False,
          "StrikeThrough"->False}], \(f' \((p)\) = 0\), 
        StyleBox[",",
          FontFamily->"Times New Roman",
          FontSize->12,
          FontWeight->"Plain",
          FontSlant->"Plain",
          FontColor->GrayLevel[0],
          FontVariations->{"Underline"->False,
          "StrikeThrough"->False}], 
        StyleBox[" ",
          FontFamily->"Times New Roman",
          FontSize->12,
          FontWeight->"Plain",
          FontSlant->"Plain",
          FontColor->GrayLevel[0],
          FontVariations->{"Underline"->False,
          "StrikeThrough"->False}], \(f'' \((p)\) = 0\), 
        StyleBox[",",
          FontFamily->"Times New Roman",
          FontSize->12,
          FontWeight->"Plain",
          FontSlant->"Plain",
          FontColor->GrayLevel[0],
          FontVariations->{"Underline"->False,
          "StrikeThrough"->False}], "...", 
        StyleBox[",",
          FontFamily->"Times New Roman",
          FontSize->12,
          FontWeight->"Plain",
          FontSlant->"Plain",
          FontColor->GrayLevel[0],
          FontVariations->{"Underline"->False,
          "StrikeThrough"->False}], \(\(f\^\((m - 1)\)\) \((p)\) = 0\), 
        StyleBox[",",
          FontFamily->"Times New Roman",
          FontSize->12,
          FontWeight->"Plain",
          FontSlant->"Plain",
          FontColor->GrayLevel[0],
          FontVariations->{"Underline"->False,
          "StrikeThrough"->False}], 
        StyleBox[" ",
          FontFamily->"Times New Roman",
          FontSize->12,
          FontWeight->"Plain",
          FontSlant->"Plain",
          FontColor->GrayLevel[0],
          FontVariations->{"Underline"->False,
          "StrikeThrough"->False}], 
        RowBox[{
          RowBox[{
            StyleBox["and",
              FontFamily->"Times New Roman",
              FontSize->12,
              FontWeight->"Plain",
              FontSlant->"Plain",
              FontColor->GrayLevel[0],
              FontVariations->{"Underline"->False,
              "StrikeThrough"->False}], 
            StyleBox["   ",
              FontFamily->"Times New Roman",
              FontSize->12,
              FontWeight->"Plain",
              FontSlant->"Plain",
              FontColor->GrayLevel[0],
              FontVariations->{"Underline"->False,
              "StrikeThrough"->False}], \(f\^\((m)\)\), \((p)\)}], 
          "\[NotEqual]", "0"}]}]]],
  ". ",
  StyleBox["\n\t\nDodes (1978, pp. 81-82) has observed that in practical \
problems it is unlikely that we will know the multiplicity.  However, a \
constant  ",
    FontFamily->"Times New Roman"],
  "m",
  StyleBox["  should be used in (8) to speed up convergence, and it should be \
chosen small enough so that  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p\_\(k + 1\)\)]],
  StyleBox["   ",
    FontFamily->"Times New Roman",
    FontSlant->"Italic"],
  StyleBox["does not shoot to the wrong side of  p.  Rice (1983, pp. 232-233) \
has suggested a way to empirically find  ",
    FontFamily->"Times New Roman"],
  "m",
  StyleBox[".  If  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(\(p\^*\)\)]],
  StyleBox["  is a good approximation to  p  and ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p\_1\)]],
  StyleBox[", and ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p\_2\)]],
  StyleBox[" somewhat distant from  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(\(p\^*\)\)]],
  StyleBox["  then  ",
    FontFamily->"Times New Roman"],
  "m",
  StyleBox["  can be determined by the calculation: \n\n\t\t",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(m\ \  \[TildeTilde] \ \ ln | \(f \((p\_1)\)\)\/\(f \((p\_2)\)\) | \
\(\(/\)\(ln\)\) | \(p\_1 - \(p\^*\)\)\/\(p\_2 - \(p\^*\)\) | \)]],
  ".  "
}], "Text"],

Cell[TextData[{
  StyleBox["\tMethod B has a disadvantage, it involves three functions  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      RowBox[{\(f \((x)\)\), 
        StyleBox[",",
          FontFamily->"Times New Roman",
          FontSize->12,
          FontWeight->"Plain",
          FontSlant->"Plain",
          FontColor->GrayLevel[0],
          FontVariations->{"Underline"->False,
          "StrikeThrough"->False}], "  ", 
        RowBox[{\(f'\), \((x)\), "  ", 
          StyleBox["and",
            FontFamily->"Times New Roman",
            FontSize->12,
            FontWeight->"Plain",
            FontSlant->"Plain",
            FontColor->GrayLevel[0],
            FontVariations->{"Underline"->False,
            "StrikeThrough"->False}], "  ", \(f''\), \((x)\)}]}]]],
  StyleBox[".  Again, the laborious task of finding the formula for  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(f'' \((x)\)\)]],
  StyleBox["  could detract from using Method B.  Furthermore, Ralston and \
Rabinowitz (1978, pp. 353-356) have observed that  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(u \((x)\)\)]],
  StyleBox["  will have poles at points where the zeros of  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(f' \((x)\)\)]],
  StyleBox["  are not roots of ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(f \((x)\)\)]],
  StyleBox[".  Hence,  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(u \((x)\)\)]],
  StyleBox["  may not be a continuous function. ",
    FontFamily->"Times New Roman"]
}], "Text"],

Cell[TextData[StyleBox["The New Method C.  Adaptive Newton-Raphson",
  FontFamily->"Times New Roman",
  FontWeight->"Bold",
  FontColor->RGBColor[0, 0, 1]]], "Text",
  TextAlignment->Left],

Cell[TextData[{
  StyleBox["\tThe adaptive Newton-Raphson method incorporates a linear search \
method with formula (8).  Starting with  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p\_0\)]],
  StyleBox[",  the following values are computed:  \n\n",
    FontFamily->"Times New Roman"],
  StyleBox["(13)",
    FontFamily->"Times New Roman",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["\t\t",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p\_j\ \  = \ \ p\_0\ \  - \ \ j \( f \((p\_0)\)\)\/\(f' \
\((p\_0)\)\)\)]],
  "    for    ",
  Cell[BoxData[
      RowBox[{
        StyleBox[\(j = 1\),
          FontSize->12], 
        StyleBox[",",
          FontFamily->"Times New Roman",
          FontWeight->"Plain",
          FontSlant->"Plain",
          FontColor->GrayLevel[0],
          FontVariations->{"Underline"->False,
          "StrikeThrough"->False}], 
        StyleBox["2",
          FontSize->12], 
        StyleBox[",",
          FontFamily->"Times New Roman",
          FontWeight->"Plain",
          FontSlant->"Plain",
          FontColor->GrayLevel[0],
          FontVariations->{"Underline"->False,
          "StrikeThrough"->False}], 
        StyleBox["...",
          FontSize->12], 
        StyleBox[",",
          FontFamily->"Times New Roman",
          FontWeight->"Plain",
          FontSlant->"Plain",
          FontColor->GrayLevel[0],
          FontVariations->{"Underline"->False,
          "StrikeThrough"->False}], 
        StyleBox["m",
          FontSize->12]}]]],
  ".  \n",
  StyleBox["\nOur task is to determine the value  ",
    FontFamily->"Times New Roman"],
  "m",
  StyleBox["  to use in formula (13), because it is not known a priori.  \
First, we take the derivative of  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(f \((x)\)\)]],
  StyleBox["  in formula (5), and obtain:  \n\n",
    FontFamily->"Times New Roman"],
  StyleBox["(14)",
    FontFamily->"Times New Roman",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["\t\t",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(f' \((x)\)\ \  = \ \((x - p)\)\^m\ h' \((x)\)\  + \ \ m\ \((x - \
p)\)\^\(m - 1\)\ h \((x)\)\)]],
  StyleBox["  \n\nWhen (5) and (14) are substituted into formula (1) we have  \
",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(g \((x)\) = 
        x - \(\((x - p)\)\^m\ h \((x)\)\)\/\(m\ \((x - p)\)\^\(\(-1\) + m\)\ \
h \((x)\) + \((x - p)\)\^m\ h' \((x)\)\)\)]],
  "  which can be simplified to get  \n\n\t\t",
  Cell[BoxData[
      \(g \((x)\)\ \  = \ \ x\  - \ \(1\/m\) \((x - p)\) 
            1\/\(1\  + \((x - p)\)\ h' \((x)\)/\((m\ h \((x)\))\)\)\)]],
  ". "
}], "Text"],

Cell[TextData[{
  StyleBox["This enables us to rewrite (13) as  \n\n",
    FontFamily->"Times New Roman"],
  StyleBox["(15)",
    FontFamily->"Times New Roman",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["\t\t",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p\_j\  = \ 
        p\_0\  - \ \(j\/m\) \((p\_0 - p)\) 
            1\/\(1\  + \((p\_0 - p)\)\ h' \((p\_0)\)/\((m\ h \
\((p\_0)\))\)\)\)]],
  ".  "
}], "Text"],

Cell[TextData[{
  StyleBox["\tWe shall assume that the starting value  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p\_0\)]],
  StyleBox["  is close enough to  p  so that  \n\n",
    FontFamily->"Times New Roman"],
  StyleBox["(16)",
    FontFamily->"Times New Roman",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["\t\t",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(1\/\(1\  + \((p\_0 - p)\)\ h' \((p\_0)\)/\((m\ h \((p\_0)\))\)\)\ \  \
= \ \ \(\(\(1\)\(+\)\)\(\[Element]\)\)\)]],
  ",    where    ",
  Cell[BoxData[
      \(\[Epsilon] \[TildeTilde] \ 0\)]],
  ".  "
}], "Text"],

Cell[TextData[{
  StyleBox["The iterates  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p\_j\)]],
  StyleBox["  in (15) satisfy the following:  \n\n",
    FontFamily->"Times New Roman"],
  StyleBox["(17)",
    FontFamily->"Times New Roman",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["\t\t",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p\_j\  = \ 
        p\_0\  - \ \(j\/m\) \((p\_0 - p)\) \((1 + \[Epsilon])\)\)]],
  "    for  ",
  StyleBox["  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      RowBox[{\(j = 1\), 
        StyleBox[",",
          FontFamily->"Times New Roman",
          FontSize->12,
          FontWeight->"Plain",
          FontSlant->"Plain",
          FontColor->GrayLevel[0],
          FontVariations->{"Underline"->False,
          "StrikeThrough"->False}], "2", 
        StyleBox[",",
          FontFamily->"Times New Roman",
          FontSize->12,
          FontWeight->"Plain",
          FontSlant->"Plain",
          FontColor->GrayLevel[0],
          FontVariations->{"Underline"->False,
          "StrikeThrough"->False}], "..."}]]],
  "     "
}], "Text"],

Cell[TextData[{
  StyleBox["If we subtract  p  from both sides of (17) then  \n\n\t\t",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p\_j - 
          p\  = \ \((p\_0 - 
              p)\)\  - \ \(j\/m\) \((p\_0 - p)\) \((1 + \[Epsilon])\)\)]],
  " ",
  StyleBox["\n\nand the result after simplification is:  \n\n",
    FontFamily->"Times New Roman"],
  StyleBox["(18)",
    FontFamily->"Times New Roman",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["\t\t",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p\_j - 
          p\  = \ \((1\  - \ j\/m)\) \((1 + \[Epsilon])\) \((p\_0 - p)\)\)]],
  ".",
  StyleBox["  \n\nSince  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(\((1 + \[Epsilon])\) \[TildeTilde] 1\)]],
  StyleBox[",  the iterates  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p\_j\)]],
  "  ",
  StyleBox["get closer to  p  as  ",
    FontFamily->"Times New Roman"],
  StyleBox["j",
    FontFamily->"Courier New"],
  StyleBox["  goes from  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      RowBox[{"1", "  ", 
        StyleBox["to",
          FontFamily->"Times New Roman",
          FontSize->12,
          FontWeight->"Plain",
          FontSlant->"Plain",
          FontColor->GrayLevel[0],
          FontVariations->{"Underline"->False,
          "StrikeThrough"->False}], "  ", "m"}]]],
  StyleBox[",  which is manifest by the inequalities:\n\n",
    FontFamily->"Times New Roman"],
  StyleBox["(19)",
    FontFamily->"Times New Roman",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["\t\t",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(\(\(|\)\(p\_0 - 
          p\)\(|\)\(\(>\)\(\(|\)\(p\_1 - 
              p\)\(|\)\(\(\(>\)\(...\)\)\(>\)\)\(|\)\(p\_j - 
              p\)\(|\)\(\(\(>\)\(...\)\)\(>\)\)\(|\)\(p\_m - 
              p\)\(|\)\)\)\)\)]],
  ".  "
}], "Text"],

Cell[TextData[{
  StyleBox["The values  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p\_j\)]],
  StyleBox["  are shown in Figure 1.  \n\n\tNotice that if the iteration (15) \
was continued for  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      RowBox[{"m", "+", 
        RowBox[{"1", "  ", 
          StyleBox["and",
            FontFamily->"Times New Roman",
            FontSize->12,
            FontWeight->"Plain",
            FontSlant->"Plain",
            FontColor->GrayLevel[0],
            FontVariations->{"Underline"->False,
            "StrikeThrough"->False}], "  ", "m"}], "+", "2"}]]],
  StyleBox["  then  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      RowBox[{"|", \(f \((p\_\(m + 1\))\)\), "|", " ", 
        StyleBox["and",
          FontFamily->"Times New Roman",
          FontSize->12,
          FontWeight->"Plain",
          FontSlant->"Plain",
          FontColor->GrayLevel[0],
          FontVariations->{"Underline"->False,
          "StrikeThrough"->False}], " ", "|", \(f \((p\_\(m + 2\))\)\), 
        "|"}]]],
  "  could",
  StyleBox[" be larger than  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(\(\(|\)\(f \((p\_m)\)\)\(|\)\)\)]],
  StyleBox[".  This is proven by using the derivatives in (12) and the Taylor \
polynomial approximation of degree  ",
    FontFamily->"Times New Roman"],
  "m",
  StyleBox["  for  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(f \((x)\)\)]],
  StyleBox["   expanded about  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(x = p\)]],
  StyleBox[":  \n\n",
    FontFamily->"Times New Roman"],
  StyleBox["(20)",
    FontFamily->"Times New Roman",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["\t\t",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      RowBox[{\(f \((x)\)\), "  ", "\[TildeTilde]", "  ", 
        RowBox[{
          FractionBox[
            RowBox[{
              SuperscriptBox["f", 
                TagBox[\((m)\),
                  Derivative],
                
                MultilineFunction->None], \((p)\)}], \(m!\)], \(\((x - 
                  p)\)\^m\)}]}]]],
  StyleBox[".  ",
    FontFamily->"Times New Roman"]
}], "Text"],

Cell[TextData[{
  StyleBox["\t\t",
    FontFamily->"Times New Roman"],
  Cell[GraphicsData["PostScript", "\<\
%!
%%Creator: Mathematica
%%AspectRatio: .61803 
%%ImageSize: 480 360 
MathPictureStart
/Mabs {
Mgmatrix idtransform
Mtmatrix dtransform
} bind def
/Mabsadd { Mabs
3 -1 roll add
3 1 roll add
exch } bind def
%% Graphics
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 10  scalefont  setfont
% Scaling calculations
-1.11111 1.5873 0.0813203 1.62641 [
[ 0 0 0 0 ]
[ 1 .61803 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
0 g
.25 Mabswid
[ ] 0 setdash
0 .08132 m
1 .08132 L
s
0 0 m
0 .61803 L
s
0 0 m
1 0 L
1 .61803 L
0 .61803 L
closepath
clip
newpath
1 0 1 r
.5 Mabswid
0 .47654 m
.04185 .41333 L
.0875 .35001 L
.13037 .2961 L
.1716 .2495 L
.21548 .20574 L
.25773 .16951 L
.30262 .13753 L
.34588 .1133 L
.3875 .09627 L
.40899 .08994 L
.41996 .08737 L
.43177 .08511 L
.44282 .08346 L
.45293 .08236 L
.45779 .08197 L
.46036 .0818 L
.4631 .08165 L
.46572 .08153 L
.46811 .08145 L
.46926 .08141 L
.4705 .08138 L
.47166 .08136 L
.47276 .08134 L
.4741 .08133 L
.47533 .08132 L
.47665 .08132 L
.47739 .08132 L
.47808 .08133 L
.47923 .08134 L
.48049 .08136 L
.48181 .08138 L
.48305 .08141 L
.48589 .0815 L
.48849 .08161 L
.49436 .08196 L
.49967 .08239 L
.50547 .08299 L
.51718 .0846 L
.52831 .08664 L
.53842 .08892 L
.56112 .09554 L
.5819 .10344 L
.60443 .11403 L
.64876 .14108 L
.69145 .17511 L
.73249 .21538 L
.77619 .26659 L
.81825 .32419 L
.86297 .39456 L
Mistroke
.90604 .47145 L
.94748 .55402 L
Mfstroke
.94748 .55402 m
.97647 .61803 L
s
.025 w
.95238 .56436 Mdot
0 0 1 r
.72464 .20709 Mdot
1 0 0 r
.49689 .08215 Mdot
0 1 0 r
.26915 .16072 Mdot
1 .5 0 r
.04141 .41398 Mdot
0 0 1 r
.5 Mabswid
.95238 .56436 m
.72464 .08132 L
s
1 0 0 r
.95238 .56436 m
.49689 .08132 L
s
0 1 0 r
.95238 .56436 m
.26915 .08132 L
s
1 .5 0 r
.95238 .56436 m
.04141 .08132 L
s
1 0 1 r
.008 w
.95238 .06506 m
.95238 .09758 L
s
0 0 1 r
.72464 .06506 m
.72464 .09758 L
s
1 0 0 r
.49689 .06506 m
.49689 .09758 L
s
0 1 0 r
.26915 .06506 m
.26915 .09758 L
s
1 .5 0 r
.04141 .06506 m
.04141 .09758 L
s
0 g
gsave
.95238 .04066 -66.5938 -10.2813 Mabsadd m
1 1 Mabs scale
currentpoint translate
0 20.5625 translate 1 -1 scale
63.000 12.813 moveto
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 12.000 scalefont
[1 0 0 -1 0 0 ] makefont setfont
0.000 0.000 0.000 setrgbcolor
0.000 0.000 rmoveto
63.000 12.813 moveto
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 12.000 scalefont
[1 0 0 -1 0 0 ] makefont setfont
0.000 0.000 0.000 setrgbcolor
(p) show
70.188 12.813 moveto
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 12.000 scalefont
[1 0 0 -1 0 0 ] makefont setfont
0.000 0.000 0.000 setrgbcolor
0.000 0.000 rmoveto
1.000 setlinewidth
grestore
gsave
.72464 .04066 -66.5938 -10.2813 Mabsadd m
1 1 Mabs scale
currentpoint translate
0 20.5625 translate 1 -1 scale
63.000 12.813 moveto
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 12.000 scalefont
[1 0 0 -1 0 0 ] makefont setfont
0.000 0.000 0.000 setrgbcolor
0.000 0.000 rmoveto
63.000 12.813 moveto
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 12.000 scalefont
[1 0 0 -1 0 0 ] makefont setfont
0.000 0.000 0.000 setrgbcolor
(p) show
70.188 12.813 moveto
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 12.000 scalefont
[1 0 0 -1 0 0 ] makefont setfont
0.000 0.000 0.000 setrgbcolor
0.000 0.000 rmoveto
1.000 setlinewidth
grestore
gsave
.49689 .04066 -66.5938 -10.2813 Mabsadd m
1 1 Mabs scale
currentpoint translate
0 20.5625 translate 1 -1 scale
63.000 12.813 moveto
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 12.000 scalefont
[1 0 0 -1 0 0 ] makefont setfont
0.000 0.000 0.000 setrgbcolor
0.000 0.000 rmoveto
63.000 12.813 moveto
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 12.000 scalefont
[1 0 0 -1 0 0 ] makefont setfont
0.000 0.000 0.000 setrgbcolor
(p) show
70.188 12.813 moveto
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 12.000 scalefont
[1 0 0 -1 0 0 ] makefont setfont
0.000 0.000 0.000 setrgbcolor
0.000 0.000 rmoveto
1.000 setlinewidth
grestore
gsave
.26915 .04066 -66.5938 -10.2813 Mabsadd m
1 1 Mabs scale
currentpoint translate
0 20.5625 translate 1 -1 scale
63.000 12.813 moveto
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 12.000 scalefont
[1 0 0 -1 0 0 ] makefont setfont
0.000 0.000 0.000 setrgbcolor
0.000 0.000 rmoveto
63.000 12.813 moveto
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 12.000 scalefont
[1 0 0 -1 0 0 ] makefont setfont
0.000 0.000 0.000 setrgbcolor
(p) show
70.188 12.813 moveto
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 12.000 scalefont
[1 0 0 -1 0 0 ] makefont setfont
0.000 0.000 0.000 setrgbcolor
0.000 0.000 rmoveto
1.000 setlinewidth
grestore
gsave
.04141 .04066 -66.5938 -10.2813 Mabsadd m
1 1 Mabs scale
currentpoint translate
0 20.5625 translate 1 -1 scale
63.000 12.813 moveto
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 12.000 scalefont
[1 0 0 -1 0 0 ] makefont setfont
0.000 0.000 0.000 setrgbcolor
0.000 0.000 rmoveto
63.000 12.813 moveto
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 12.000 scalefont
[1 0 0 -1 0 0 ] makefont setfont
0.000 0.000 0.000 setrgbcolor
(p) show
70.188 12.813 moveto
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 12.000 scalefont
[1 0 0 -1 0 0 ] makefont setfont
0.000 0.000 0.000 setrgbcolor
0.000 0.000 rmoveto
1.000 setlinewidth
grestore
gsave
.96349 .02277 -66.5938 -10.2813 Mabsadd m
1 1 Mabs scale
currentpoint translate
0 20.5625 translate 1 -1 scale
63.000 12.813 moveto
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 12.000 scalefont
[1 0 0 -1 0 0 ] makefont setfont
0.000 0.000 0.000 setrgbcolor
0.000 0.000 rmoveto
63.000 12.813 moveto
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 12.000 scalefont
[1 0 0 -1 0 0 ] makefont setfont
0.000 0.000 0.000 setrgbcolor
(0) show
70.188 12.813 moveto
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 12.000 scalefont
[1 0 0 -1 0 0 ] makefont setfont
0.000 0.000 0.000 setrgbcolor
0.000 0.000 rmoveto
1.000 setlinewidth
grestore
gsave
.73575 .02277 -66.5938 -10.2813 Mabsadd m
1 1 Mabs scale
currentpoint translate
0 20.5625 translate 1 -1 scale
63.000 12.813 moveto
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 12.000 scalefont
[1 0 0 -1 0 0 ] makefont setfont
0.000 0.000 0.000 setrgbcolor
0.000 0.000 rmoveto
63.000 12.813 moveto
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 12.000 scalefont
[1 0 0 -1 0 0 ] makefont setfont
0.000 0.000 0.000 setrgbcolor
(1) show
70.188 12.813 moveto
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 12.000 scalefont
[1 0 0 -1 0 0 ] makefont setfont
0.000 0.000 0.000 setrgbcolor
0.000 0.000 rmoveto
1.000 setlinewidth
grestore
gsave
.50801 .02277 -66.5938 -10.2813 Mabsadd m
1 1 Mabs scale
currentpoint translate
0 20.5625 translate 1 -1 scale
63.000 12.813 moveto
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 12.000 scalefont
[1 0 0 -1 0 0 ] makefont setfont
0.000 0.000 0.000 setrgbcolor
0.000 0.000 rmoveto
63.000 12.813 moveto
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 12.000 scalefont
[1 0 0 -1 0 0 ] makefont setfont
0.000 0.000 0.000 setrgbcolor
(2) show
70.188 12.813 moveto
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 12.000 scalefont
[1 0 0 -1 0 0 ] makefont setfont
0.000 0.000 0.000 setrgbcolor
0.000 0.000 rmoveto
1.000 setlinewidth
grestore
gsave
.28026 .02277 -66.5938 -10.2813 Mabsadd m
1 1 Mabs scale
currentpoint translate
0 20.5625 translate 1 -1 scale
63.000 12.813 moveto
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 12.000 scalefont
[1 0 0 -1 0 0 ] makefont setfont
0.000 0.000 0.000 setrgbcolor
0.000 0.000 rmoveto
63.000 12.813 moveto
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 12.000 scalefont
[1 0 0 -1 0 0 ] makefont setfont
0.000 0.000 0.000 setrgbcolor
(3) show
70.188 12.813 moveto
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 12.000 scalefont
[1 0 0 -1 0 0 ] makefont setfont
0.000 0.000 0.000 setrgbcolor
0.000 0.000 rmoveto
1.000 setlinewidth
grestore
gsave
.05252 .02277 -66.5938 -10.2813 Mabsadd m
1 1 Mabs scale
currentpoint translate
0 20.5625 translate 1 -1 scale
63.000 12.813 moveto
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 12.000 scalefont
[1 0 0 -1 0 0 ] makefont setfont
0.000 0.000 0.000 setrgbcolor
0.000 0.000 rmoveto
63.000 12.813 moveto
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 12.000 scalefont
[1 0 0 -1 0 0 ] makefont setfont
0.000 0.000 0.000 setrgbcolor
(4) show
70.188 12.813 moveto
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 12.000 scalefont
[1 0 0 -1 0 0 ] makefont setfont
0.000 0.000 0.000 setrgbcolor
0.000 0.000 rmoveto
1.000 setlinewidth
grestore
% End of Graphics
MathPictureEnd
\
\>"], "Graphics",
    ImageSize->{480, 360},
    ImageMargins->{{0, 0}, {0, 0}},
    ImageCache->GraphicsData["Bitmap", "\<\
CF5dJ6E]HGAYHf4PAg9QL6QYHg<PAVmbKF5d0`40007P0001J2000`400?l00000o`00003oo`3ooooQ
0?ooo`00o`3ooooQ0?ooo`00o`3ooooQ0?ooo`00o`3ooooQ0?ooo`00o`3ooooQ0?ooo`00o`3ooooQ
0?ooo`00o`3ooooQ0?ooo`00o`3ooooQ0?ooo`00o`3ooooQ0?ooo`00o`3ooooQ0?ooo`00o`3ooooQ
0?ooo`00o`3ooooQ0?ooo`00o`3ooooQ0?ooo`00o`3ooooQ0?ooo`00o`3ooooQ0?ooo`00o`3ooooQ
0?ooo`00o`3ooooQ0?ooo`00o`3ooooQ0?ooo`00o`3ooooQ0?ooo`00o`3ooooQ0?ooo`00o`3ooooQ
0?ooo`00o`3ooooQ0?ooo`00o`3ooooQ0?ooo`00o`3ooooQ0?ooo`00o`3ooooQ0?ooo`00o`3ooooQ
0?ooo`00o`3ooooQ0?ooo`00o`3ooooQ0?ooo`00o`3ooooQ0?ooo`00o`3ooooQ0?ooo`00o`3ooooQ
0?ooo`00o`3ooooQ0?ooo`0000<000000?ooo`3oool0o`3ooooN0?ooo`0000<000000?ooo`3oool0
o`3ooooN0?ooo`0000<000000?ooo`3oool0o`3ooooN0?ooo`0000<000000?ooo`3oool0o`3ooooN
0?ooo`0000<000000?ooo`3oool0o`3ooooN0?ooo`0000<000000?ooo`3oool0o`3ooooN0?ooo`00
00<000000?ooo`3oool0o`3ooooN0?ooo`0000<000000?ooo`3oool0o`3ooooN0?ooo`0000<00000
0?ooo`3oool0o`3ooooN0?ooo`0000<000000?ooo`3oool05P3oool3000006P0oooo0`00001Y0?oo
o`D00000J03oool5000006T0oooo0`00000B0?ooo`0000<000000?ooo`3oool05`3oool00`000000
oooo0?ooo`1V0?ooo`050000003oool0oooo0?ooo`000000J03oool01@000000oooo0?ooo`3oool0
000006X0oooo00<000000?ooo`3oool0J03oool01@000000oooo0?ooo`3oool000000140oooo0000
0`000000oooo0?ooo`0C0?ooo`H00000J`3oool00`000000oooo0?ooo`1W0?ooo`030000003oool0
oooo06/0oooo00<000000?ooo`3oool0J03oool01@000000oooo0?ooo`3oool000000140oooo0000
0`000000oooo0?ooo`0C0?ooo`050000003oool0oooo0?ooo`000000K03oool00`000000oooo0?oo
o`1X0?ooo`030000003oool0oooo06X0oooo00<000000?ooo`3oool0J03oool01@000000oooo0?oo
o`3oool000000140oooo00000`000000oooo0?ooo`0D0?ooo`040000003oool0oooo000006X0oooo
0P00001/0?ooo`030000003oool0oooo06T0oooo00<000000?ooo`3oool0J03oool01@000000oooo
0?ooo`3oool000000140oooo00000`000000oooo0?ooo`0E0?ooo`030000003oool0000006`0oooo
00<000000?ooo`3oool0JP3oool00`000000oooo0?ooo`1X0?ooo`030000003oool0oooo06P0oooo
00D000000?ooo`3oool0oooo0000000A0?ooo`0000<000000?ooo`3oool05@3oool00`000000oooo
0000001X0?ooo`050000003oool0oooo0?ooo`000000J03oool01@000000oooo0?ooo`3oool00000
06X0oooo00<000000?ooo`3oool0J03oool01@000000oooo0?ooo`3oool000000140oooo00000`00
0000oooo0?ooo`0=0?ooo`<000001P3oool200000680oooo0`0000040?ooo`<00000H`3oool30000
00@0oooo0`00001S0?ooo`<00000103oool2000006@0oooo0`0000040?ooo`<000004P3oool00003
0000003oool0oooo00h0oooo00<000000?ooo`3oool0JP3oool00`000000oooo0?ooo`1Z0?ooo`03
0000003oool0oooo06X0oooo00<000000?ooo`3oool0JP3oool00`000000oooo0?ooo`0H0?ooo`00
00<000000?ooo`3oool03P3oool4000006T0oooo1000001Y0?ooo`@00000J@3oool4000006T0oooo
1000000G0?ooo`0000<000000?ooo`3oool03P3oool01@000000oooo0?ooo`3oool0000006P0oooo
00D000000?ooo`3oool0oooo0000001X0?ooo`050000003oool0oooo0?ooo`000000J03oool01@00
0000oooo0?ooo`3oool0000006P0oooo00D000000?ooo`3oool0oooo0000000F0?ooo`0000<00000
0?ooo`3oool03P3oool01@000000oooo0?ooo`3oool0000006P0oooo00D000000?ooo`3oool0oooo
0000001X0?ooo`050000003oool0oooo0?ooo`000000J03oool01@000000oooo0?ooo`3oool00000
06P0oooo00D000000?ooo`3oool0oooo0000000F0?ooo`0000<000000?ooo`3oool03P3oool01@00
0000oooo0?ooo`3oool0000006P0oooo00D000000?ooo`3oool0oooo0000001X0?ooo`050000003o
ool0oooo0?ooo`000000J03oool01@000000oooo0?ooo`3oool0000006P0oooo00D000000?ooo`3o
ool0oooo0000000F0?ooo`0000<000000?ooo`3oool03P3oool200000080oooo00<000000?ooo`3o
ool0IP3oool200000080oooo00<000000?ooo`3oool0IP3oool200000080oooo00<000000?ooo`3o
ool0IP3oool200000080oooo00<000000?ooo`3oool0IP3oool200000080oooo00<000000?ooo`3o
ool0503oool000030000003oool0oooo00d0oooo0P0000000`3oool000000000001X0?ooo`800000
00<0oooo000000000000J03oool2000000030?ooo`000000000006P0oooo0P0000000`3oool00000
0000001X0?ooo`80000000<0oooo0000000000005`3oool000030000003oool0oooo0?l0oooogP3o
ool000030000003oool0oooo0?l0oooogP3oool000030000003oool0oooo0?l0oooogP3oool00003
0000003oool0oooo0?l0oooogP3oool000030000003oool0oooo0?l0oooogP3oool000030000003o
ool0oooo0?l0oooogP3oool000030000003oool0oooo00l0oooo0`3oO`1Z0?ooo`<00?l0J`3oool3
0?l006X0oooo0`000?mZ0?ooo`<0o`3o5P3oool000030000003oool0oooo00l0oooo0`3oO`1Z0?oo
o`<00?l0J`3oool30?l006X0oooo0`000?mZ0?ooo`<0o`3o5P3oool000030000003oool0oooo00l0
oooo0`3oO`1Z0?ooo`<00?l0J`3oool30?l006X0oooo0`000?mZ0?ooo`<0o`3o5P3oool000030000
003oool0oooo00l0oooo0`3oO`1Z0?ooo`<00?l0J`3oool30?l006X0oooo0`000?mZ0?ooo`<0o`3o
5P3oool000030000003oool0oooo00l0oooo0`3oO`1Z0?ooo`<00?l0J`3oool30?l006X0oooo0`00
0?mZ0?ooo`<0o`3o5P3oool000030000003oool0oooo00l0oooo0`3oO`1Z0?ooo`<00?l0JP3oool4
0?l006X0oooo0`000?mZ0?ooo`<0o`3o5P3oool000030000003oool0oooo00l0oooo0`3oO`1Z0?oo
o`<00?l0J03oool70?l006T0oooo0`000?mZ0?ooo`<0o`3o5P3oool000030000003oool0oooo00l0
oooo0`3oO`1Z0?ooo`<00?l0I`3oool90?l006P0oooo0`000?mZ0?ooo`<0o`3o5P3oool000030000
003oool0oooo00l0oooo0`3oO`1Z0?ooo`<00?l0I`3oool90?l006P0oooo0`000?mZ0?ooo`<0o`3o
5P3oool0018000000`3oO`1Z000000<00?l0E@00000A0?l0o`/0o`00I`0000030000ofX000000`3o
0?lE00000040oooo00000`000000oooo0?ooo`0?0?ooo`@0ogl0J@3oool4003o04l0oooo1@3o0?lA
0?ooo`/0o`000P3o0?mU0?ooo`<0003oJP3oool30?l0oaH0oooo00000`000000oooo0?ooo`0?0?oo
o`<0ogl000<0oooo0?mo003oO`00I`3oool3003o00030?ooo`00o`00oooo04L0oooo1P3o0?lF0?oo
o`/0o`000P3oool90?l0oe`0oooo0`000?mZ0?ooo`<0o`3o5P3oool000030000003oool0oooo00l0
oooo0`3oO`030?ooo`80ogl0I@3oool3003o0080oooo00<00?l00?ooo`3oool0@03oool50?l0oad0
oooo2@3o000<0?ooo`80o`3oFP3oool30000ofX0oooo0`3o0?lF0?ooo`0000<000000?ooo`3oool0
3`3oool30?mo00D0oooo0P3oO`1S0?ooo`<00?l00`3oool2003o03/0oooo1@3o0?lR0?ooo`X0o`00
3@3oool30?l0oeL0oooo10000?mY0?ooo`<0o`3o5P3oool000030000003oool0oooo00l0oooo0`3o
O`070?ooo`80ogl0H@3oool3003o00D0oooo00<00?l00?ooo`3oool0=@3oool30?l0obP0oooo1`3o
00020?ooo`030?l0003oool0oooo00d0oooo103o0?mC0?ooo`@0003oJ@3oool30?l0oaH0oooo0000
0`000000oooo0?ooo`0?0?ooo`<0ogl02@3oool20?mo05l0oooo0`00o`060?ooo`800?l0<@3oool4
0?l0obd0oooo103o00040?ooo`030?l0003oool0oooo0100oooo103o0?m?0?ooo`<0003o00<0oooo
0000o`3oool0I`3oool30?l0oaH0oooo00000`000000oooo0?ooo`0?0?ooo`<0ogl02`3oool20?mo
05d0oooo0`00o`080?ooo`03003o003oool0oooo02/0oooo0`3o0?lb0?ooo`<0o`001@3oool00`3o
0000oooo0?ooo`0C0?ooo`<0o`3oC03oool30000o`030?ooo`000?l0oooo06L0oooo0`3o0?lF0?oo
o`0000<000000?ooo`3oool03`3oool30?mo00d0oooo0P3oO`1K0?ooo`<00?l02@3oool2003o02T0
oooo0P3o0?le0?ooo`<0o`001P3oool00`3o0000oooo0?ooo`0E0?ooo`80o`3oBP3oool30000o`80
oooo00<0003o0?ooo`3oool0I@3oool30?l0oaH0oooo00000`000000oooo0?ooo`0?0?ooo`<0ogl0
3`3oool00`3oO`00oooo0?ooo`1H0?ooo`<00?l02`3oool00`00o`00oooo0?ooo`0S0?ooo`<0o`3o
=`3oool30?l000H0oooo00<0o`000?ooo`3oool05`3oool30?l0odL0oooo0`000?l20?ooo`030000
o`3oool0oooo06D0oooo0`3o0?lF0?ooo`0000<000000?ooo`3oool08P3oool20?mo06L0oooo00<0
0?l00?ooo`3oool0803oool20?l0od@0oooo00<0o`000?ooo`3oool06@3oool20?l0od/0oooo00<0
003o0?ooo`3oool0O@3oool000030000003oool0oooo02@0oooo0P3oO`1V0?ooo`800?l07@3oool3
0?l0odL0oooo00<0o`000?ooo`3oool06P3oool30?l0odP0oooo00<0003o0?ooo`3oool0O@3oool0
00030000003oool0oooo02H0oooo0P3oO`1V0?ooo`03003o003oool0oooo01P0oooo0P3o0?m;0?oo
o`030?l0003oool0oooo01`0oooo0P3o0?m70?ooo`030000o`3oool0oooo07`0oooo00000`000000
oooo0?ooo`0X0?ooo`80ogl0I@3oool2003o01D0oooo0`3o0?m>0?ooo`030?l0003oool0oooo01d0
oooo0P3o0?m50?ooo`030000o`3oool0oooo07`0oooo00000`000000oooo0?ooo`0Z0?ooo`80ogl0
I@3oool00`00o`00oooo0?ooo`0@0?ooo`80o`3oDP3oool00`3o0000oooo0?ooo`0N0?ooo`80o`3o
A03oool00`000?l0oooo0?ooo`1k0?ooo`0000<000000?ooo`3oool0;03oool20?mo06@0oooo0P00
o`0>0?ooo`80o`3oE@3oool00`3o0000oooo0?ooo`0O0?ooo`80o`3o@P3oool00`000?l0oooo0?oo
o`1k0?ooo`0000<000000?ooo`3oool0;P3oool20?mo06@0oooo00<00?l00?ooo`3oool02@3oool2
0?l0oeP0oooo00<0o`000?ooo`3oool0803oool20?l0od40oooo00<0003o0?ooo`3oool0NP3oool0
00030000003oool0oooo0300oooo0P3oO`1S0?ooo`03003o003oool0oooo00H0oooo0P3o0?mK0?oo
o`030?l0003oool0oooo0240oooo0P3o0?lo0?ooo`030000o`3oool0oooo07X0oooo00000`000000
oooo0?ooo`0b0?ooo`030?mo003oool0oooo0640oooo0P00o`040?ooo`80o`3oGP3oool00`3o0000
oooo0?ooo`0R0?ooo`80o`3o?@3oool00`000?l0oooo0?ooo`1j0?ooo`0000<000000?ooo`3oool0
<`3oool20?mo06<0oooo00@00?l00?ooo`3oool0o`3oH@3oool00`3o0000oooo0?ooo`0S0?ooo`03
0?l0o`3oool0oooo03/0oooo00<0003o0?ooo`3oool0N@3oool000030000003oool0oooo03D0oooo
0P3oO`1R0?ooo`800?l0H`3oool00`3o0000oooo0?ooo`0S0?ooo`80o`3o>`3oool00`000?l0oooo
0?ooo`1i0?ooo`0000<000000?ooo`3oool0=`3oool20?mo05h0oooo0P3o0?l20?ooo`03003o003o
ool0oooo0640oooo00<0o`000?ooo`3oool0903oool00`3o0?l0oooo0?ooo`0i0?ooo`030000o`3o
ool0oooo07P0oooo00000`000000oooo0?ooo`0i0?ooo`80ogl0FP3oool20?l0o`D0oooo00<00?l0
0?ooo`3oool0H@3oool00`3o0000oooo0?ooo`0T0?ooo`80o`3o>@3oool00`000?l0oooo0?ooo`1h
0?ooo`0000<000000?ooo`3oool0>`3oool20?mo05L0oooo00<0o`3o0?ooo`3oool01P3oool2003o
0680oooo00<0o`000?ooo`3oool09@3oool20?l0ocP0oooo00<0003o0?ooo`3oool0M`3oool00003
0000003oool0oooo03d0oooo0P3oO`1C0?ooo`80o`3o2`3oool00`00o`00oooo0?ooo`1P0?ooo`03
0?l0003oool0oooo02H0oooo00<0o`3o0?ooo`3oool0=@3oool00`000?l0oooo0?ooo`1g0?ooo`00
00<000000?ooo`3oool0?`3oool20?mo04l0oooo0P3o0?l>0?ooo`800?l0H@3oool00`3o0000oooo
0?ooo`0V0?ooo`80o`3o=P3oool00`000?l0oooo0?ooo`1f0?ooo`0000<000000?ooo`3oool0@@3o
ool20?mo04/0oooo0P3o0?lB0?ooo`03003o003oool0oooo05l0oooo00<0o`000?ooo`3oool09`3o
ool00`3o0?l0oooo0?ooo`0c0?ooo`030000o`3oool0oooo07H0oooo00000`000000oooo0?ooo`13
0?ooo`80ogl0B03oool00`3o0?l0oooo0?ooo`0C0?ooo`800?l0G`3oool00`3o0000oooo0?ooo`0X
0?ooo`80o`3o=03oool00`000?l0oooo0?ooo`1e0?ooo`0000<000000?ooo`3oool0A@3oool00`3o
O`00oooo0?ooo`130?ooo`80o`3o603oool00`00o`00oooo0?ooo`1M0?ooo`030?l0003oool0oooo
02T0oooo0P3o0?lb0?ooo`030000o`3oool0oooo07D0oooo00000`000000oooo0?ooo`160?ooo`80
ogl0@P3oool00`3o0?l0oooo0?ooo`0I0?ooo`03003o003oool0oooo05d0oooo00<0o`000?ooo`3o
ool0:P3oool00`3o0?l0oooo0?ooo`0`0?ooo`030000o`3oool0oooo07@0oooo00000`000000oooo
0?ooo`180?ooo`80ogl0?`3oool00`3o0?l0oooo0?ooo`0K0?ooo`800?l0GP3oool00`3o0000oooo
0?ooo`0Z0?ooo`030?l0o`3oool0oooo02l0oooo00<0003o0?ooo`3oool0M03oool000030000003o
ool0oooo04X0oooo0P3oO`0k0?ooo`80o`3o803oool00`00o`00oooo0?ooo`1L0?ooo`030?l0003o
ool0oooo02X0oooo0P3o0?l`0?ooo`030000o`3oool0oooo07<0oooo00000`000000oooo0?ooo`1<
0?ooo`80ogl0>03oool00`3o0?l0oooo0?ooo`0Q0?ooo`800?l0G@3oool00`3o0000oooo0?ooo`0[
0?ooo`030?l0o`3oool0oooo02d0oooo00<0003o0?ooo`3oool0L`3oool000030000003oool0oooo
04h0oooo0P3oO`0/0?ooo`<00?l01@3oool20?l0obH0oooo00<00?l00?ooo`3oool0F`3oool00`3o
0000oooo0?ooo`0[0?ooo`030?l0o`3oool0oooo02d0oooo00<0003o0?ooo`3oool0LP3oool00003
0000003oool0oooo0500oooo0P3oO`0X0?ooo`L00?l00P3oool00`3o0?l0oooo0?ooo`0W0?ooo`03
003o003oool0oooo05/0oooo00<0o`000?ooo`3oool0:`3oool20?l0obd0oooo00<0003o0?ooo`3o
ool0LP3oool000030000003oool0oooo0580oooo0P3oO`0U0?ooo`T00?l000<0o`3o0?ooo`3oool0
:@3oool2003o05`0oooo00<0o`000?ooo`3oool0;03oool00`3o0?l0oooo0?ooo`0[0?ooo`030000
o`3oool0oooo0740oooo00000`000000oooo0?ooo`1D0?ooo`80ogl08`3oool9003o02h0oooo00<0
0?l00?ooo`3oool0FP3oool00`3o0000oooo0?ooo`0/0?ooo`030?l0o`3oool0oooo02X0oooo00<0
003o0?ooo`3oool0L@3oool000030000003oool0oooo05H0oooo00<0ogl00?ooo`3oool07`3oool;
003o02h0oooo0P00o`1K0?ooo`030?l0003oool0oooo02`0oooo0P3o0?lZ0?ooo`030000o`3oool0
oooo0740oooo00000`000000oooo0?ooo`1G0?ooo`80ogl07`3oool;003o0300oooo00<00?l00?oo
o`3oool0F@3oool00`3o0000oooo0?ooo`0]0?ooo`030?l0o`3oool0oooo02P0oooo00<0003o0?oo
o`3oool0L03oool000030000003oool0oooo05T0oooo0P3oO`0M0?ooo`/00?l0<@3oool2003o05X0
oooo00<0o`000?ooo`3oool0;@3oool00`3o0?l0oooo0?ooo`0W0?ooo`030000o`3oool0oooo0700
oooo00000`000000oooo0?ooo`1K0?ooo`80ogl0703oool9003o03@0oooo00<00?l00?ooo`3oool0
F03oool00`3o0000oooo0?ooo`0]0?ooo`80o`3o:03oool00`000?l0oooo0?ooo`1_0?ooo`0000<0
00000?ooo`3oool0G@3oool20?mo01X0oooo2@00o`0e0?ooo`03003o003oool0oooo05P0oooo00<0
o`000?ooo`3oool0;P3oool00`3o0?l0oooo0?ooo`0U0?ooo`030000o`3oool0oooo06l0oooo0000
0`000000oooo0?ooo`1O0?ooo`80ogl05`3oool00`3o0?l0oooo003o0006003o03L0oooo0P00o`1I
0?ooo`030?l0003oool0oooo02h0oooo00<0o`3o0?ooo`3oool09@3oool00`000?l0oooo0?ooo`1^
0?ooo`0000<000000?ooo`3oool0H@3oool20?mo01@0oooo00<0o`3o0?ooo`3oool00P3oool3003o
03/0oooo00<00?l00?ooo`3oool0E`3oool00`3o0000oooo0?ooo`0^0?ooo`80o`3o9@3oool00`00
0?l0oooo0?ooo`1^0?ooo`0000<000000?ooo`3oool0H`3oool20?mo0140oooo00<0o`3o0?ooo`3o
ool0@P3oool2003o05P0oooo00<0o`000?ooo`3oool0;`3oool00`3o0?l0oooo0?ooo`0S0?ooo`03
0000o`3oool0oooo06d0oooo00000`000000oooo0?ooo`1U0?ooo`80ogl03P3oool00`3o0?l0oooo
0?ooo`150?ooo`03003o003oool0oooo05D0oooo00<0o`000?ooo`3oool0<03oool00`3o0?l0oooo
0?ooo`0R0?ooo`030000o`3oool0oooo06d0oooo00000`000000oooo0?ooo`1W0?ooo`030?mo003o
ool0oooo00X0oooo00<0o`3o0?ooo`3oool0A`3oool2003o05H0oooo00<0o`000?ooo`3oool0<03o
ool00`3o0?l0oooo0?ooo`0R0?ooo`030000o`3oool0oooo06`0oooo00000`000000oooo0?ooo`1X
0?ooo`80ogl0203oool20?l0od`0oooo00<00?l00?ooo`3oool0E03oool00`3o0000oooo0?ooo`0`
0?ooo`030?l0o`3oool0oooo0240oooo00<0003o0?ooo`3oool0K03oool000030000003oool0oooo
06X0oooo0P3oO`050?ooo`030?l0o`3oool0oooo04d0oooo00<00?l00?ooo`3oool0E03oool00`3o
0000oooo0?ooo`0`0?ooo`030?l0o`3oool0oooo0240oooo00<0003o0?ooo`3oool0J`3oool00003
0000003oool0oooo06`0oooo0P3oO`020?ooo`030?l0o`3oool0oooo04l0oooo0P00o`1E0?ooo`03
0?l0003oool0oooo0300oooo00<0o`3o0?ooo`3oool0803oool00`000?l0oooo0?ooo`1[0?ooo`00
00<000000?ooo`3oool0KP3oool20?mo05@0oooo00<00?l00?ooo`3oool0D`3oool00`3o0000oooo
0?ooo`0`0?ooo`030?l0o`3oool0oooo0200oooo00<0003o0?ooo`3oool0JP3oool000030000003o
ool0oooo06h0oooo00@0o`3o0?ooo`3oO`00ogl0D`3oool2003o05@0oooo00<0o`000?ooo`3oool0
<03oool00`3o0?l0oooo0?ooo`0O0?ooo`030000o`3oool0oooo06X0oooo00000`000000oooo0?oo
o`1]0?ooo`030?l0o`3oool0oooo0080oooo0P3oO`1C0?ooo`03003o003oool0oooo0580oooo00<0
o`000?ooo`3oool0<03oool00`3o0?l0oooo0?ooo`0O0?ooo`030000o`3oool0oooo06T0oooo0000
0`000000oooo0?ooo`1/0?ooo`030?l0o`3oool0oooo00D0oooo0P3oO`1B0?ooo`03003o003oool0
oooo0580oooo00<0o`000?ooo`3oool0<03oool00`3o0?l0oooo0?ooo`0N0?ooo`030000o`3oool0
oooo06T0oooo00000`000000oooo0?ooo`1[0?ooo`030?l0o`3oool0oooo00P0oooo0P3oO`1A0?oo
o`800?l0D`3oool00`3o0000oooo0?ooo`0`0?ooo`030?l0o`3oool0oooo01d0oooo00<0003o0?oo
o`3oool0J@3oool000030000003oool0oooo06X0oooo00<0o`3o0?ooo`3oool02`3oool00`3oO`00
oooo0?ooo`1@0?ooo`03003o003oool0oooo0540oooo00<0o`000?ooo`3oool0<03oool00`3o0?l0
oooo0?ooo`0M0?ooo`030000o`3oool0oooo06P0oooo00000`000000oooo0?ooo`1X0?ooo`80o`3o
3`3oool20?mo0540oooo0P00o`1B0?ooo`030?l0003oool0oooo0300oooo00<0o`3o0?ooo`3oool0
0`000?lI0?ooo`030000o`3oool0oooo06P0oooo00000`000000oooo0?ooo`1W0?ooo`030?l0o`3o
ool0oooo0140oooo0P3oO`1A0?ooo`03003o003oool0oooo0500oooo00<0o`000?ooo`3oool0<03o
ool70000oaP0oooo00<0003o0?ooo`3oool0I`3oool000030000003oool0oooo06H0oooo00<0o`3o
0?ooo`3oool0503oool20?mo0500oooo0P00o`1A0?ooo`030?l0003oool0oooo02h0oooo2@000?lG
0?ooo`030000o`3oool0oooo06L0oooo00000`000000oooo0?ooo`1U0?ooo`030?l0o`3oool0oooo
01L0oooo0P3oO`1@0?ooo`03003o003oool0oooo04l0oooo00<0o`000?ooo`3oool0;@3oool90000
oaP0oooo00<0003o0?ooo`3oool0IP3oool000030000003oool0oooo06@0oooo00<0o`3o0?ooo`3o
ool06P3oool20?mo04l0oooo00<00?l00?ooo`3oool0C`3oool00`3o0000oooo0?ooo`0[0?ooo`/0
003o5`3oool00`000?l0oooo0?ooo`1V0?ooo`0000<000000?ooo`3oool0H`3oool00`3o0?l0oooo
0?ooo`0M0?ooo`80ogl0CP3oool2003o0500oooo00<0o`000?ooo`3oool0:P3oool;0000oaP0oooo
00<0003o0?ooo`3oool0I@3oool000030000003oool0oooo0680oooo00<0o`3o0?ooo`3oool0803o
ool20?mo04h0oooo00<00?l00?ooo`3oool0CP3oool00`3o0000oooo0?ooo`0Y0?ooo`/0003o603o
ool00`000?l0oooo0?ooo`1U0?ooo`0000<000000?ooo`3oool0H@3oool00`3o0?l0oooo0?ooo`0S
0?ooo`80ogl0C@3oool2003o04h0oooo00<0o`000?ooo`3oool0:P3oool90000oaX0oooo00<0003o
0?ooo`3oool0I03oool000030000003oool0oooo0600oooo00<0o`3o0?ooo`3oool09P3oool20?mo
04d0oooo00<00?l00?ooo`3oool0C03oool00`3o0000oooo0?ooo`0Y0?ooo`T0003o6P3oool00`00
0?l0oooo0?ooo`1T0?ooo`0000<000000?ooo`3oool0G`3oool00`3o0?l0oooo0?ooo`0Y0?ooo`03
0?mo003oool0oooo04/0oooo0P00o`1=0?ooo`030?l0003oool0oooo02T0oooo1`000?l00`3oool0
o`3o0?ooo`0I0?ooo`030000o`3oool0oooo06<0oooo00000`000000oooo0?ooo`1N0?ooo`030?l0
o`3oool0oooo02/0oooo0P3oO`1=0?ooo`03003o003oool0oooo04/0oooo00<0o`000?ooo`3oool0
:P3oool30000o`@0oooo00<0o`3o0?ooo`3oool05`3oool00`000?l0oooo0?ooo`1S0?ooo`0000<0
00000?ooo`3oool0G@3oool00`3o0?l0oooo0?ooo`0^0?ooo`80ogl0C03oool00`00o`00oooo0?oo
o`1;0?ooo`030?l0003oool0oooo0340oooo00<0o`3o0?ooo`3oool05`3oool00`000?l0oooo0?oo
o`1R0?ooo`0000<000000?ooo`3oool0G03oool00`3o0?l0oooo0?ooo`0a0?ooo`80ogl0B`3oool2
003o04`0oooo00<0o`000?ooo`3oool0<03oool00`3o0?l0oooo0?ooo`0G0?ooo`030000o`3oool0
oooo0680oooo00000`000000oooo0?ooo`1K0?ooo`030?l0o`3oool0oooo03@0oooo0P3oO`1;0?oo
o`03003o003oool0oooo04X0oooo00<0o`000?ooo`3oool0<03oool00`3o0?l0oooo0?ooo`0G0?oo
o`030000o`3oool0oooo0640oooo00000`000000oooo0?ooo`1I0?ooo`80o`3o>@3oool20?mo04X0
oooo0P00o`1;0?ooo`030?l0003oool0oooo0300oooo00<0o`3o0?ooo`3oool05P3oool00`000?l0
oooo0?ooo`1Q0?ooo`0000<000000?ooo`3oool0F03oool00`3o0?l0oooo0?ooo`0k0?ooo`80ogl0
BP3oool00`00o`00oooo0?ooo`190?ooo`030?l0003oool0oooo0300oooo00<0o`3o0?ooo`3oool0
5P3oool00`000?l0oooo0?ooo`1P0?ooo`0000<000000?ooo`3oool0E`3oool00`3o0?l0oooo0?oo
o`0n0?ooo`80ogl0B@3oool00`00o`00oooo0?ooo`190?ooo`030?l0003oool0oooo0300oooo00<0
o`3o0?ooo`3oool05@3oool00`000?l0oooo0?ooo`1P0?ooo`0000<000000?ooo`3oool0EP3oool0
0`3o0?l0oooo0?ooo`110?ooo`80ogl0B03oool2003o04X0oooo00<0o`000?ooo`3oool0<03oool0
0`3o0?l0oooo0?ooo`0D0?ooo`030000o`3oool0oooo0600oooo00000`000000oooo0?ooo`1E0?oo
o`030?l0o`3oool0oooo04@0oooo00<0ogl00?ooo`3oool0A`3oool00`00o`00oooo0?ooo`180?oo
o`030?l0003oool0oooo02l0oooo00<0o`3o0?ooo`3oool05@3oool00`000?l0oooo0?ooo`1O0?oo
o`0000<000000?ooo`3oool0E03oool00`3o0?l0oooo0?ooo`160?ooo`80ogl0B03oool2003o04T0
oooo00<0o`000?ooo`3oool0;`3oool00`3o0?l0oooo0?ooo`0D0?ooo`030000o`3oool0oooo05l0
oooo00000`000000oooo0?ooo`1C0?ooo`030?l0o`3oool0oooo04T0oooo0P3oO`180?ooo`03003o
003oool0oooo04L0oooo00<0o`000?ooo`3oool0;`3oool00`3o0?l0oooo0?ooo`0D0?ooo`030000
o`3oool0oooo05h0oooo00000`000000oooo0?ooo`1B0?ooo`030?l0o`3oool0oooo04`0oooo0P3o
O`170?ooo`800?l0B03oool00`3o0000oooo0?ooo`0_0?ooo`030?l0o`3oool0oooo01<0oooo00<0
003o0?ooo`3oool0GP3oool000030000003oool0oooo0540oooo00<0o`3o0?ooo`3oool0C`3oool2
0?mo04L0oooo00<00?l00?ooo`3oool0AP3oool00`3o0000oooo0?ooo`0_0?ooo`030?l0o`3oool0
oooo01<0oooo00<0003o0?ooo`3oool0G@3oool000030000003oool0oooo0500oooo00<0o`3o0?oo
o`3oool0DP3oool20?mo04H0oooo00<00?l00?ooo`3oool0AP3oool00`3o0000oooo0?ooo`0_0?oo
o`030?l0o`3oool0oooo0180oooo00<0003o0?ooo`3oool0G@3oool000030000003oool0oooo04l0
oooo00<0o`3o0?ooo`3oool0E@3oool20?mo04D0oooo0P00o`160?ooo`030?l0003oool0oooo02l0
oooo00<0o`3o0?ooo`3oool04`3oool00`000?l0oooo0?ooo`1L0?ooo`0000<000000?ooo`3oool0
CP3oool00`3o0?l0oooo0?ooo`1H0?ooo`80ogl0A@3oool00`00o`00oooo0?ooo`140?ooo`030?l0
003oool0oooo02l0oooo00<0o`3o0?ooo`3oool04P3oool00`000?l0oooo0?ooo`1L0?ooo`0000<0
00000?ooo`3oool0C@3oool00`3o0?l0oooo0?ooo`1K0?ooo`80ogl0A03oool2003o04D0oooo00<0
o`000?ooo`3oool0;`3oool00`3o0?l0oooo0?ooo`0B0?ooo`030000o`3oool0oooo05/0oooo0000
0`000000oooo0?ooo`1<0?ooo`030?l0o`3oool0oooo05h0oooo00<0ogl00?ooo`3oool0@`3oool0
0`00o`00oooo0?ooo`130?ooo`030?l0003oool0oooo02l0oooo00<0o`3o0?ooo`3oool04@3oool0
0`000?l0oooo0?ooo`1K0?ooo`0000<000000?ooo`3oool0C03oool00`3o0?l0oooo0?ooo`1O0?oo
o`80ogl0A03oool00`00o`00oooo0?ooo`130?ooo`030?l0003oool0oooo02l0oooo00<0o`3o0?oo
o`3oool04@3oool00`000?l0oooo0?ooo`1J0?ooo`0000<000000?ooo`3oool0B`3oool00`3o0?l0
oooo0?ooo`1R0?ooo`80ogl0@`3oool2003o04@0oooo00<0o`000?ooo`3oool0;`3oool00`3o0?l0
oooo0?ooo`0@0?ooo`030000o`3oool0oooo05X0oooo00000`000000oooo0?ooo`1:0?ooo`030?l0
o`3oool0oooo06D0oooo0P3oO`130?ooo`03003o003oool0oooo0480oooo00<0o`000?ooo`3oool0
;P3oool00`3o0?l0oooo0?ooo`0A0?ooo`030000o`3oool0oooo05T0oooo00000`000000oooo0?oo
o`190?ooo`030?l0o`3oool0oooo06P0oooo0P3oO`120?ooo`800?l0@`3oool00`3o0000oooo0?oo
o`0^0?ooo`030?l0o`3oool0oooo0100oooo00<0003o0?ooo`3oool0F@3oool000030000003oool0
oooo04P0oooo00<0o`3o0?ooo`3oool0J`3oool20?mo0480oooo00<00?l00?ooo`3oool0@@3oool0
0`3o0000oooo0?ooo`0^0?ooo`030?l0o`3oool0oooo0100oooo00<0003o0?ooo`3oool0F03oool0
00030000003oool0oooo04L0oooo00<0o`3o0?ooo`3oool0KP3oool20?mo0440oooo0P00o`120?oo
o`030?l0003oool0oooo02h0oooo00<0o`3o0?ooo`3oool03`3oool00`000?l0oooo0?ooo`1H0?oo
o`0000<000000?ooo`3oool0AP3oool00`3o0?l0oooo0?ooo`1a0?ooo`80ogl0@@3oool00`00o`00
oooo0?ooo`100?ooo`030?l0003oool0oooo02h0oooo00<0o`3o0?ooo`3oool03P3oool00`000?l0
oooo0?ooo`1H0?ooo`0000<000000?ooo`3oool0A@3oool00`3o0?l0oooo0?ooo`1d0?ooo`80ogl0
@03oool00`00o`00oooo0?ooo`100?ooo`030?l0003oool0oooo02d0oooo00<0o`3o0?ooo`3oool0
3`3oool00`000?l0oooo0?ooo`1G0?ooo`0000<000000?ooo`3oool0A@3oool00`3o0?l0oooo0?oo
o`1f0?ooo`030?mo003oool0oooo03h0oooo0P00o`110?ooo`030?l0003oool0oooo02d0oooo00<0
o`3o0?ooo`3oool03P3oool00`000?l0oooo0?ooo`1G0?ooo`0000<000000?ooo`3oool0A03oool0
0`3o0?l0oooo0?ooo`1h0?ooo`80ogl0@03oool00`00o`00oooo0?ooo`0o0?ooo`030?l0003oool0
oooo02d0oooo00<0o`3o0?ooo`3oool03P3oool00`000?l0oooo0?ooo`1F0?ooo`0000<000000?oo
o`3oool0@`3oool00`3o0?l0oooo0?ooo`1k0?ooo`80ogl0?`3oool2003o0400oooo00<0o`000?oo
o`3oool0;@3oool00`3o0?l0oooo0?ooo`0=0?ooo`030000o`3oool0oooo05H0oooo00000`000000
oooo0?ooo`120?ooo`030?l0o`3oool0oooo07h0oooo0P3oO`0o0?ooo`03003o003oool0oooo03h0
oooo00<0o`000?ooo`3oool0;03oool00`3o0?l0oooo0?ooo`0>0?ooo`030000o`3oool0oooo05D0
oooo00000`000000oooo0?ooo`110?ooo`030?l0o`3oool0oooo0840oooo0P3oO`0n0?ooo`800?l0
?`3oool00`3o0000oooo0?ooo`0/0?ooo`030?l0o`3oool0oooo00d0oooo00<0003o0?ooo`3oool0
E@3oool000030000003oool0oooo0400oooo00<0o`3o0?ooo`3oool0Q03oool20?mo03h0oooo00<0
0?l00?ooo`3oool0?@3oool00`3o0000oooo0?ooo`0/0?ooo`030?l0o`3oool0oooo00d0oooo00<0
003o0?ooo`3oool0E03oool000030000003oool0oooo03l0oooo00<0o`3o0?ooo`3oool0Q`3oool2
0?mo03d0oooo00<00?l00?ooo`3oool0?03oool00`3o0000oooo0?ooo`0]0?ooo`030?l0o`3oool0
oooo00`0oooo00<0003o0?ooo`3oool0E03oool000030000003oool0oooo03h0oooo00<0o`3o0?oo
o`3oool0RP3oool20?mo03`0oooo0P00o`0m0?ooo`030?l0003oool0oooo02`0oooo00<0o`3o0?oo
o`3oool03@3oool00`000?l0oooo0?ooo`1C0?ooo`0000<000000?ooo`3oool0?P3oool00`3o0?l0
oooo0?ooo`2<0?ooo`80ogl0?03oool00`00o`00oooo0?ooo`0k0?ooo`030?l0003oool0oooo02`0
oooo00<0o`3o0?ooo`3oool0303oool00`000?l0oooo0?ooo`1C0?ooo`0000<000000?ooo`3oool0
?@3oool00`3o0?l0oooo0?ooo`2?0?ooo`80ogl0>`3oool2003o03`0oooo00<0o`000?ooo`3oool0
;03oool00`3o0?l0oooo0?ooo`0<0?ooo`030000o`3oool0oooo0580oooo00000`000000oooo0?oo
o`0l0?ooo`030?l0o`3oool0oooo0980oooo00<0ogl00?ooo`3oool0>P3oool00`00o`00oooo0?oo
o`0j0?ooo`030?l0003oool0oooo02`0oooo00<0o`3o0?ooo`3oool02`3oool00`000?l0oooo0?oo
o`1B0?ooo`0000<000000?ooo`3oool0>`3oool00`3o0?l0oooo0?ooo`2D0?ooo`80ogl0>`3oool0
0`00o`00oooo0?ooo`0j0?ooo`030?l0003oool0oooo02/0oooo00<0o`3o0?ooo`3oool0303oool0
0`000?l0oooo0?ooo`1A0?ooo`0000<000000?ooo`3oool0>P3oool00`3o0?l0oooo0?ooo`2G0?oo
o`80ogl0>P3oool2003o03/0oooo00<0o`000?ooo`3oool0:`3oool00`3o0?l0oooo0?ooo`0;0?oo
o`030000o`3oool0oooo0540oooo00000`000000oooo0?ooo`0i0?ooo`030?l0o`3oool0oooo09X0
oooo0P3oO`0j0?ooo`03003o003oool0oooo03T0oooo00<0o`000?ooo`3oool0:`3oool00`3o0?l0
oooo0?ooo`0;0?ooo`030000o`3oool0oooo0500oooo00000`000000oooo0?ooo`0i0?ooo`030?l0
o`3oool0oooo09`0oooo0P3oO`0i0?ooo`800?l0>P3oool00`3o0000oooo0?ooo`0[0?ooo`030?l0
o`3oool0oooo00X0oooo00<0003o0?ooo`3oool0D03oool000030000003oool0oooo03P0oooo00<0
o`3o0?ooo`3oool0W`3oool20?mo03T0oooo00<00?l00?ooo`3oool0>03oool00`3o0000oooo0?oo
o`0Z0?ooo`030?l0o`3oool0oooo00X0oooo00<0003o0?ooo`3oool0D03oool000030000003oool0
oooo03L0oooo00<0o`3o0?ooo`3oool0XP3oool20?mo03P0oooo0P00o`0i0?ooo`030?l0003oool0
oooo02X0oooo00<0o`3o0?ooo`3oool02P3oool00`000?l0oooo0?ooo`1?0?ooo`0000<000000?oo
o`3oool0=P3oool00`3o0?l0oooo0?ooo`2U0?ooo`80ogl0>03oool00`00o`00oooo0?ooo`0g0?oo
o`030?l0003oool0oooo02X0oooo00<0o`3o0?ooo`3oool02@3oool00`000?l0oooo0?ooo`1?0?oo
o`0000<000000?ooo`3oool0=@3oool00`3o0?l0oooo0?ooo`2X0?ooo`80ogl0=`3oool00`00o`00
oooo0?ooo`0g0?ooo`030?l0003oool0oooo02X0oooo00<0o`3o0?ooo`3oool02@3oool00`000?l0
oooo0?ooo`1>0?ooo`0000<000000?ooo`3oool0=@3oool00`3o0?l0oooo0?ooo`2Z0?ooo`030?mo
003oool0oooo03D0oooo0P00o`0h0?ooo`030?l0003oool0oooo02T0oooo00<0o`3o0?ooo`3oool0
2@3oool00`000?l0oooo0?ooo`1>0?ooo`0000<000000?ooo`3oool0=03oool00`3o0?l0oooo0?oo
o`2/0?ooo`80ogl0=`3oool00`00o`00oooo0?ooo`0f0?ooo`030?l0003oool0oooo02T0oooo00<0
o`3o0?ooo`3oool02@3oool00`000?l0oooo0?ooo`1=0?ooo`0000<000000?ooo`3oool0<`3oool0
0`3o0?l0oooo0?ooo`2_0?ooo`80ogl0=P3oool2003o03L0oooo00<0o`000?ooo`3oool0:@3oool0
0`3o0?l0oooo0?ooo`080?ooo`030000o`3oool0oooo04d0oooo00000`000000oooo0?ooo`0b0?oo
o`030?l0o`3oool0oooo0;80oooo0P3oO`0f0?ooo`03003o003oool0oooo03D0oooo00<0o`000?oo
o`3oool0:@3oool00`3o0?l0oooo0?ooo`080?ooo`030000o`3oool0oooo04`0oooo00000`000000
oooo0?ooo`0a0?ooo`030?l0o`3oool0oooo0;D0oooo0P3oO`0e0?ooo`03003o003oool0oooo03D0
oooo00<0o`000?ooo`3oool0:03oool00`3o0?l0oooo0?ooo`080?ooo`030000o`3oool0oooo04`0
oooo00000`000000oooo0?ooo`0`0?ooo`030?l0o`3oool0oooo0;P0oooo0P3oO`0d0?ooo`800?l0
=@3oool00`3o0000oooo0?ooo`0Y0?ooo`030?l0o`3oool0oooo00P0oooo00<0003o0?ooo`3oool0
B`3oool000030000003oool0oooo0300oooo00<0o`3o0?ooo`3oool0^P3oool20?mo03@0oooo00<0
0?l00?ooo`3oool0<`3oool00`3o0000oooo0?ooo`0Y0?ooo`030?l0o`3oool0oooo00L0oooo00<0
003o0?ooo`3oool0B`3oool000030000003oool0oooo02l0oooo00<0o`3o0?ooo`3oool0_@3oool2
0?mo03<0oooo0P00o`0d0?ooo`030?l0003oool0oooo02P0oooo00<0o`3o0?ooo`3oool0203oool0
0`000?l0oooo0?ooo`1:0?ooo`0000<000000?ooo`3oool0;P3oool00`3o0?l0oooo0?ooo`300?oo
o`80ogl0<`3oool00`00o`00oooo0?ooo`0b0?ooo`030?l0003oool0oooo02P0oooo00<0o`3o0?oo
o`3oool01`3oool00`000?l0oooo0?ooo`1:0?ooo`0000<000000?ooo`3oool0;@3oool00`3o0?l0
oooo0?ooo`330?ooo`030?mo003oool0oooo0340oooo0P00o`0c0?ooo`030?l0003oool0oooo02P0
oooo00<0o`3o0?ooo`3oool01`3oool00`000?l0oooo0?ooo`190?ooo`0000<000000?ooo`3oool0
;03oool00`3o0?l0oooo0?ooo`350?ooo`80ogl0<`3oool00`00o`00oooo0?ooo`0a0?ooo`030?l0
003oool0oooo02L0oooo00<0o`3o0?ooo`3oool01`3oool00`000?l0oooo0?ooo`190?ooo`0000<0
00000?ooo`3oool0;03oool00`3o0?l0oooo0?ooo`370?ooo`80ogl0<P3oool00`00o`00oooo0?oo
o`0a0?ooo`030?l0003oool0oooo02L0oooo00<0o`3o0?ooo`3oool01`3oool00`000?l0oooo0?oo
o`180?ooo`0000<000000?ooo`3oool0:`3oool00`3o0?l0oooo0?ooo`3:0?ooo`80ogl0<@3oool2
003o0380oooo00<0o`000?ooo`3oool09`3oool00`3o0?l0oooo0?ooo`060?ooo`030000o`3oool0
oooo04P0oooo00000`000000oooo0?ooo`0Z0?ooo`030?l0o`3oool0oooo0<d0oooo0P3oO`0a0?oo
o`03003o003oool0oooo0300oooo00<0o`000?ooo`3oool09P3oool00`3o0?l0oooo0?ooo`070?oo
o`030000o`3oool0oooo04L0oooo00000`000000oooo0?ooo`0Y0?ooo`030?l0o`3oool0oooo0=00
oooo0P3oO`0`0?ooo`800?l0<@3oool00`3o0000oooo0?ooo`0V0?ooo`030?l0o`3oool0oooo00H0
oooo00<0003o0?ooo`3oool0A`3oool000030000003oool0oooo02P0oooo00<0o`3o0?ooo`3oool0
d`3oool20?mo0300oooo00<00?l00?ooo`3oool0;`3oool00`3o0000oooo0?ooo`0U0?ooo`030?l0
o`3oool0oooo00H0oooo00<0003o0?ooo`3oool0A`3oool000030000003oool0oooo02P0oooo00<0
o`3o0?ooo`3oool0e@3oool20?mo02l0oooo0P00o`0`0?ooo`030?l0003oool0oooo02D0oooo00<0
o`3o0?ooo`3oool01P3oool00`000?l0oooo0?ooo`160?ooo`0000<000000?ooo`3oool09`3oool0
0`3o0?l0oooo0?ooo`3H0?ooo`80ogl0;`3oool00`00o`00oooo0?ooo`0^0?ooo`030?l0003oool0
oooo02D0oooo00<0o`3o0?ooo`3oool01@3oool00`000?l0oooo0?ooo`160?ooo`0000<000000?oo
o`3oool09P3oool00`3o0?l0oooo0?ooo`3K0?ooo`030?mo003oool0oooo02d0oooo00<00?l00?oo
o`3oool0;P3oool00`3o0000oooo0?ooo`0T0?ooo`030?l0o`3oool0oooo00H0oooo00<0003o0?oo
o`3oool0A@3oool000030000003oool0oooo02D0oooo00<0o`3o0?ooo`3oool0g@3oool20?mo02h0
oooo0P00o`0_0?ooo`030?l0003oool0oooo02@0oooo00<0o`3o0?ooo`3oool01@3oool00`000?l0
oooo0?ooo`150?ooo`0000<000000?ooo`3oool09@3oool00`3o0?l0oooo0?ooo`3O0?ooo`80ogl0
;P3oool00`00o`00oooo0?ooo`0]0?ooo`030?l0003oool0oooo02@0oooo00<0o`3o0?ooo`3oool0
1@3oool00`000?l0oooo0?ooo`140?ooo`0000<000000?ooo`3oool0903oool00`3o0?l0oooo0?oo
o`3R0?ooo`80ogl0;@3oool2003o02h0oooo00<0o`000?ooo`3oool08`3oool00`3o0?l0oooo0?oo
o`050?ooo`030000o`3oool0oooo04@0oooo00000`000000oooo0?ooo`0S0?ooo`030?l0o`3oool0
oooo0>D0oooo0P3oO`0]0?ooo`03003o003oool0oooo02`0oooo00<0o`000?ooo`3oool08`3oool0
0`3o0?l0oooo0?ooo`050?ooo`030000o`3oool0oooo04<0oooo00000`000000oooo0?ooo`0R0?oo
o`030?l0o`3oool0oooo0>P0oooo0P3oO`0/0?ooo`03003o003oool0oooo02/0oooo00<0o`000?oo
o`3oool0903oool00`3o0?l0oooo0?ooo`040?ooo`030000o`3oool0oooo04<0oooo00000`000000
oooo0?ooo`0R0?ooo`030?l0o`3oool0oooo0>X0oooo0P3oO`0[0?ooo`800?l0;03oool00`3o0000
oooo0?ooo`0S0?ooo`030?l0o`3oool0oooo00D0oooo00<0003o0?ooo`3oool0@P3oool000030000
003oool0oooo0240oooo00<0o`3o0?ooo`3oool0k@3oool20?mo02/0oooo00<00?l00?ooo`3oool0
:P3oool00`3o0000oooo0?ooo`0S0?ooo`030?l0o`3oool0oooo00@0oooo00<0003o0?ooo`3oool0
@P3oool000030000003oool0oooo0200oooo00<0o`3o0?ooo`3oool0l03oool20?mo02X0oooo0P00
o`0[0?ooo`030?l0003oool0oooo02<0oooo00<0o`3o0?ooo`3oool0103oool00`000?l0oooo0?oo
o`110?ooo`0000<000000?ooo`3oool0803oool00`3o0?l0oooo0?ooo`3b0?ooo`80ogl0:P3oool0
0`00o`00oooo0?ooo`0Y0?ooo`030?l0003oool0oooo0280oooo00<0o`3o0?ooo`3oool0103oool0
0`000?l0oooo0?ooo`110?ooo`0000<000000?ooo`3oool07`3oool00`3o0?l0oooo0?ooo`3e0?oo
o`030?mo003oool0oooo02P0oooo0P00o`0Z0?ooo`030?l0003oool0oooo0280oooo00<0o`3o0?oo
o`3oool0103oool00`000?l0oooo0?ooo`100?ooo`0000<000000?ooo`3oool07P3oool00`3o0?l0
oooo0?ooo`3g0?ooo`80ogl0:P3oool00`00o`00oooo0?ooo`0X0?ooo`030?l0003oool0oooo0280
oooo00<0o`3o0?ooo`3oool00`3oool00`000?l0oooo0?ooo`100?ooo`0000<000000?ooo`3oool0
7P3oool00`3o0?l0oooo0?ooo`3i0?ooo`80ogl0:@3oool00`00o`00oooo0?ooo`0X0?ooo`030?l0
003oool0oooo0240oooo00<0o`3o0?ooo`3oool0103oool00`000?l0oooo0?ooo`0o0?ooo`0000<0
00000?ooo`3oool07@3oool00`3o0?l0oooo0?ooo`3l0?ooo`80ogl0:03oool2003o02T0oooo00<0
o`000?ooo`3oool08@3oool00`3o0?l0oooo0?ooo`030?ooo`030000o`3oool0oooo03l0oooo0000
0`000000oooo0?ooo`0L0?ooo`030?l0o`3oool0oooo0?l0oooo0P3oO`0X0?ooo`03003o003oool0
oooo02L0oooo00<0o`000?ooo`3oool0803oool00`3o0?l0oooo0?ooo`030?ooo`030000o`3oool0
oooo03l0oooo00000`000000oooo0?ooo`0K0?ooo`030?l0o`3oool0oooo0?l0oooo0`3oool20?mo
02L0oooo0P00o`0X0?ooo`030?l0003oool0oooo0200oooo00<0o`3o0?ooo`3oool00`3oool00`00
0?l0oooo0?ooo`0n0?ooo`0000<000000?ooo`3oool06`3oool00`3o0?l0oooo0?ooo`3o0?ooo`D0
oooo0P3oO`0W0?ooo`03003o003oool0oooo02H0oooo00<0o`000?ooo`3oool0803oool00`3o0?l0
oooo0?ooo`020?ooo`030000o`3oool0oooo03h0oooo00000`000000oooo0?ooo`0J0?ooo`030?l0
o`3oool0oooo0?l0oooo203oool20?mo02H0oooo0P00o`0W0?ooo`030?l0003oool0oooo01l0oooo
00<0o`3o0?ooo`3oool00`3oool00`000?l0oooo0?ooo`0m0?ooo`0000<000000?ooo`3oool06@3o
ool00`3o0?l0oooo0?ooo`3o0?ooo`/0oooo0P3oO`0V0?ooo`03003o003oool0oooo02D0oooo00<0
o`000?ooo`3oool07`3oool00`3o0?l0oooo0?ooo`020?ooo`030000o`3oool0oooo03d0oooo0000
0`000000oooo0?ooo`0I0?ooo`030?l0o`3oool0oooo0?l0oooo3@3oool00`3oO`00oooo0?ooo`0T
0?ooo`03003o003oool0oooo02D0oooo00<0o`000?ooo`3oool07`3oool00`3o0?l0oooo0?ooo`02
0?ooo`030000o`3oool0oooo03`0oooo00000`000000oooo0?ooo`0H0?ooo`030?l0o`3oool0oooo
0?l0oooo3`3oool20?mo02D0oooo0P00o`0V0?ooo`030?l0003oool0oooo01h0oooo00<0o`3o0?oo
o`3oool00P3oool00`000?l0oooo0?ooo`0l0?ooo`0000<000000?ooo`3oool05`3oool00`3o0?l0
oooo0?ooo`3o0?oooa80oooo0P3oO`0U0?ooo`03003o003oool0oooo02@0oooo00<0o`000?ooo`3o
ool07P3oool00`3o0?l0oooo0?ooo`020?ooo`030000o`3oool0oooo03/0oooo00000`000000oooo
0?ooo`0G0?ooo`030?l0o`3oool0oooo0?l0oooo503oool20?mo02@0oooo0P00o`0U0?ooo`030?l0
003oool0oooo01h0oooo00D0o`3o0?ooo`3oool0oooo0000o`0m0?ooo`0000<000000?ooo`3oool0
5P3oool00`3o0?l0oooo0?ooo`3o0?oooaL0oooo0P3oO`0T0?ooo`03003o003oool0oooo0280oooo
00<0o`000?ooo`3oool07P3oool00`3o0?l0oooo0?ooo`020?ooo`030000o`3oool0oooo03X0oooo
00000`000000oooo0?ooo`0E0?ooo`030?l0o`3oool0oooo0?l0oooo6P3oool20?mo02<0oooo00<0
0?l00?ooo`3oool08P3oool00`3o0000oooo0?ooo`0N0?ooo`050?l0o`3oool0oooo0?ooo`000?l0
?03oool000030000003oool0oooo01@0oooo00<0o`3o0?ooo`3oool0o`3ooolM0?ooo`80ogl08P3o
ool2003o02<0oooo00<0o`000?ooo`3oool07@3oool00`3o0?l0oooo0?ooo`020?ooo`030000o`3o
ool0oooo03T0oooo00000`000000oooo0?ooo`0?0?ooo`<0ogl00P3oool00`3o0?l0oooo0?ooo`3o
0?oooal0oooo0P3oO`0R0?ooo`03003o003oool0oooo0240oooo00<0o`000?ooo`3oool07@3oool0
1@3o0?l0oooo0?ooo`3oool0003o03/0oooo00000`000000oooo0?ooo`0=0?ooo`L0ogl0o`3ooolT
0?ooo`80ogl08@3oool2003o0280oooo00<0o`000?ooo`3oool0703oool00`3o0?l0oooo0?ooo`02
0?ooo`030000o`3oool0oooo03P0oooo00000`000000oooo0?ooo`0<0?ooo`T0ogl0o`3ooolU0?oo
o`030?mo003oool0oooo0200oooo00<00?l00?ooo`3oool0803oool00`3o0000oooo0?ooo`0L0?oo
o`050?l0o`3oool0oooo0?ooo`000?l0>P3oool000030000003oool0oooo00`0oooo2@3oO`3o0?oo
obH0oooo0P3oO`0Q0?ooo`800?l08@3oool00`3o0000oooo0?ooo`0K0?ooo`030?l0o`3oool0oooo
0080oooo00<0003o0?ooo`3oool0=`3oool000030000003oool0oooo00/0oooo2`3oO`3o0?ooobL0
oooo0P3oO`0Q0?ooo`03003o003oool0oooo01l0oooo00<0o`000?ooo`3oool06`3oool01@3o0?l0
oooo0?ooo`3oool0003o03T0oooo00000`000000oooo0?ooo`0;0?ooo`/0ogl0o`3ooolY0?ooo`80
ogl0803oool00`00o`00oooo0?ooo`0O0?ooo`030?l0003oool0oooo01X0oooo00D0o`3o0?ooo`3o
ool0oooo0000o`0i0?ooo`0000<000000?ooo`3oool02`3oool;0?mo0?l0oooo:`3oool20?mo01l0
oooo0P00o`0P0?ooo`030?l0003oool0oooo01X0oooo00D0o`3o0?ooo`3oool0oooo0000o`0h0?oo
o`0000<000000?ooo`3oool0303oool90?mo0?l0oooo;P3oool20?mo01l0oooo00<00?l00?ooo`3o
ool07P3oool00`3o0000oooo0?ooo`0I0?ooo`050?l0o`3oool0oooo0?ooo`000?l0>03oool00003
0000003oool0oooo00`0oooo2@3oO`3o0?oooc00oooo0P3oO`0N0?ooo`800?l07`3oool00`3o0000
oooo0?ooo`0I0?ooo`050?l0o`3oool0oooo0?ooo`000?l0=`3oool000030000003oool0oooo00d0
oooo1`3oO`3o0?oooc<0oooo0P3oO`0N0?ooo`03003o003oool0oooo01d0oooo00<0o`000?ooo`3o
ool06@3oool0103o0?l0oooo0?ooo`000?lg0?ooo`0000<000000?ooo`3oool03@3oool00`3o0?l0
oooo0?mo00020?mo0?l0oooo=`3oool20?mo01d0oooo00<00?l00?ooo`3oool07@3oool00`3o0000
oooo0?ooo`0H0?ooo`050?l0o`3oool0oooo0?ooo`000?l0=P3oool000030000003oool0oooo00`0
oooo00<0o`3o0?ooo`3oool0o`3oooll0?ooo`030?mo003oool0oooo01/0oooo0P00o`0N0?ooo`03
0?l0003oool0oooo01P0oooo00@0o`3o0?ooo`3oool0003o=P3oool000030000003oool0oooo00`0
oooo00<0o`3o0?ooo`3oool0o`3ooolm0?ooo`80ogl07@3oool00`00o`00oooo0?ooo`0L0?ooo`03
0?l0003oool0oooo01L0oooo00D0o`3o0?ooo`3oool0oooo0000o`0e0?ooo`0000<000000?ooo`3o
ool02`3oool00`3o0?l0oooo0?ooo`3o0?oood00oooo0P3oO`0L0?ooo`800?l07@3oool00`3o0000
oooo0?ooo`0G0?ooo`040?l0o`3oool0oooo0000ocD0oooo00000`000000oooo0?ooo`0:0?ooo`03
0?l0o`3oool0oooo0?l0oooo@`3oool20?mo01`0oooo00<00?l00?ooo`3oool06P3oool00`3o0000
oooo0?ooo`0G0?ooo`050?l0o`3oool0oooo0?ooo`000?l0=03oool000030000003oool0oooo00X0
oooo00<0o`3o0?ooo`3oool0o`3ooom50?ooo`80ogl06`3oool2003o01/0oooo00<0o`000?ooo`3o
ool05`3oool0103o0?l0oooo0?ooo`000?ld0?ooo`0000<000000?ooo`3oool02@3oool00`3o0?l0
oooo0?ooo`3o0?ooodP0oooo0P3oO`0K0?ooo`03003o003oool0oooo01T0oooo00<0o`000?ooo`3o
ool05P3oool01@3o0?l0oooo0?ooo`3oool0003o03<0oooo00000`000000oooo0?ooo`080?ooo`03
0?l0o`3oool0oooo0?l0ooooB`3oool20?mo01X0oooo00<00?l00?ooo`3oool06@3oool00`3o0000
oooo0?ooo`0F0?ooo`040?l0o`3oool0oooo0000oc<0oooo00000`000000oooo0?ooo`080?ooo`03
0?l0o`3oool0oooo0?l0ooooC@3oool20?mo01T0oooo0P00o`0J0?ooo`030?l0003oool0oooo01D0
oooo00D0o`3o0?ooo`3oool0oooo0000o`0b0?ooo`0000<000000?ooo`3oool01`3oool00`3o0?l0
oooo0?ooo`3o0?oooe00oooo0P3oO`0I0?ooo`03003o003oool0oooo01P0oooo00<0o`000?ooo`3o
ool05@3oool0103o0?l0oooo0?ooo`000?lb0?ooo`0000<000000?ooo`3oool01P3oool00`3o0?l0
oooo0?ooo`3o0?oooe<0oooo0P3oO`0H0?ooo`800?l06@3oool00`3o0000oooo0?ooo`0E0?ooo`04
0?l0o`3oool0oooo0000oc40oooo00000`000000oooo0?ooo`060?ooo`030?l0o`3oool0oooo0?l0
ooooE@3oool00`3oO`00oooo0?ooo`0G0?ooo`03003o003oool0oooo01L0oooo00<0o`000?ooo`3o
ool0503oool0103o0?l0oooo0?ooo`000?la0?ooo`0000<000000?ooo`3oool01@3oool00`3o0?l0
oooo0?ooo`3o0?oooeL0oooo0P3oO`0H0?ooo`800?l0603oool00`3o0000oooo0?ooo`0D0?ooo`04
0?l0o`3oool0oooo0000oc00oooo00000`000000oooo0?ooo`040?ooo`030?l0o`3oool0oooo0?l0
ooooFP3oool20?mo01P0oooo00<00?l00?ooo`3oool05P3oool00`3o0000oooo0?ooo`0C0?ooo`04
0?l0o`3oool0oooo0000oc00oooo00000`000000oooo0?ooo`040?ooo`030?l0o`3oool0oooo0?l0
ooooG03oool20?mo01L0oooo00<00?l00?ooo`3oool05P3oool00`3o0000oooo0?ooo`0C0?ooo`03
0?l0o`3oool0003o0300oooo00000`000000oooo0?ooo`030?ooo`030?l0o`3oool0oooo0?l0oooo
G`3oool20?mo01H0oooo0P00o`0G0?ooo`030?l0003oool0oooo0180oooo00@0o`3o0?ooo`3oool0
003o;`3oool000030000003oool0oooo0080oooo00<0o`3o0?ooo`3oool0o`3ooomR0?ooo`80ogl0
5P3oool00`00o`00oooo0?ooo`0E0?ooo`030?l0003oool0oooo0180oooo00<0o`3o0?ooo`000?l0
;`3oool000030000003oool0oooo0080oooo00<0o`3o0?ooo`3oool0o`3ooomT0?ooo`80ogl05@3o
ool2003o01H0oooo00<0o`000?ooo`3oool04@3oool0103o0?l0oooo0?ooo`000?l^0?ooo`0000D0
00000?ooo`3oool0oooo0?l0o`3o0?ooofT0oooo0P3oO`0E0?ooo`03003o003oool0oooo01@0oooo
00<0o`000?ooo`3oool04@3oool00`3o0?l0oooo0000o`0^0?ooo`0000@000000?ooo`3oool0o`3o
o`3ooom/0?ooo`80ogl0503oool00`00o`00oooo0?ooo`0D0?ooo`030?l0003oool0oooo0100oooo
00@0o`3o0?ooo`3oool0003o;@3oool000040000003oool0oooo0?l0ool0ooooKP3oool00`3oO`00
oooo0?ooo`0B0?ooo`800?l05@3oool00`3o0000oooo0?ooo`0@0?ooo`030?l0o`3oool0003o02d0
oooo00000`000000oooo0?l0o`3o0?ooog00oooo0P3oO`0D0?ooo`03003o003oool0oooo01<0oooo
00<0o`000?ooo`3oool03`3oool0103o0?l0oooo0?ooo`000?l/0?ooo`0000<000000?l0o`3oool0
o`3ooomb0?ooo`80ogl04`3oool2003o01<0oooo00<0o`000?ooo`3oool0403oool00`3o0?l0oooo
0000o`0/0?ooo`0000<000000?l0o`3oool0o`3ooomd0?ooo`80ogl04`3oool00`00o`00oooo0?oo
o`0A0?ooo`030?l0003oool0oooo0100oooo00<0o`3o0?ooo`000?l0:`3oool000030?l0o`3oool0
oooo0?l0ooooMP3oool20?mo0180oooo0P00o`0B0?ooo`030?l0003oool0oooo00l0oooo00<0o`3o
0?ooo`000?l0:`3oool000030000003oool0oooo0?l0ooooN03oool20?mo0180oooo00<00?l00?oo
o`3oool0403oool00`3o0000oooo0?ooo`0?0?ooo`030?l0o`3oool0003o02X0oooo00000`000000
oooo0?ooo`3o0?ooogX0oooo0P3oO`0A0?ooo`03003o003oool0oooo0100oooo00<0o`000?ooo`3o
ool03P3oool00`3o0?l0oooo0000o`0Z0?ooo`0000<000000?ooo`3oool0o`3oooml0?ooo`80ogl0
403oool2003o0140oooo00<0o`000?ooo`3oool03P3oool00`3o0?l0oooo0000o`0Y0?ooo`0000<0
00000?ooo`3oool0o`3ooomn0?ooo`80ogl0403oool00`00o`00oooo0?ooo`0?0?ooo`030?l0003o
ool0oooo00d0oooo00<0o`3o0?ooo`000?l0:@3oool000030000003oool0oooo0?l0ooooP03oool0
0`3oO`00oooo0?ooo`0>0?ooo`800?l0403oool00`3o0000oooo0?ooo`0=0?ooo`030?l0o`3oool0
003o02P0oooo00000`000000oooo0?ooo`3o0?oooh40oooo0P3oO`0@0?ooo`03003o003oool0oooo
00h0oooo00<0o`000?ooo`3oool0303oool00`3o0?l0oooo0000o`0X0?ooo`0000<000000?ooo`3o
ool0o`3ooon30?ooo`80ogl03`3oool2003o00l0oooo00<0o`000?ooo`3oool0303oool00`3o0?l0
003o0?ooo`0W0?ooo`0000<000000?ooo`3oool0o`3ooon50?ooo`80ogl03`3oool00`00o`00oooo
0?ooo`0=0?ooo`030?l0003oool0oooo00/0oooo00<0o`3o0?ooo`000?l09`3oool000030000003o
ool0oooo0?l0ooooQ`3oool20?mo00h0oooo00<00?l00?ooo`3oool03@3oool00`3o0000oooo0?oo
o`0;0?ooo`030?l0o`000?l0oooo02H0oooo00000`000000oooo0?ooo`3o0?ooohT0oooo0P3oO`0=
0?ooo`800?l03P3oool00`3o0000oooo0?ooo`0:0?ooo`030?l0o`3oool0003o02H0oooo00000`00
0000oooo0?ooo`3o0?oooh/0oooo0P3oO`0=0?ooo`03003o003oool0oooo00`0oooo00<0o`000?oo
o`3oool02P3oool00`3o0?l0003o0?ooo`0U0?ooo`0000<000000?ooo`3oool0o`3ooon=0?ooo`80
ogl0303oool2003o00d0oooo00<0o`000?ooo`3oool02@3oool00`3o0?l0oooo0000o`0U0?ooo`00
00<000000?ooo`3oool0o`3ooon?0?ooo`80ogl0303oool00`00o`00oooo0?ooo`0;0?ooo`030?l0
003oool0oooo00T0oooo00<0o`3o0000o`3oool0903oool000030000003oool0oooo0?l0ooooT@3o
ool00`3oO`00oooo0?ooo`0:0?ooo`03003o003oool0oooo00/0oooo00<0o`000?ooo`3oool0203o
ool00`3o0?l0oooo0000o`0T0?ooo`0000<000000?ooo`3oool0o`3ooonB0?ooo`80ogl02`3oool2
003o00`0oooo00<0o`000?ooo`3oool0203oool00`3o0?l0003o0?ooo`0S0?ooo`0000<000000?oo
o`3oool0o`3ooonD0?ooo`80ogl02`3oool00`00o`00oooo0?ooo`090?ooo`030?l0003oool0oooo
00P0oooo00<0o`3o0?ooo`000?l08`3oool000030000003oool0oooo0?l0ooooUP3oool20?mo00X0
oooo0P00o`0:0?ooo`030?l0003oool0oooo00P0oooo00<0o`3o0000o`3oool08P3oool000030000
003oool0oooo0?l0ooooV03oool20?mo00X0oooo00<00?l00?ooo`3oool0203oool00`3o0000oooo
0?ooo`070?ooo`030?l0o`3oool0003o0280oooo00000`000000oooo0?ooo`3o0?oooiX0oooo0P3o
O`090?ooo`800?l02@3oool00`3o0000oooo0?ooo`070?ooo`030?l0o`000?l0oooo0240oooo0000
0`000000oooo0?ooo`3o0?oooi`0oooo0P3oO`090?ooo`03003o003oool0oooo00L0oooo00<0o`00
0?ooo`3oool01P3oool00`3o0?l0oooo0000o`0Q0?ooo`0000<000000?ooo`3oool0o`3ooonN0?oo
o`80ogl0203oool00`00o`00oooo0?ooo`070?ooo`030?l0003oool0oooo00H0oooo00<0o`3o0000
o`3oool0803oool000030000003oool0oooo0?l0ooooX03oool20?mo00L0oooo0P00o`080?ooo`03
0?l0003oool0oooo00D0oooo00<0o`3o0?ooo`000?l0803oool000030000003oool0oooo0?l0oooo
XP3oool20?mo00L0oooo00<00?l00?ooo`3oool01P3oool00`3o0000oooo0?ooo`050?ooo`030?l0
o`000?l0oooo01l0oooo00000`000000oooo0?ooo`3o0?oooj@0oooo00<0ogl00?ooo`3oool01@3o
ool2003o00L0oooo00<0o`000?ooo`3oool0103oool00`3o0?l0oooo0000o`0O0?ooo`0000<00000
0?ooo`3oool0o`3ooonU0?ooo`80ogl01`3oool00`00o`00oooo0?ooo`050?ooo`030?l0003oool0
oooo00@0oooo00<0o`3o0000o`3oool07P3oool000030000003oool0oooo0?l0ooooY`3oool20?mo
00H0oooo00<00?l00?ooo`3oool01@3oool00`3o0000oooo0?ooo`030?ooo`030?l0o`000?l0oooo
01h0oooo00000`000000oooo0?ooo`3o0?ooojT0oooo0P3oO`050?ooo`800?l01P3oool00`3o0000
oooo0?ooo`030?ooo`030?l0o`000?l0oooo01d0oooo00000`000000oooo0?ooo`3o0?oooj/0oooo
0P3oO`050?ooo`03003o003oool0oooo00@0oooo00<0o`000?ooo`3oool00P3oool00`3o0?l0003o
0?ooo`0M0?ooo`0000<000000?ooo`3oool0o`3ooon]0?ooo`80ogl0103oool2003o00D0oooo00<0
o`000?ooo`3oool00P3oool00`3o0?l0003o0?ooo`0L0?ooo`0000<000000?ooo`3oool0o`3ooon_
0?ooo`80ogl0103oool00`00o`00oooo0?ooo`030?ooo`060?l0003oool0oooo0?ooo`3o0?l0003o
7@3oool000030000003oool0oooo0?l0oooo/@3oool20?mo00<0oooo0P00o`040?ooo`060?l0003o
ool0oooo0?ooo`3o0?l0003o703oool000030000003oool0oooo0?l0oooo/`3oool20?mo00<0oooo
00<00?l00?ooo`3oool00P3oool01@3o0000oooo0?ooo`3o0?l0003o01`0oooo00000`000000oooo
0?ooo`3o0?oookD0oooo00D0ogl00?ooo`3oool0oooo003o00040?ooo`050?l0003oool0oooo0?l0
o`000?l06`3oool000030000003oool0oooo0?l0oooo]P3oool20?mo0080oooo0P00o`020?ooo`05
0?l0003oool0oooo0?l0o`000?l06`3oool000030000003oool0oooo0?l0oooo^03oool20?mo0080
oooo00@00?l00?ooo`3oool0o`000P3oool00`3o0?l0003o0?ooo`0I0?ooo`0000<000000?ooo`3o
ool0o`3ooonj0?ooo`80ogl000P0oooo003o0000o`00oooo0?l0003oool0o`3o0000oaX0oooo0000
0`000000oooo0?ooo`3o0?oook`0oooo0P3oO`001`3oool00?l00?ooo`3o0000oooo0?l0o`000?l0
6@3oool000030000003oool0oooo0?l0oooo_P3oool20?mo00800?l000<0o`000?l0o`000?l00P3o
0?lG0?ooo`0000<000000?ooo`3oool0o`3oooo00?ooo`80ogl000@00?l00?l0003o0?l0003o0`3o
0?lE0?ooo`0000<000000?ooo`3oool0o`3oooo10?ooo`050?l0o`3oO`00ogl00?l000000?l0103o
0?lD0?ooo`0000<000000?ooo`3oool0o`3oooo10?ooo`<0o`3o0P3oO`0010000?l0o`3o0?l0o`3o
0?lD0?ooo`0000<000000?ooo`3oool0o`3oooo00?ooo`H0o`3o00<0ogl00?l0o`3o0?l00P3o0?lC
0?ooo`0000<000000?ooo`3oool0o`3oooo00?ooo`/0o`3o4`3oool000030000003oool0oooo0?l0
oooo`03oool;0?l0oa<0oooo00000`000000oooo0?ooo`3o0?oool40oooo2@3o0?lD0?ooo`0000<0
00000?ooo`3oool0o`3oooo10?ooo`T0o`3o503oool000030000003oool0oooo0?l0oooo`P3oool7
0?l0oaD0oooo00000`000000oooo0?ooo`3o0?oool@0oooo0`3o0?l00`3oool0o`3o0?ooo`0D0?oo
o`0000<000000?ooo`3oool0o`3oooo80?ooo`030?l0o`3oool0oooo01<0oooo00000`000000oooo
0?ooo`3o0?ooolT0oooo00<0o`3o0?ooo`3oool04P3oool000030000003oool0oooo0?l0oooob@3o
ool00`3o0?l0oooo0?ooo`0B0?ooo`0000<000000?ooo`3oool0o`3oooo:0?ooo`030?l0o`3oool0
oooo0140oooo00000`000000oooo0?ooo`3o0?ooolX0oooo00<0o`3o0?ooo`3oool04@3oool00003
0000003oool0oooo0?l0oooob`3oool00`3o0?l0oooo0?ooo`0@0?ooo`0000<000000?ooo`3oool0
o`3oooo;0?ooo`030?l0o`3oool0oooo0100oooo00000`000000oooo0?ooo`3o0?oool`0oooo00<0
o`3o0?ooo`3oool03`3oool000030000003oool0oooo0?l0ooooc03oool00`3o0?l0oooo0?ooo`0?
0?ooo`0000<000000?ooo`3oool0o`3oooo<0?ooo`030?l0o`3oool0oooo00l0oooo00000`000000
oooo0?ooo`3o0?ooold0oooo00<0o`3o0?ooo`3oool03P3oool000030000003oool0oooo0?l0oooo
c@3oool00`3o0?l0oooo0?ooo`0>0?ooo`0000<000000?ooo`3oool0o`3oooo>0?ooo`030?l0o`3o
ool0oooo00d0oooo00000`000000oooo0?ooo`3o0?ooolh0oooo00<0o`3o0?ooo`3oool03@3oool0
00030000003oool0oooo0?l0ooooc`3oool00`3o0?l0oooo0?ooo`0<0?ooo`0000<000000?ooo`3o
ool0o`3oooo?0?ooo`030?l0o`3oool0oooo00`0oooo00000`000000oooo0?ooo`3o0?ooom00oooo
00<0o`3o0?ooo`3oool02`3oool000030000003oool0oooo0?l0ooood03oool00`3o0?l0oooo0?oo
o`0;0?ooo`0000<000000?ooo`3oool0o`3ooooA0?ooo`030?l0o`3oool0oooo00X0oooo00000`00
0000oooo0?ooo`3o0?ooom40oooo00<0o`3o0?ooo`3oool02P3oool00?l0ooooh@3oool00?l0oooo
h@3oool00?l0ooooh@3oool00?l0ooooh@3oool00?l0ooooh@3oool00?l0ooooh@3oool00?l0oooo
h@3oool00?l0ooooh@3oool00?l0ooooh@3oool00?l0ooooh@3oool00?l0ooooh@3oool00?l0oooo
h@3oool00?l0ooooh@3oool00?l0ooooh@3oool00?l0ooooh@3oool00?l0ooooh@3oool00?l0oooo
h@3oool00?l0ooooh@3oool00?l0ooooh@3oool00?l0ooooh@3oool00?l0ooooh@3oool00?l0oooo
h@3oool00?l0ooooh@3oool00?l0ooooh@3oool00?l0ooooh@3oool00?l0ooooh@3oool00?l0oooo
h@3oool00?l0ooooh@3oool00?l0ooooh@3oool00?l0ooooh@3oool00?l0ooooh@3oool00001\
\>"],
    ImageRangeCache->{{{0, 479}, {359, 0}} -> {0, 0, 0, 0}}],
  "  \n",
  StyleBox["\t       ",
    FontFamily->"Times New Roman"],
  StyleBox["Figure 1.",
    FontFamily->"Times New Roman",
    FontWeight->"Bold",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox[" \tThe values  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      RowBox[{\(p\_1\), 
        StyleBox[",",
          FontFamily->"Times New Roman",
          FontSize->12,
          FontWeight->"Plain",
          FontSlant->"Plain",
          FontColor->GrayLevel[0],
          FontVariations->{"Underline"->False,
          "StrikeThrough"->False}], \(p\_2\), 
        StyleBox[",",
          FontFamily->"Times New Roman",
          FontSize->12,
          FontWeight->"Plain",
          FontSlant->"Plain",
          FontColor->GrayLevel[0],
          FontVariations->{"Underline"->False,
          "StrikeThrough"->False}], \(p\_3\), 
        StyleBox[",",
          FontFamily->"Times New Roman",
          FontSize->12,
          FontWeight->"Plain",
          FontSlant->"Plain",
          FontColor->GrayLevel[0],
          FontVariations->{"Underline"->False,
          "StrikeThrough"->False}], " ", 
        RowBox[{
          StyleBox["and",
            FontFamily->"Times New Roman",
            FontSize->12,
            FontWeight->"Plain",
            FontSlant->"Plain",
            FontColor->GrayLevel[0],
            FontVariations->{"Underline"->False,
            "StrikeThrough"->False}], 
          StyleBox[
            RowBox[{
              StyleBox[" ",
                FontFamily->"Times New Roman",
                FontSize->12,
                FontWeight->"Plain",
                FontSlant->"Plain",
                FontColor->GrayLevel[0],
                FontVariations->{"Underline"->False,
                "StrikeThrough"->False}], " "}]], \(p\_4\)}]}]]],
  StyleBox["  for the \"linear search\" obtained by using formula (15)  \n\t  \
     \t\tnear a \"double root\"  p  (of order  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(m = 2\)]],
  ")",
  StyleBox[".   Notice that  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(\(\(|\)\(f \((p\_3)\)\)\(|\)\(\(>\)\(\(|\)\(f \((p\_2)\)\)\(|\)\)\)\)\
\)]],
  StyleBox[".  ",
    FontFamily->"Times New Roman"]
}], "Text",
  Editable->False],

Cell[TextData[{
  StyleBox["If  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p\_j\)]],
  StyleBox["  is closer to  p  than  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p\_i\)]],
  StyleBox["  then (19) and (20) imply that  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(\(\(|\)\(f \((p\_j)\)\)\(|\)\(\(<\)\(\(|\)\(f \((p\_i)\)\)\(|\)\)\)\)\
\)]],
  ",  ",
  StyleBox[" hence we have:  \n\n",
    FontFamily->"Times New Roman"],
  StyleBox["(21)",
    FontFamily->"Times New Roman",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["\t\t",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(\(\(|\)\(f \((p\_0)\)\)\(|\)\(\(>\)\(\(|\)\(f \
\((p\_1)\)\)\(|\)\(\(\(>\)\(...\)\)\(>\)\)\(|\)\(f \((p\_j)\)\)\(|\)\(\(\(>\)\
\(...\)\)\(>\)\)\(|\)\(f \((p\_m)\)\)\(|\)\)\)\)\)]],
  ".  ",
  StyleBox["\n\nTherefore, the way to computationally determine  ",
    FontFamily->"Times New Roman"],
  "m",
  StyleBox["  is to successively compute the values  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p\_j\)]],
  StyleBox["  using formula (13) for  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      RowBox[{\(j = 1\), 
        StyleBox[",",
          FontFamily->"Times New Roman",
          FontSize->12,
          FontWeight->"Plain",
          FontSlant->"Plain",
          FontColor->GrayLevel[0],
          FontVariations->{"Underline"->False,
          "StrikeThrough"->False}], "2", 
        StyleBox[",",
          FontFamily->"Times New Roman",
          FontSize->12,
          FontWeight->"Plain",
          FontSlant->"Plain",
          FontColor->GrayLevel[0],
          FontVariations->{"Underline"->False,
          "StrikeThrough"->False}], "...", 
        StyleBox[",",
          FontFamily->"Times New Roman",
          FontSize->12,
          FontWeight->"Plain",
          FontSlant->"Plain",
          FontColor->GrayLevel[0],
          FontVariations->{"Underline"->False,
          "StrikeThrough"->False}], \(m + 1\)}]]],
  "  ",
  StyleBox["until we arrive at  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(\(\(|\)\(f \((p\_\(m + 1\))\)\)\(|\)\(\(>\)\(\(|\)\(f \((p\_m)\)\)\(|\
\)\)\)\)\)]],
  StyleBox[".",
    FontFamily->"Times New Roman"]
}], "Text"],

Cell[TextData[{
  StyleBox["The New Adaptive Newton-Raphson Algorithm",
    FontFamily->"Times New Roman",
    FontWeight->"Bold",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["\n\nStart with  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p\_0\)]],
  StyleBox[",  then we determine the next approximation ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p\_1\)]],
  StyleBox["as follows:  \n\n\t\t",
    FontFamily->"Times New Roman"],
  Cell[BoxData[{
      \(\[CapitalDelta]x\  = \ f[p\_0]\/\(\(\(f'\)[p\_0]\)\(\ \)\)\), "\n", 
      \(p\_1\  = \ p\_0\  - \ \[CapitalDelta]x\), "\n", 
      \(y\_1\  = \ f[p\_1]\), "\n", 
      \(p\_2\  = \ p\_0\  - \ 2  \[CapitalDelta]x\), "\n", 
      \(y\_2\  = \ f[p\_2]\), "\n", 
      \(j = 3\), "\n", 
      \(While\ \ \  | 
        y\_2 | \(\(<\)\(\(|\)\(y\_1\)\(|\)\(\ \ \ \)\(Do\)\)\)\), 
    "\[IndentingNewLine]", 
      \(p\_1\  = \ p\_2\), "\[IndentingNewLine]", 
      \(y\_1\  = \ y\_2\), "\[IndentingNewLine]", 
      \(p\_2\  = \ p\_0\  - \ \(\(j\)\(\ \)\(\[CapitalDelta]x\)\(\ \ \)\)\), 
    "\[IndentingNewLine]", 
      \(y\_2\  = \ f[p\_2]\), "\[IndentingNewLine]", 
      \(j\  = \ j + 1\), "\[IndentingNewLine]", 
      \(k = k + 1\), "\[IndentingNewLine]", 
      \(Endwhile\)}]],
  "    "
}], "Text"],

Cell[TextData[{
  StyleBox["\tObserve that the above iteration involves a linear search in \
either the interval  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(\((\(-\[Infinity]\), p\_0)\)\)]],
  StyleBox["  when  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p\_1 < p\_0\)]],
  StyleBox["  or in the interval   ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(\((p\_0, \[Infinity])\)\)]],
  StyleBox["  when  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p\_0 < p\_1\)]],
  StyleBox[".   In the algorithm, the value  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(\[CapitalDelta]x\  = \ f[p0]\/\(f'\)[p0]\)]],
  StyleBox["  is stored so that unnecessary computations are avoided.  After \
the point  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(\((p\_1, f \((p\_1)\))\)\)]],
  StyleBox["  has been found, it should replace  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(\((p\_0, f \((p\_0)\))\)\)]],
  StyleBox["  and the process is repeated.  ",
    FontFamily->"Times New Roman"]
}], "Text"],

Cell[TextData[StyleBox["Mathematica Subroutine (Adaptive Newton-Raphson \
Iteration).",
  FontWeight->"Bold",
  FontColor->RGBColor[0.500008, 0, 0.996109]]], "Text"],

Cell[BoxData[
    \(\(\(NewtonRaphsonAdaptive[x0_, 
        n0_]\)\(:=\)\(\[IndentingNewLine]\)\(Module[{mmax = 
            8}, \[IndentingNewLine]k\  = \ 0; \ \[IndentingNewLine]p0\  = \ 
          N[x0]; \ \[IndentingNewLine]y0\  = \ 
          f[p0]; \ \[IndentingNewLine]Print["\< p\>"\_k, "\< = \>", 
          PaddedForm[p0, {16, 15}], "\<,   f[\>", "\<p\>"\_k, "\<] = \>", 
          NumberForm[f[p0], 16]\ ]; \[IndentingNewLine]While[\ 
          k \[LessEqual] n0, \[IndentingNewLine]\[CapitalDelta]x\  = \ 
            y0\/\(f'\)[p0]; \ \[IndentingNewLine]p1\  = \ 
            p0\  - \ \[CapitalDelta]x; \ \ \[IndentingNewLine]y1\  = \ 
            f[p1]; \ \[IndentingNewLine]Print["\< p\>"\_\(k + 1\), "\< = \>", 
            PaddedForm[
              p1, {16, 15}], "\<,   f[\>", "\<p\>"\_\(k + 1\), "\<] = \>", 
            NumberForm[f[p1], 16]\ ]; \[IndentingNewLine]p2\  = \ 
            p0\  - \ 2  \[CapitalDelta]x; \ \ \[IndentingNewLine]y2\  = \ 
            f[p2]; \ \[IndentingNewLine]Print["\< p\>"\_\(k + 2\), "\< = \>", 
            PaddedForm[
              p2, {16, 15}], "\<,   f[\>", "\<p\>"\_\(k + 2\), "\<] = \>", 
            NumberForm[f[p2], 16]\ ]; \[IndentingNewLine]j = 
            3; \ \[IndentingNewLine]While[
            And[\ Abs[y2] < Abs[y1]\ , \ 
              j < mmax\ ], \[IndentingNewLine]p1\  = \ 
              p2; \ \[IndentingNewLine]y1\  = \ 
              y2; \ \[IndentingNewLine]p2\  = \ 
              p0\  - \ j\ \[CapitalDelta]x; \ \ \[IndentingNewLine]y2\  = \ 
              f[p2]; \ \[IndentingNewLine]j\  = \ 
              j + 1; \ \ \[IndentingNewLine]k = 
              k + 1; \ \[IndentingNewLine]If[
              Abs[y2] < 
                Abs[y1], \[IndentingNewLine]\(Print["\< p\>"\_\(k + 2\), "\< \
= \>", PaddedForm[p2, {16, 
                      15}], "\<,   f[\>", "\<p\>"\_\(k + 2\), "\<] = \>", 
                  NumberForm[f[p2], 
                    16]\ ];\)\ ];\ ]; \ \[IndentingNewLine]p0\  = \ 
            p1; \ \[IndentingNewLine]y0 = y1; \[IndentingNewLine]k = 
            k + 1;\ \ ]; \[IndentingNewLine]Print["\<\n\>", "\<f[x] = \>", 
          f[x]\ ]; \ \ \[IndentingNewLine]Print["\<  p  = \>", 
          PaddedForm[
            p1, {16, 
              15}]\ ]; \ \[IndentingNewLine]Print["\< \[CapitalDelta]p  = \
\[PlusMinus]\>", Abs[p1 - p0]\ ]; \ \[IndentingNewLine]Print["\<f[p] = \>", 
          PaddedForm[y1, {16, 15}]\ ];\ ]\)\(\ \)\)\)], "Input"],

Cell[TextData[{
  StyleBox["Example 1.",
    FontFamily->"Times New Roman",
    FontWeight->"Bold",
    FontColor->RGBColor[1, 0, 0]],
  StyleBox["  Use the value  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p\_0 = 1.3\)]],
  "  ",
  StyleBox["and compare Methods A,B and C for finding the double root  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p = 1\)]],
  StyleBox["  of the equation  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(x\^3 - 3  x + 2\  = \ 0\)]],
  StyleBox[". ",
    FontFamily->"Times New Roman"]
}], "Text"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Solution 1.",
  FontFamily->"Times New Roman",
  FontWeight->"Bold",
  FontColor->RGBColor[1, 0, 1]]], "Text"],

Cell[BoxData[{
    \(\(f[x_]\  = \ x\^3\  - \ 3  x\  + \ 2;\)\ \ \), "\[IndentingNewLine]", 
    \(\(Print["\<f[x] = \>", f[x]\ ];\)\ \ \), "\[IndentingNewLine]", 
    \(\(Print["\<We know that\>"];\)\ \), "\[IndentingNewLine]", 
    \(\(Print["\<f[x] = \>", Factor[f[x]]];\)\ \ \), "\[IndentingNewLine]", 
    \(\(Print["\<We investigate various iterative 'Newton' methods to find \
the double root\>"];\)\), "\[IndentingNewLine]", 
    \(\(Print["\<For approximating the double root  p = 1.\>"];\)\)}], "Input"],

Cell[TextData[StyleBox["First, we will compute the iterations for each \
method, and afterward a table comparing the methods is given.  For the method \
C, all the iterations in the linear search are included.  ",
  FontFamily->"Times New Roman"]], "Text"],

Cell[TextData[StyleBox["Using formula (2), the standard Newton-Raphson \
method.  ",
  FontFamily->"Times New Roman"]], "Text"],

Cell[BoxData[
    \(NewtonRaphson[1.3, 26]\)], "Input"],

Cell[TextData[{
  StyleBox["Using formula (9) Method A, the accelerated Newton-Raphson method \
with  ",
    FontFamily->"Times New Roman"],
  StyleBox["m=2",
    FontFamily->"Courier New"],
  StyleBox[".  ",
    FontFamily->"Times New Roman"]
}], "Text"],

Cell[BoxData[
    \(NewtonRaphsonAccelerate[1.3, 2, 3]\)], "Input"],

Cell[TextData[{
  StyleBox["Using formula (11) Method B, the ",
    FontFamily->"Times New Roman"],
  StyleBox["modified Newton-Raphson method. ",
    FontFamily->"Times New Roman"]
}], "Text"],

Cell[BoxData[
    \(NewtonRaphsonModified[1.3, 3]\)], "Input"],

Cell[TextData[StyleBox["Using formula (13) Method C, the adaptive \
Newton-Raphson method. ",
  FontFamily->"Times New Roman"]], "Text"],

Cell[TextData[{
  StyleBox["The details for obtaining  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      RowBox[{\(p\_1\), "  ", 
        StyleBox["and",
          FontFamily->"Times New Roman",
          FontSize->12,
          FontWeight->"Plain",
          FontSlant->"Plain",
          FontColor->GrayLevel[0],
          FontVariations->{"Underline"->False,
          "StrikeThrough"->False}], "  ", \(p\_2\)}]]],
  " are:"
}], "Text"],

Cell[BoxData[{
    \(\(P\_0\  = \ 1.3;\)\), "\[IndentingNewLine]", 
    \(\(For[k = 0, 
        k \[LessEqual] 3, \(k++\), \[IndentingNewLine]P\_k\  = \ 
          P\_0\  - k\ f[P\_0]\/\(f'\)[P\_0]; \[IndentingNewLine]If[k > 0, 
          Print["\< p\>"\_k, \*"\"\< =  \!\(p\_0\) - \>\"", 
            k, \*"\"\<\!\(f[p\_0]\/\(f'\)[p\_0]\)\>\""]]; \ \
\[IndentingNewLine]Print["\< p\>"\_k, "\< = \>", 
          PaddedForm[P\_k, {16, 15}], "\<,   f[\>", "\<p\>"\_k, "\<] = \>", 
          NumberForm[f[P\_k], 16]\ ];\ ];\)\)}], "Input"],

Cell[TextData[{
  StyleBox["Since  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(\(\(|\)\(f[p\_3]\  > f[p\_2]\)\)\)]],
  "  we reject  ",
  Cell[BoxData[
      \(p\_3\)]],
  "  and set  ",
  Cell[BoxData[
      \(p\_0\  = \ p\_2\)]],
  "  and continue the iteration using formula (13).  The subroutine makes all \
these choices automatically. \n\t\t",
  Cell[GraphicsData["PostScript", "\<\
%!
%%Creator: Mathematica
%%AspectRatio: .61803 
MathPictureStart
/Mabs {
Mgmatrix idtransform
Mtmatrix dtransform
} bind def
/Mabsadd { Mabs
3 -1 roll add
3 1 roll add
exch } bind def
%% Graphics
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 10  scalefont  setfont
% Scaling calculations
-1.11111 1.5873 0.0813203 1.62641 [
[0 .06882 -9 -9 ]
[0 .06882 9 0 ]
[.15873 .06882 -9 -9 ]
[.15873 .06882 9 0 ]
[.31746 .06882 -9 -9 ]
[.31746 .06882 9 0 ]
[.47619 .06882 -3 -9 ]
[.47619 .06882 3 0 ]
[.63492 .06882 -9 -9 ]
[.63492 .06882 9 0 ]
[.79365 .06882 -9 -9 ]
[.79365 .06882 9 0 ]
[.95238 .06882 -9 -9 ]
[.95238 .06882 9 0 ]
[-0.0125 0 -30 -4.5 ]
[-0.0125 0 0 4.5 ]
[-0.0125 .16264 -24 -4.5 ]
[-0.0125 .16264 0 4.5 ]
[-0.0125 .24396 -18 -4.5 ]
[-0.0125 .24396 0 4.5 ]
[-0.0125 .32528 -24 -4.5 ]
[-0.0125 .32528 0 4.5 ]
[-0.0125 .4066 -18 -4.5 ]
[-0.0125 .4066 0 4.5 ]
[-0.0125 .48792 -24 -4.5 ]
[-0.0125 .48792 0 4.5 ]
[-0.0125 .56924 -18 -4.5 ]
[-0.0125 .56924 0 4.5 ]
[ 0 0 0 0 ]
[ 1 .61803 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
0 g
.25 Mabswid
[ ] 0 setdash
0 .08132 m
0 .08757 L
s
[(0.7)] 0 .06882 0 1 Mshowa
.15873 .08132 m
.15873 .08757 L
s
[(0.8)] .15873 .06882 0 1 Mshowa
.31746 .08132 m
.31746 .08757 L
s
[(0.9)] .31746 .06882 0 1 Mshowa
.47619 .08132 m
.47619 .08757 L
s
[(1)] .47619 .06882 0 1 Mshowa
.63492 .08132 m
.63492 .08757 L
s
[(1.1)] .63492 .06882 0 1 Mshowa
.79365 .08132 m
.79365 .08757 L
s
[(1.2)] .79365 .06882 0 1 Mshowa
.95238 .08132 m
.95238 .08757 L
s
[(1.3)] .95238 .06882 0 1 Mshowa
.125 Mabswid
.03175 .08132 m
.03175 .08507 L
s
.06349 .08132 m
.06349 .08507 L
s
.09524 .08132 m
.09524 .08507 L
s
.12698 .08132 m
.12698 .08507 L
s
.19048 .08132 m
.19048 .08507 L
s
.22222 .08132 m
.22222 .08507 L
s
.25397 .08132 m
.25397 .08507 L
s
.28571 .08132 m
.28571 .08507 L
s
.34921 .08132 m
.34921 .08507 L
s
.38095 .08132 m
.38095 .08507 L
s
.4127 .08132 m
.4127 .08507 L
s
.44444 .08132 m
.44444 .08507 L
s
.50794 .08132 m
.50794 .08507 L
s
.53968 .08132 m
.53968 .08507 L
s
.57143 .08132 m
.57143 .08507 L
s
.60317 .08132 m
.60317 .08507 L
s
.66667 .08132 m
.66667 .08507 L
s
.69841 .08132 m
.69841 .08507 L
s
.73016 .08132 m
.73016 .08507 L
s
.7619 .08132 m
.7619 .08507 L
s
.8254 .08132 m
.8254 .08507 L
s
.85714 .08132 m
.85714 .08507 L
s
.88889 .08132 m
.88889 .08507 L
s
.92063 .08132 m
.92063 .08507 L
s
.98413 .08132 m
.98413 .08507 L
s
.25 Mabswid
0 .08132 m
1 .08132 L
s
0 0 m
.00625 0 L
s
[(-0.05)] -0.0125 0 1 0 Mshowa
0 .16264 m
.00625 .16264 L
s
[(0.05)] -0.0125 .16264 1 0 Mshowa
0 .24396 m
.00625 .24396 L
s
[(0.1)] -0.0125 .24396 1 0 Mshowa
0 .32528 m
.00625 .32528 L
s
[(0.15)] -0.0125 .32528 1 0 Mshowa
0 .4066 m
.00625 .4066 L
s
[(0.2)] -0.0125 .4066 1 0 Mshowa
0 .48792 m
.00625 .48792 L
s
[(0.25)] -0.0125 .48792 1 0 Mshowa
0 .56924 m
.00625 .56924 L
s
[(0.3)] -0.0125 .56924 1 0 Mshowa
.125 Mabswid
0 .01626 m
.00375 .01626 L
s
0 .03253 m
.00375 .03253 L
s
0 .04879 m
.00375 .04879 L
s
0 .06506 m
.00375 .06506 L
s
0 .09758 m
.00375 .09758 L
s
0 .11385 m
.00375 .11385 L
s
0 .13011 m
.00375 .13011 L
s
0 .14638 m
.00375 .14638 L
s
0 .1789 m
.00375 .1789 L
s
0 .19517 m
.00375 .19517 L
s
0 .21143 m
.00375 .21143 L
s
0 .2277 m
.00375 .2277 L
s
0 .26022 m
.00375 .26022 L
s
0 .27649 m
.00375 .27649 L
s
0 .29275 m
.00375 .29275 L
s
0 .30902 m
.00375 .30902 L
s
0 .34155 m
.00375 .34155 L
s
0 .35781 m
.00375 .35781 L
s
0 .37407 m
.00375 .37407 L
s
0 .39034 m
.00375 .39034 L
s
0 .42287 m
.00375 .42287 L
s
0 .43913 m
.00375 .43913 L
s
0 .45539 m
.00375 .45539 L
s
0 .47166 m
.00375 .47166 L
s
0 .50419 m
.00375 .50419 L
s
0 .52045 m
.00375 .52045 L
s
0 .53671 m
.00375 .53671 L
s
0 .55298 m
.00375 .55298 L
s
0 .58551 m
.00375 .58551 L
s
0 .60177 m
.00375 .60177 L
s
.25 Mabswid
0 0 m
0 .61803 L
s
0 0 m
1 0 L
1 .61803 L
0 .61803 L
closepath
clip
newpath
1 0 1 r
.5 Mabswid
0 .47654 m
.04185 .41333 L
.0875 .35001 L
.13037 .2961 L
.1716 .2495 L
.21548 .20574 L
.25773 .16951 L
.30262 .13753 L
.34588 .1133 L
.3875 .09627 L
.40899 .08994 L
.41996 .08737 L
.43177 .08511 L
.44282 .08346 L
.45293 .08236 L
.45779 .08197 L
.46036 .0818 L
.4631 .08165 L
.46572 .08153 L
.46811 .08145 L
.46926 .08141 L
.4705 .08138 L
.47166 .08136 L
.47276 .08134 L
.4741 .08133 L
.47533 .08132 L
.47665 .08132 L
.47739 .08132 L
.47808 .08133 L
.47923 .08134 L
.48049 .08136 L
.48181 .08138 L
.48305 .08141 L
.48589 .0815 L
.48849 .08161 L
.49436 .08196 L
.49967 .08239 L
.50547 .08299 L
.51718 .0846 L
.52831 .08664 L
.53842 .08892 L
.56112 .09554 L
.5819 .10344 L
.60443 .11403 L
.64876 .14108 L
.69145 .17511 L
.73249 .21538 L
.77619 .26659 L
.81825 .32419 L
.86297 .39456 L
Mistroke
.90604 .47145 L
.94748 .55402 L
Mfstroke
.94748 .55402 m
.97647 .61803 L
s
.025 w
.95238 .56436 Mdot
0 0 1 r
.72464 .20709 Mdot
1 0 0 r
.49689 .08215 Mdot
0 1 0 r
.26915 .16072 Mdot
0 0 1 r
.5 Mabswid
.95238 .56436 m
.72464 .08132 L
s
1 0 0 r
.95238 .56436 m
.49689 .08132 L
s
0 1 0 r
.95238 .56436 m
.26915 .08132 L
s
1 0 1 r
.008 w
.95238 .06506 m
.95238 .09758 L
s
0 0 1 r
.72464 .06506 m
.72464 .09758 L
s
1 0 0 r
.49689 .06506 m
.49689 .09758 L
s
0 1 0 r
.26915 .06506 m
.26915 .09758 L
s
% End of Graphics
MathPictureEnd
\
\>"], "Graphics",
    ImageSize->{288, 177.938},
    ImageMargins->{{0, 0}, {0, 0}},
    ImageRegion->{{0, 1}, {0, 1}},
    ImageCache->GraphicsData["Bitmap", "\<\
CF5dJ6E]HGAYHf4PAg9QL6QYHg<PAVmbKF5d0`40004P0000/B000`400?l00000o`00003oo`3ooolQ
0?ooo`00o`3ooolQ0?ooo`00o`3ooolQ0?ooo`00o`3ooolQ0?ooo`00o`3ooolQ0?ooo`00o`3ooolQ
0?ooo`00o`3ooolQ0?ooo`00o`3ooolQ0?ooo`00o`3ooolQ0?ooo`00o`3ooolQ0?ooo`00203oool2
000000@0oooo0P0000040?ooo`800000103oool200000?l0oooo1@3oool000L0oooo00@000000?oo
o`3oool00000203oool010000000oooo0?ooo`0000020?ooo`040000003oool0oooo00000?l0oooo
103oool000L0oooo00@000000?ooo`3oool00000203oool010000000oooo0?ooo`0000050?ooo`03
0000003oool0oooo0080oooo0P00003m0?ooo`0000<0oooo0000000000000P0000020?ooo`040000
003oool0oooo000000P0oooo00@000000?ooo`3oool000000`3oool2000000D0oooo00<000000?oo
o`3oool0o03oool000L0oooo00@000000?ooo`3oool00000203oool010000000oooo0?ooo`000003
0?ooo`030000003oool0oooo00@0oooo00<000000?ooo`3oool0o03oool000P0oooo0P00000:0?oo
o`800000103oool3000000@0oooo00<000000?ooo`3oool0o03oool00240oooo0P00003m0?ooo`00
8@3oool00`000000oooo0?ooo`3l0?ooo`008@3oool00`000000oooo0?ooo`3l0?ooo`008@3oool0
0`000000oooo0?ooo`3l0?ooo`008@3oool200000?d0oooo000J0?ooo`800000103oool2000000D0
oooo00<000000?ooo`3oool0603oool2000000@0oooo0P0000040?ooo`8000006P3oool2000000@0
oooo0P0000030?ooo`<00000803oool5000001d0oooo1@0000020?ooo`8000000`3oool5000001L0
oooo1@0000020?ooo`8000000`3oool4000001P0oooo1@0000020?ooo`800000103oool2000000L0
oooo000I0?ooo`040000003oool0oooo000000@0oooo00<000000?ooo`3oool00`3oool00`000000
oooo0?ooo`0G0?ooo`040000003oool0oooo000000P0oooo00@000000?ooo`3oool00000603oool0
10000000oooo0?ooo`00000:0?ooo`030000003oool0oooo0200oooo00<000000?ooo`3oool07`3o
ool00`000000oooo0?ooo`090?ooo`030000003oool0oooo01T0oooo00<000000?ooo`3oool01`3o
ool00`000000oooo0?ooo`0K0?ooo`030000003oool0oooo00L0oooo00@000000?ooo`3oool00000
1P3oool001T0oooo00@000000?ooo`3oool00000103oool00`000000oooo0?ooo`030?ooo`030000
003oool0oooo01L0oooo00@000000?ooo`3oool00000203oool010000000oooo0?ooo`00000H0?oo
o`040000003oool0oooo000000T0oooo0`00000Q0?ooo`030000003oool0oooo01l0oooo00<00000
0?ooo`3oool02@3oool00`000000oooo0?ooo`0I0?ooo`030000003oool0oooo00P0oooo00<00000
0?ooo`3oool06P3oool00`000000oooo0?ooo`090?ooo`030000003oool0oooo00D0oooo000I0?oo
o`040000003oool0oooo000000@0oooo0P0000050?ooo`030000003oool0oooo01H0oooo00@00000
0?ooo`3oool000002@3oool2000001T0oooo00@000000?ooo`3oool00000203oool010000000oooo
0?ooo`00000Q0?ooo`030000003oool0oooo01l0oooo00<000000?ooo`3oool02@3oool00`000000
oooo0?ooo`0I0?ooo`030000003oool0oooo00T0oooo00<000000?ooo`3oool06@3oool00`000000
oooo0?ooo`0:0?ooo`030000003oool0oooo00@0oooo000I0?ooo`040000003oool0oooo000000@0
oooo00D000000?ooo`3oool0oooo000000020?ooo`030000003oool0oooo01H0oooo00@000000?oo
o`3oool00000203oool010000000oooo0?ooo`00000H0?ooo`040000003oool0oooo000000P0oooo
00@000000?ooo`3oool000008@3oool00`000000oooo0?ooo`0O0?ooo`030000003oool0oooo00T0
oooo00<000000?ooo`3oool06@3oool00`000000oooo0?ooo`070?ooo`040000003oool0oooo0000
01X0oooo00<000000?ooo`3oool01`3oool010000000oooo0?ooo`0000060?ooo`006P3oool20000
00D0oooo00@000000?ooo`3oool0oooo1000000I0?ooo`8000002P3oool2000001X0oooo0P00000:
0?ooo`<00000803oool200000200oooo0P00000:0?ooo`8000006P3oool2000000X0oooo0P00000J
0?ooo`8000002P3oool2000000L0oooo000Q0?ooo`030000003oool0oooo0?`0oooo000Q0?ooo`80
0000@@3oool2003o03P0oooo0P3o000h0?ooo`80003o=`3oool20?l0o`d0oooo000Q0?ooo`030000
003oool0oooo0400oooo0P00o`0h0?ooo`80o`00>03oool20000ocL0oooo0P3o0?l=0?ooo`008@3o
ool00`000000oooo0?ooo`100?ooo`800?l0>03oool20?l003P0oooo0P000?lg0?ooo`80o`3o3@3o
ool00240oooo00<000000?ooo`3oool0@03oool2003o03L0oooo103o000g0?ooo`80003o=`3oool2
0?l0o`d0oooo000Q0?oood<000000P00o`0b000000@0o`3o1P3o000f00000080003o=`0000020?l0
o`d00000000Q0?ooo`030000003oool0oooo00D0oooo00<000000?ooo`3oool01@3oool00`000000
oooo0?ooo`050?ooo`030000003oool0oooo00D0oooo00<000000?ooo`3oool01@3oool00`000000
oooo0?ooo`050?ooo`030000003oool0oooo00D0oooo00<000000?ooo`3oool01@3oool00`000000
oooo0?ooo`04003o00030?ooo`000000oooo00H0oooo00<000000?ooo`3oool01@3oool00`000000
oooo0?ooo`050?ooo`030000003oool0oooo00D0oooo00@000000?ooo`3oool0oooo303o0?l00`3o
ool000000?l0o`060?l000@0o`3o103oool00`000000oooo0?ooo`050?ooo`030000003oool0oooo
00D0oooo00<000000?ooo`3oool01@3oool00`000000oooo0?ooo`050?ooo`030000003oool0oooo
00D0oooo00<000000?ooo`3oool00`3oool20000o`030000003oool0oooo00D0oooo00<000000?oo
o`3oool01@3oool00`000000oooo0?ooo`050?ooo`030000003oool0oooo00D0oooo00<000000?oo
o`3oool01@3oool00`000000oooo0?ooo`050?ooo`030000003oool0oooo00@0oooo0P3o0?l70?oo
o`030000003oool0oooo00<0oooo000Q0?ooo`030000003oool0oooo02D0oooo00<000000?ooo`3o
ool0603oool2003o0080oooo00<00?l00?ooo`3oool01P3oool00`000000oooo0?ooo`0F0?ooo`<0
o`3o3@3oool00`000000oooo0?ooo`050?l000@0oooo1@3o0?lG0?ooo`030000003oool0oooo01<0
oooo0`000?l?0?ooo`030000003oool0oooo02@0oooo0P3o0?l=0?ooo`008@3oool00`000000oooo
0?ooo`100?ooo`800?l00`3oool00`00o`00oooo0?ooo`0J0?ooo`@0o`3o503oool20?l00080oooo
00<0o`000?ooo`3oool01P3oool30?l0obX0oooo0`000?lf0?ooo`80o`3o3@3oool00240oooo00<0
00000?ooo`3oool0@03oool2003o00@0oooo0P00o`0F0?ooo`@0o`3o603oool20?l000<0oooo00<0
o`000?ooo`3oool0203oool30?l0obL0oooo0P000?l00`3oool0003o0?ooo`0d0?ooo`80o`3o3@3o
ool00240oooo0P0000110?ooo`800?l01P3oool00`00o`00oooo0?ooo`0A0?ooo`80o`3o703oool2
0?l000@0oooo00<0o`000?ooo`3oool02P3oool20?l0obD0oooo0P000?l00`3oool0003o0?ooo`0d
0?ooo`80o`3o3@3oool00240oooo00<000000?ooo`3oool0@03oool2003o00L0oooo0P00o`0?0?oo
o`80o`3o7P3oool20?l000D0oooo00<0o`000?ooo`3oool02`3oool20?l0ob<0oooo0P000?l20?oo
o`030000o`3oool0oooo0380oooo0P3o0?l=0?ooo`008@3oool00`000000oooo0?ooo`1;0?ooo`03
003o003oool0oooo00X0oooo0P3o0?lX0?ooo`030?l0003oool0oooo00`0oooo0P3o0?lU0?ooo`03
0000o`3oool0oooo0440oooo000Q0?ooo`030000003oool0oooo04`0oooo00<00?l00?ooo`3oool0
1`3oool20?l0obX0oooo00<0o`000?ooo`3oool03P3oool20?l0ob@0oooo00<0003o0?ooo`3oool0
@03oool00240oooo0P00001>0?ooo`800?l01@3oool20?l0obd0oooo00<0o`000?ooo`3oool03`3o
ool20?l0ob80oooo00<0003o0?ooo`3oool0@03oool00240oooo00<000000?ooo`3oool0C`3oool0
0`00o`00oooo0?ooo`020?l0oc00oooo00<0o`000?ooo`3oool0403oool20?l0ob40oooo00<0003o
0?ooo`3oool0?`3oool00240oooo00<000000?ooo`3oool0D03oool2003o03<0oooo00<0o`000?oo
o`3oool04@3oool00`3o0?l0oooo0?ooo`0N0?ooo`030000o`3oool0oooo03l0oooo000Q0?ooo`03
0000003oool0oooo04h0oooo0P3o0?l20?ooo`03003o003oool0oooo0340oooo00<0o`000?ooo`3o
ool04@3oool20?l0oal0oooo00<0003o0?ooo`3oool0?P3oool00240oooo0P00001=0?ooo`80o`3o
1@3oool00`00o`00oooo0?ooo`0a0?ooo`030?l0003oool0oooo0180oooo0P3o0?lM0?ooo`030000
o`3oool0oooo03h0oooo000Q0?ooo`030000003oool0oooo04X0oooo0P3o0?l80?ooo`800?l0<P3o
ool00`3o0000oooo0?ooo`0C0?ooo`030?l0o`3oool0oooo01X0oooo00<0003o0?ooo`3oool0?P3o
ool00240oooo00<000000?ooo`3oool0B@3oool00`3o0?l0oooo0?ooo`0:0?ooo`03003o003oool0
oooo0300oooo00<0o`000?ooo`3oool04`3oool20?l0oa/0oooo00<0003o0?ooo`3oool0?@3oool0
0240oooo00<000000?ooo`3oool0A`3oool20?l0o`h0oooo0P00o`0a0?ooo`030?l0003oool0oooo
01@0oooo00<0o`3o0?ooo`3oool0603oool00`000?l0oooo0?ooo`0m0?ooo`008@3oool2000004L0
oooo00<0o`3o0?ooo`3oool0403oool00`00o`00oooo0?ooo`0_0?ooo`030?l0003oool0oooo01@0
oooo0P3o0?lI0?ooo`030000o`3oool0oooo03`0oooo000Q0?ooo`030000003oool0oooo0400oooo
0P00o`030?ooo`030?l0o`3oool0oooo0180oooo0P00o`0`0?ooo`030?l0003oool0oooo01D0oooo
00<0o`3o0?ooo`3oool05P3oool00`000?l0oooo0?ooo`0l0?ooo`00203oool2000000@0oooo0P00
00040?ooo`800000103oool2000000D0oooo00<000000?ooo`3oool0?`3oool4003o0080o`3o5`3o
ool00`00o`00oooo0?ooo`0^0?ooo`030?l0003oool0oooo01D0oooo00<0o`3o0?ooo`3oool05P3o
ool00`000?l0oooo0?ooo`0k0?ooo`001`3oool010000000oooo0?ooo`0000080?ooo`040000003o
ool0oooo00000080oooo00@000000?ooo`3oool00000103oool00`000000oooo0?ooo`0n0?ooo`H0
0?l06@3oool00`00o`00oooo0?ooo`0^0?ooo`030?l0003oool0oooo01D0oooo0P3o0?lF0?ooo`03
0000o`3oool0oooo03/0oooo00070?ooo`040000003oool0oooo000000P0oooo00@000000?ooo`3o
ool000001@3oool00`000000oooo0?ooo`020?ooo`800000?`3oool6003o01X0oooo0P00o`0_0?oo
o`030?l0003oool0oooo01H0oooo00<0o`3o0?ooo`3oool0503oool00`000?l0oooo0?ooo`0j0?oo
o`001`3oool010000000oooo0?ooo`0000080?ooo`040000003oool0oooo000000<0oooo0P000005
0?ooo`030000003oool0oooo03l0oooo1000o`0M0?ooo`03003o003oool0oooo02d0oooo00<0o`00
0?ooo`3oool05P3oool00`3o0?l0oooo0?ooo`0C0?ooo`030000o`3oool0oooo03X0oooo00070?oo
o`040000003oool0oooo000000P0oooo00@000000?ooo`3oool000000`3oool00`000000oooo0?oo
o`040?ooo`030000003oool0oooo03h0oooo00@0o`3o0?ooo`00o`000?l07`3oool2003o02h0oooo
00<0o`000?ooo`3oool05P3oool20?l0oa@0oooo00<0003o0?ooo`3oool0>@3oool000P0oooo0P00
000:0?ooo`800000103oool3000000@0oooo00<000000?ooo`3oool0?@3oool00`3o0?l0oooo0?oo
o`0S0?ooo`03003o003oool0oooo02/0oooo00<0o`000?ooo`3oool0603oool00`3o0?l0oooo0?oo
o`0A0?ooo`030000o`3oool0oooo03T0oooo000Q0?ooo`800000?03oool20?l0obL0oooo00<00?l0
0?ooo`3oool0:`3oool00`3o0000oooo0?ooo`0H0?ooo`030?l0o`3oool0oooo0140oooo00<0003o
0?ooo`3oool0>03oool00240oooo00<000000?ooo`3oool0>P3oool00`3o0?l0oooo0?ooo`0X0?oo
o`800?l0;03oool00`3o0000oooo0?ooo`0H0?ooo`030?l0o`3oool0oooo0100oooo00<0003o0?oo
o`3oool0>03oool00240oooo00<000000?ooo`3oool0>@3oool00`3o0?l0oooo0?ooo`0[0?ooo`03
003o003oool0oooo02X0oooo00<0o`000?ooo`3oool0603oool00`3o0?l0oooo0?ooo`0@0?ooo`03
0000o`3oool0oooo03L0oooo000Q0?ooo`030000003oool0oooo03P0oooo00<0o`3o0?ooo`3oool0
;@3oool2003o02/0oooo00<0o`000?ooo`3oool0603oool00`3o0?l0oooo0?ooo`0?0?ooo`030000
o`3oool0oooo03L0oooo000Q0?ooo`800000>03oool00`3o0?l0oooo0?ooo`0`0?ooo`03003o003o
ool0oooo02T0oooo00<0o`000?ooo`3oool0603oool00`3o0?l0oooo0?ooo`0>0?ooo`030000o`3o
ool0oooo03L0oooo000Q0?ooo`030000003oool0oooo03D0oooo0P3o0?ld0?ooo`03003o003oool0
oooo02T0oooo00<0o`000?ooo`3oool0603oool0103o0?l0oooo0000o`000?l=0?ooo`030000o`3o
ool0oooo03H0oooo000Q0?ooo`030000003oool0oooo03@0oooo00<0o`3o0?ooo`3oool0=@3oool2
003o02X0oooo00<0o`000?ooo`3oool0603oool40000o``0oooo00<0003o0?ooo`3oool0=P3oool0
0240oooo00<000000?ooo`3oool0<`3oool00`3o0?l0oooo0?ooo`0h0?ooo`03003o003oool0oooo
02P0oooo00<0o`000?ooo`3oool05P3oool60000o``0oooo00<0003o0?ooo`3oool0=@3oool00240
oooo00<000000?ooo`3oool0<P3oool00`3o0?l0oooo0?ooo`0j0?ooo`800?l0:@3oool00`3o0000
oooo0?ooo`0E0?ooo`H0003o303oool00`000?l0oooo0?ooo`0e0?ooo`008@3oool200000380oooo
00<0o`3o0?ooo`3oool0?@3oool00`00o`00oooo0?ooo`0W0?ooo`030?l0003oool0oooo01D0oooo
10000?l>0?ooo`030000o`3oool0oooo03@0oooo000Q0?ooo`030000003oool0oooo0300oooo00<0
o`3o0?ooo`3oool0?`3oool00`00o`00oooo0?ooo`0W0?ooo`030?l0003oool0oooo01D0oooo0P00
0?l00`3oool0o`3o0?ooo`0<0?ooo`030000o`3oool0oooo03@0oooo000Q0?ooo`030000003oool0
oooo02l0oooo00<0o`3o0?ooo`3oool0@@3oool2003o02P0oooo00<0o`000?ooo`3oool0603oool0
0`3o0?l0oooo0?ooo`0;0?ooo`030000o`3oool0oooo03<0oooo000Q0?ooo`030000003oool0oooo
02h0oooo00<0o`3o0?ooo`3oool0A03oool00`00o`00oooo0?ooo`0V0?ooo`030?l0003oool0oooo
01P0oooo00<0o`3o0?ooo`3oool02P3oool00`000?l0oooo0?ooo`0c0?ooo`008@3oool2000002h0
oooo00<0o`3o0?ooo`3oool0AP3oool2003o02L0oooo00<0o`000?ooo`3oool0603oool00`3o0?l0
oooo0?ooo`0:0?ooo`030000o`3oool0oooo0380oooo000Q0?ooo`030000003oool0oooo02`0oooo
00<0o`3o0?ooo`3oool0B@3oool00`00o`00oooo0?ooo`0T0?ooo`030?l0003oool0oooo01P0oooo
00<0o`3o0?ooo`3oool02P3oool00`000?l0oooo0?ooo`0b0?ooo`003P3oool2000000@0oooo0P00
00030?ooo`D000000`3oool00`000000oooo0?ooo`0[0?ooo`030?l0o`3oool0oooo04/0oooo00<0
0?l00?ooo`3oool0903oool00`3o0000oooo0?ooo`0H0?ooo`030?l0o`3oool0oooo00X0oooo00<0
003o0?ooo`3oool0<@3oool000d0oooo00@000000?ooo`3oool000002P3oool00`000000oooo0?oo
o`030?ooo`030000003oool0oooo02X0oooo00<0o`3o0?ooo`3oool0C@3oool2003o02D0oooo00<0
o`000?ooo`3oool0603oool00`3o0?l0oooo0?ooo`090?ooo`030000o`3oool0oooo0340oooo000=
0?ooo`040000003oool0oooo000000X0oooo00<000000?ooo`3oool00`3oool2000002X0oooo00<0
o`3o0?ooo`3oool0D03oool00`00o`00oooo0?ooo`0S0?ooo`030?l0003oool0oooo01P0oooo00<0
o`3o0?ooo`3oool0203oool00`000?l0oooo0?ooo`0a0?ooo`003@3oool010000000oooo0?ooo`00
000:0?ooo`030000003oool0oooo00<0oooo00<000000?ooo`3oool0:03oool00`3o0?l0oooo0?oo
o`1B0?ooo`800?l0903oool00`3o0000oooo0?ooo`0H0?ooo`030?l0o`3oool0oooo00P0oooo00<0
003o0?ooo`3oool0<03oool000d0oooo00@000000?ooo`3oool000002P3oool00`000000oooo0?oo
o`030?ooo`030000003oool0oooo02L0oooo00<0o`3o0?ooo`3oool0E@3oool00`00o`00oooo0?oo
o`0R0?ooo`030?l0003oool0oooo01P0oooo00<0o`3o0?ooo`3oool01`3oool00`000?l0oooo0?oo
o`0`0?ooo`003P3oool2000000X0oooo0P0000050?ooo`030000003oool0oooo02H0oooo00<0o`3o
0?ooo`3oool0E`3oool00`00o`00oooo0?ooo`0R0?ooo`030?l0003oool0oooo01L0oooo00<0o`3o
0?ooo`3oool0203oool00`000?l0oooo0?ooo`0_0?ooo`008@3oool2000002H0oooo00<0o`3o0?oo
o`3oool0F@3oool2003o02<0oooo00<0o`000?ooo`3oool05`3oool00`3o0?l0oooo0?ooo`070?oo
o`030000o`3oool0oooo02l0oooo000Q0?ooo`030000003oool0oooo02D0oooo00<0o`3o0?ooo`3o
ool0F`3oool00`00o`00oooo0?ooo`0Q0?ooo`030?l0003oool0oooo01L0oooo00<0o`3o0?ooo`3o
ool01`3oool00`000?l0oooo0?ooo`0^0?ooo`008@3oool00`000000oooo0?ooo`0T0?ooo`030?l0
o`3oool0oooo05d0oooo0P00o`0R0?ooo`030?l0003oool0oooo01L0oooo00<0o`3o0?ooo`3oool0
1P3oool00`000?l0oooo0?ooo`0^0?ooo`008@3oool00`000000oooo0?ooo`0S0?ooo`030?l0o`3o
ool0oooo0600oooo00<00?l00?ooo`3oool0803oool00`3o0000oooo0?ooo`0G0?ooo`030?l0o`3o
ool0oooo00H0oooo00<0003o0?ooo`3oool0;@3oool00240oooo0P00000S0?ooo`030?l0o`3oool0
oooo0680oooo0P00o`0Q0?ooo`030?l0003oool0oooo01H0oooo00<0o`3o0?ooo`3oool01P3oool0
0`000?l0oooo0?ooo`0]0?ooo`008@3oool00`000000oooo0?ooo`0Q0?ooo`030?l0o`3oool0oooo
06D0oooo00<00?l00?ooo`3oool07`3oool00`3o0000oooo0?ooo`0F0?ooo`030?l0o`3oool0oooo
00H0oooo00<0003o0?ooo`3oool0;03oool00240oooo00<000000?ooo`3oool0803oool00`3o0?l0
oooo0?ooo`1W0?ooo`03003o003oool0oooo01l0oooo00<0o`000?ooo`3oool05P3oool00`3o0?l0
oooo0?ooo`050?ooo`030000o`3oool0oooo02`0oooo000Q0?ooo`030000003oool0oooo0200oooo
00<0o`3o0?ooo`3oool0J03oool2003o0200oooo00<0o`000?ooo`3oool05P3oool00`3o0?l0oooo
0?ooo`050?ooo`030000o`3oool0oooo02/0oooo000Q0?ooo`800000803oool00`3o0?l0oooo0?oo
o`1[0?ooo`03003o003oool0oooo01d0oooo00<0o`000?ooo`3oool05P3oool00`3o0?l0oooo0?oo
o`050?ooo`030000o`3oool0oooo02/0oooo000Q0?ooo`030000003oool0oooo01h0oooo00<0o`3o
0?ooo`3oool0K@3oool2003o01h0oooo00<0o`000?ooo`3oool05P3oool00`3o0?l0oooo0?ooo`04
0?ooo`030000o`3oool0oooo02/0oooo000Q0?ooo`030000003oool0oooo01d0oooo00<0o`3o0?oo
o`3oool0L03oool00`00o`00oooo0?ooo`0L0?ooo`030?l0003oool0oooo01H0oooo00<0o`3o0?oo
o`3oool0103oool00`000?l0oooo0?ooo`0Z0?ooo`008@3oool00`000000oooo0?ooo`0L0?ooo`03
0?l0o`3oool0oooo0780oooo00<00?l00?ooo`3oool0703oool00`3o0000oooo0?ooo`0E0?ooo`03
0?l0o`3oool0oooo00@0oooo00<0003o0?ooo`3oool0:P3oool00240oooo0P00000M0?ooo`030?l0
o`3oool0oooo07<0oooo0P00o`0M0?ooo`030?l0003oool0oooo01D0oooo00<0o`3o0?ooo`3oool0
103oool00`000?l0oooo0?ooo`0Y0?ooo`008@3oool00`000000oooo0?ooo`0K0?ooo`030?l0o`3o
ool0oooo07H0oooo00<00?l00?ooo`3oool06`3oool00`3o0000oooo0?ooo`0E0?ooo`030?l0o`3o
ool0oooo00<0oooo00<0003o0?ooo`3oool0:@3oool000P0oooo0P0000040?ooo`8000000`3oool5
00000080oooo0P0000050?ooo`030000003oool0oooo01X0oooo00<0o`3o0?ooo`3oool0N03oool2
003o01`0oooo00<0o`000?ooo`3oool05@3oool00`3o0?l0oooo0?ooo`030?ooo`030000o`3oool0
oooo02P0oooo00070?ooo`040000003oool0oooo000000X0oooo00D000000?ooo`3oool0oooo0000
00020?ooo`030000003oool0oooo0080oooo00<000000?ooo`3oool06@3oool00`3o0?l0oooo0?oo
o`1k0?ooo`03003o003oool0oooo01X0oooo00<0o`000?ooo`3oool0503oool00`3o0?l0oooo0?oo
o`030?ooo`030000o`3oool0oooo02P0oooo00070?ooo`040000003oool0oooo000000X0oooo00<0
00000?ooo`3oool0103oool00`000000oooo0?ooo`020?ooo`8000006@3oool00`3o0?l0oooo0?oo
o`1m0?ooo`03003o003oool0oooo01X0oooo00<0o`000?ooo`3oool0503oool00`3o0?l0oooo0?oo
o`030?ooo`030000o`3oool0oooo02L0oooo00070?ooo`040000003oool0oooo000000X0oooo00<0
00000?ooo`3oool00P3oool2000000D0oooo00<000000?ooo`3oool0603oool00`3o0?l0oooo0?oo
o`1n0?ooo`800?l06`3oool00`3o0000oooo0?ooo`0D0?ooo`030?l0o`3oool0oooo0080oooo00<0
003o0?ooo`3oool09`3oool000L0oooo00@000000?ooo`3oool000002P3oool00`000000oooo0?oo
o`020?ooo`030000003oool0oooo00@0oooo00<000000?ooo`3oool05`3oool00`3o0?l0oooo0?oo
o`210?ooo`03003o003oool0oooo01T0oooo00<0o`000?ooo`3oool04`3oool00`3o0?l0oooo0?oo
o`030?ooo`030000o`3oool0oooo02H0oooo00080?ooo`8000002P3oool2000000@0oooo0`000004
0?ooo`030000003oool0oooo01H0oooo00<0o`3o0?ooo`3oool0P`3oool2003o01X0oooo00<0o`00
0?ooo`3oool04`3oool00`3o0?l0oooo0?ooo`020?ooo`030000o`3oool0oooo02H0oooo000Q0?oo
o`030000003oool0oooo01D0oooo00<0o`3o0?ooo`3oool0QP3oool00`00o`00oooo0?ooo`0H0?oo
o`030?l0003oool0oooo01<0oooo00<0o`3o0?ooo`3oool00P3oool00`000?l0oooo0?ooo`0U0?oo
o`008@3oool2000001H0oooo00<0o`3o0?ooo`3oool0Q`3oool00`00o`00oooo0?ooo`0H0?ooo`03
0?l0003oool0oooo0180oooo00<0o`3o0?ooo`3oool00P3oool00`000?l0oooo0?ooo`0U0?ooo`00
8@3oool00`000000oooo0?ooo`0D0?ooo`030?l0o`3oool0oooo08T0oooo0P00o`0I0?ooo`030?l0
003oool0oooo0180oooo00<0o`3o0?ooo`3oool00P3oool00`000?l0oooo0?ooo`0T0?ooo`008@3o
ool00`000000oooo0?ooo`0C0?ooo`030?l0o`3oool0oooo08`0oooo00<00?l00?ooo`3oool05`3o
ool00`3o0000oooo0?ooo`0B0?ooo`050?l0o`3oool0oooo0?ooo`000?l09P3oool00240oooo00<0
00000?ooo`3oool04P3oool00`3o0?l0oooo0?ooo`2>0?ooo`800?l05`3oool00`3o0000oooo0?oo
o`0B0?ooo`050?l0o`3oool0oooo0?ooo`000?l09P3oool00240oooo0P00000B0?ooo`030?l0o`3o
ool0oooo0940oooo00<00?l00?ooo`3oool05@3oool00`3o0000oooo0?ooo`0B0?ooo`050?l0o`3o
ool0oooo0?ooo`000?l09@3oool00240oooo00<000000?ooo`3oool04@3oool00`3o0?l0oooo0?oo
o`2B0?ooo`03003o003oool0oooo01D0oooo00<0o`000?ooo`3oool04P3oool0103o0?l0oooo0?oo
o`000?lU0?ooo`008@3oool00`000000oooo0?ooo`0@0?ooo`030?l0o`3oool0oooo09@0oooo0P00
o`0F0?ooo`030?l0003oool0oooo0140oooo00D0o`3o0?ooo`3oool0oooo0000o`0T0?ooo`008@3o
ool00`000000oooo0?ooo`0?0?ooo`030?l0o`3oool0oooo09L0oooo00<00?l00?ooo`3oool0503o
ool00`3o0000oooo0?ooo`0A0?ooo`040?l0o`3oool0oooo0000ob@0oooo000Q0?ooo`8000003`3o
ool00`3o0?l0oooo0?ooo`2I0?ooo`800?l05@3oool00`3o0000oooo0?ooo`0A0?ooo`040?l0o`3o
ool0oooo0000ob<0oooo000Q0?ooo`030000003oool0oooo00h0oooo00<0o`3o0?ooo`3oool0V`3o
ool00`00o`00oooo0?ooo`0C0?ooo`030?l0003oool0oooo0100oooo00@0o`3o0?ooo`3oool0003o
8`3oool00240oooo00<000000?ooo`3oool03@3oool00`3o0?l0oooo0?ooo`2M0?ooo`800?l0503o
ool00`3o0000oooo0?ooo`0@0?ooo`040?l0o`3oool0oooo0000ob80oooo000Q0?ooo`030000003o
ool0oooo00`0oooo00<0o`3o0?ooo`3oool0X03oool00`00o`00oooo0?ooo`0B0?ooo`030?l0003o
ool0oooo0100oooo00<0o`3o0?ooo`000?l08P3oool00240oooo0P00000<0?ooo`030?l0o`3oool0
oooo0:80oooo00<00?l00?ooo`3oool04P3oool00`3o0000oooo0?ooo`0?0?ooo`040?l0o`3oool0
oooo0000ob40oooo000Q0?ooo`030000003oool0oooo00/0oooo00<0o`3o0?ooo`3oool0X`3oool2
003o01<0oooo00<0o`000?ooo`3oool03`3oool00`3o0?l0oooo0000o`0Q0?ooo`003P3oool20000
00@0oooo0P0000030?ooo`@00000103oool00`000000oooo0?ooo`0:0?ooo`030?l0o`3oool0oooo
0:H0oooo00<00?l00?ooo`3oool04@3oool00`3o0000oooo0?ooo`0?0?ooo`030?l0o`3oool0003o
0200oooo000=0?ooo`040000003oool0oooo000000P0oooo00<000000?ooo`3oool01@3oool00`00
0000oooo0?ooo`090?ooo`030?l0o`3oool0oooo0:P0oooo0P00o`0B0?ooo`030?l0003oool0oooo
00h0oooo00<0o`3o0?ooo`000?l0803oool000d0oooo00@000000?ooo`3oool000002@3oool00`00
0000oooo0?ooo`040?ooo`8000002@3oool00`3o0?l0oooo0?ooo`2[0?ooo`03003o003oool0oooo
0100oooo00<0o`000?ooo`3oool03P3oool00`3o0?l0003o0?ooo`0O0?ooo`003@3oool010000000
oooo0?ooo`00000:0?ooo`030000003oool0oooo00<0oooo00<000000?ooo`3oool0203oool00`3o
0?l0oooo0?ooo`2/0?ooo`03003o003oool0oooo0100oooo00<0o`000?ooo`3oool03@3oool00`3o
0?l0oooo0000o`0O0?ooo`003@3oool010000000oooo0?ooo`0000080?ooo`040000003oool0oooo
000000@0oooo00<000000?ooo`3oool01`3oool00`3o0?l0oooo0?ooo`2^0?ooo`800?l0403oool0
0`3o0000oooo0?ooo`0>0?ooo`030?l0o`000?l0oooo01h0oooo000>0?ooo`8000002P3oool20000
00D0oooo00<000000?ooo`3oool01P3oool00`3o0?l0oooo0?ooo`2a0?ooo`03003o003oool0oooo
00h0oooo00<0o`000?ooo`3oool03@3oool00`3o0?l0oooo0000o`0N0?ooo`008@3oool2000000L0
oooo00<0o`3o0?ooo`3oool0/P3oool2003o00l0oooo00<0o`000?ooo`3oool03@3oool00`3o0?l0
003o0?ooo`0M0?ooo`008@3oool00`000000oooo0?ooo`050?ooo`030?l0o`3oool0oooo0;D0oooo
00<00?l00?ooo`3oool03@3oool00`3o0000oooo0?ooo`0<0?ooo`030?l0o`3oool0003o01d0oooo
000Q0?ooo`030000003oool0oooo00@0oooo00<0o`3o0?ooo`3oool0]`3oool00`00o`00oooo0?oo
o`0=0?ooo`030?l0003oool0oooo00`0oooo00<0o`3o0000o`3oool0703oool00240oooo00<00000
0?ooo`3oool0103oool00`3o0?l0oooo0?ooo`2h0?ooo`800?l03P3oool00`3o0000oooo0?ooo`0;
0?ooo`030?l0o`3oool0003o01`0oooo000Q0?ooo`800000103oool00`3o0?l0oooo0?ooo`2k0?oo
o`03003o003oool0oooo00`0oooo00<0o`000?ooo`3oool02`3oool00`3o0?l0003o0?ooo`0K0?oo
o`008@3oool00`000000oooo0?ooo`030?ooo`030?l0o`3oool0oooo0;`0oooo0P00o`0=0?ooo`03
0?l0003oool0oooo00/0oooo00<0o`3o0000o`3oool06P3oool00240oooo00<000000?ooo`3oool0
0P3oool00`3o0?l0oooo0?ooo`2o0?ooo`03003o003oool0oooo00/0oooo00<0o`000?ooo`3oool0
2P3oool00`3o0?l0003o0?ooo`0J0?ooo`008@3oool01@000000oooo0?ooo`3oool0o`3o0<<0oooo
00<00?l00?ooo`3oool02`3oool00`3o0000oooo0?ooo`0:0?ooo`030?l0o`000?l0oooo01T0oooo
000Q0?ooo`8000000P3oool00`3o0?l0oooo0?ooo`320?ooo`800?l0303oool00`3o0000oooo0?oo
o`090?ooo`030?l0o`000?l0oooo01T0oooo000Q0?ooo`040000003oool0oooo0?l0olL0oooo00<0
0?l00?ooo`3oool02P3oool00`3o0000oooo0?ooo`090?ooo`030000o`3oool0oooo01P0oooo000Q
0?ooo`030000003oool0o`3o0<T0oooo0P00o`0;0?ooo`030?l0003oool0oooo00P0oooo00<0o`3o
0000o`3oool0603oool00240oooo00<000000?ooo`3o0?l0b`3oool00`00o`00oooo0?ooo`090?oo
o`030?l0003oool0oooo00P0oooo00<0003o0?ooo`3oool05`3oool00240oooo00<000000?l0o`3o
ool0c03oool00`00o`00oooo0?ooo`090?ooo`030?l0003oool0oooo00L0oooo00<0o`3o0000o`3o
ool05`3oool00240oooo00<000000?l0o`3oool0c@3oool2003o00T0oooo00<0o`000?ooo`3oool0
203oool00`000?l0oooo0?ooo`0F0?ooo`008@3oool00`3o0?l0oooo0?ooo`3?0?ooo`03003o003o
ool0oooo00L0oooo00<0o`000?ooo`3oool01`3oool00`3o0?l0003o0?ooo`0F0?ooo`00203oool2
000000@0oooo0P0000030?ooo`@000000`3oool2000000D0oooo00<000000?ooo`3oool0d03oool2
003o00P0oooo00<0o`000?ooo`3oool01`3oool00`000?l0oooo0?ooo`0E0?ooo`001`3oool01000
0000oooo0?ooo`0000080?ooo`030000003oool0oooo00<0oooo00@000000?ooo`3oool00000103o
ool00`000000oooo0?ooo`3B0?ooo`03003o003oool0oooo00H0oooo00<0o`000?ooo`3oool01P3o
ool00`3o0?l0003o0?ooo`0E0?ooo`001`3oool010000000oooo0?ooo`0000090?ooo`030000003o
ool0oooo00D0oooo00<000000?ooo`3oool00P3oool200000=@0oooo00<00?l00?ooo`3oool01P3o
ool00`3o0000oooo0?ooo`060?ooo`030000o`3oool0oooo01@0oooo00070?ooo`040000003oool0
oooo000000X0oooo00<000000?ooo`3oool00P3oool2000000D0oooo00<000000?ooo`3oool0e03o
ool2003o00L0oooo00<0o`000?ooo`3oool01@3oool00`3o0?l0003o0?ooo`0D0?ooo`001`3oool0
10000000oooo0?ooo`0000080?ooo`040000003oool0oooo000000<0oooo00<000000?ooo`3oool0
103oool00`000000oooo0?ooo`3F0?ooo`03003o003oool0oooo00D0oooo00<0o`000?ooo`3oool0
1@3oool00`000?l0oooo0?ooo`0C0?ooo`00203oool2000000X0oooo0P0000040?ooo`<00000103o
ool00`000000oooo0?ooo`3G0?ooo`800?l01P3oool00`3o0000oooo0?ooo`040?ooo`030?l0o`00
0?l0oooo01<0oooo000Q0?ooo`800000fP3oool00`00o`00oooo0?ooo`040?ooo`030?l0003oool0
oooo00@0oooo00<0003o0?ooo`3oool04P3oool00240oooo00<000000?ooo`3oool0fP3oool2003o
00D0oooo00<0o`000?ooo`3oool00`3oool00`3o0?l0003o0?ooo`0B0?ooo`008@3oool00`000000
oooo0?ooo`3L0?ooo`03003o003oool0oooo00<0oooo00<0o`000?ooo`3oool00`3oool00`000?l0
oooo0?ooo`0A0?ooo`008@3oool00`000000oooo0?ooo`3M0?ooo`03003o003oool0oooo00<0oooo
00<0o`000?ooo`3oool00P3oool00`000?l0oooo0?ooo`0A0?ooo`008@3oool200000=l0oooo0P00
o`040?ooo`030?l0003oool0oooo0080oooo00<0003o0?ooo`3oool0403oool00240oooo00<00000
0?ooo`3oool0h03oool00`00o`00oooo0?ooo`020?ooo`050?l0003oool0oooo0?ooo`000?l04P3o
ool00240oooo00<000000?ooo`3oool0h@3oool2003o00<0oooo00D0o`000?ooo`3oool0oooo0000
o`0A0?ooo`008@3oool00`000000oooo0?ooo`3S0?ooo`05003o003oool0oooo0?ooo`3o00000P3o
ool00`000?l0oooo0?ooo`0?0?ooo`008@3oool200000>D0oooo00@00?l00?ooo`3oool0o`000`3o
ool00`000?l0oooo0?ooo`0>0?ooo`008@3oool00`000000oooo0?ooo`3U0?ooo`800?l000D0oooo
0?l0003oool0oooo0000o`0@0?ooo`008@3oool00`000000oooo0?ooo`3W0?ooo`03003o003oool0
o`000080oooo00<0003o0?ooo`3oool03@3oool00240oooo00<000000?ooo`3oool0j03oool2003o
00030?l0003oool0003o00l0oooo000Q0?ooo`800000j`3oool01000o`00o`000?ooo`000?l>0?oo
o`008@3oool00`000000oooo0?ooo`3[0?ooo`03003o003o0000003o0080o`3o303oool000h0oooo
0P0000040?ooo`800000103oool2000000D0oooo00<000000?ooo`3oool0k03oool2003o00030000
o`3o0?l0o`3o00/0oooo000=0?ooo`040000003oool0oooo000000P0oooo00@000000?ooo`3oool0
0000103oool00`000000oooo0?ooo`3/0?ooo`80o`3o00@00?l00?l0o`3o0?l0o`3o2P3oool000d0
oooo00@000000?ooo`3oool000002P3oool00`000000oooo0?ooo`030?ooo`800000k@3oool60?l0
o`X0oooo000=0?ooo`040000003oool0oooo000000/0oooo00<000000?ooo`3oool00P3oool00`00
0000oooo0?ooo`3]0?ooo`@0o`3o2`3oool000d0oooo00@000000?ooo`3oool00000203oool01000
0000oooo0?ooo`0000040?ooo`030000003oool0oooo0>h0oooo0`3o0?l;0?ooo`003P3oool20000
00X0oooo0P0000050?ooo`030000003oool0oooo0?00oooo00<0o`3o0?ooo`3oool02@3oool00240
oooo0P00003b0?ooo`030?l0o`3oool0oooo00P0oooo000Q0?ooo`030000003oool0oooo0?40oooo
00<0o`3o0?ooo`3oool0203oool00240oooo00<000000?ooo`3oool0lP3oool00`3o0?l0oooo0?oo
o`070?ooo`008@3oool00`000000oooo0?ooo`3b0?ooo`030?l0o`3oool0oooo00L0oooo000Q0?oo
o`030000003oool0oooo0?<0oooo00<0o`3o0?ooo`3oool01P3oool00240oooo0P00003d0?ooo`03
0?l0o`3oool0oooo00H0oooo000Q0?ooo`030000003oool0oooo0?@0oooo00<0o`3o0?ooo`3oool0
1@3oool00240oooo00<000000?ooo`3oool0m03oool00`3o0?l0oooo0?ooo`050?ooo`008@3oool0
0`000000oooo0?ooo`3e0?ooo`030?l0o`3oool0oooo00@0oooo000Q0?ooo`030000003oool0oooo
0?D0oooo00<0o`3o0?ooo`3oool0103oool00?l0oooo8@3oool00?l0oooo8@3oool00?l0oooo8@3o
ool00?l0oooo8@3oool00?l0oooo8@3oool00?l0oooo8@3oool00?l0oooo8@3oool00001\
\>"],
    ImageRangeCache->{{{0, 287}, {176.938, 0}} -> {0, 0, 0, 0}}],
  "  "
}], "Text",
  Editable->False],

Cell[BoxData[
    \(NewtonRaphsonAdaptive[1.3, 5]\)], "Input"],

Cell[TextData[{
  StyleBox["Summary of the above results. ",
    FontFamily->"Times New Roman"],
  "\n\n\t\t",
  Cell[BoxData[
      StyleBox[GridBox[{
            {
              " ", \(Newton - 
                Raphson\), \(Method\ \ A\), \(Method\ \ B\), \
\(Method\ \ C\)},
            {" ", "Using", "Using", \(m = 2\ \ \ in\), \(Adaptive\ Newton\)},
            {
              " ", \(Formula\ \((2)\)\), \(Formula\ \((9)\)\), \(Formula\ \
\((11)\)\), " "},
            {" ", " ", " ", " ", " "},
            {\(\(\ \ \)\(k\)\), \(p\_k\), \(p\_k\), \(p\_k\), \(p\_k\)},
            {\(\(\ \ \)\(0\)\), \(\(\ \ \ \)\(1.3000000000000000\)\), \(\(\ \ \
\ \)\(1.3000000000000000\)\), \(\(\ \ \ \)\(1.3000000000000000\)\), \(\(\ \ \ \
\)\(1.3000000000000000\)\)},
            {\(\(\ \ \)\(1\)\), \(\(\ \ \ \)\(1.1565217391304350\)\), \(\(\ \ \
\ \)\(1.0130434782608700\)\), \(\(\ \ \ \)\(0.9876543209876544\)\), \(\(\ \ \ \
\)\(1.1565217391304350\)\)},
            {\(\(\ \ \)\(2\)\), \(\(\ \ \ \)\(1.0801542776998600\)\), \(\(\ \ \
\ \)\(1.0000281716593167\)\), \(\(\ \ \ \)\(0.9999743872140974\)\), \(\(\ \ \ \
\)\(1.0130434782608700\)\)},
            {\(\(\ \ \)\(3\)\), \(\(\ \ \ \)\(1.0405919010082360\)\), \(\(\ \ \
\ \)\(1.0000000001359235\)\), \(\(\ \ \ \)\(0.9999999998906623\)\), \(\(\ \ \ \
\)\(1.0065358249600933\)\)},
            {\(\(\ \ \)\(4\)\), \(\(\ \ \ \)\(1.0204305276682768\)\), " ", 
              " ", \(\(\ \ \ \)\(1.0000281716593167\)\)},
            {\(\(\ \ \)\(5\)\), \(\(\ \ \ \)\(1.0102496959724945\)\), " ", 
              " ", \(\(\ \ \ \)\(1.0000140858976200\)\)},
            {\(\(\ \ \)\(6\)\), \(\(\ \ \ \)\(1.0051335580375143\)\), " ", 
              " ", \(\(\ \ \ \)\(1.0000000001359235\)\)},
            {\(\(\ \ \)\(7\)\), \(\(\ \ \ \)\(1.0025689695144173\)\), " ", 
              " ", " "},
            {\(\(\ \ \)\(8\)\), \(\(\ \ \ \)\(1.0012850340187247\)\), " ", 
              " ", " "},
            {\(\(\ \ \)\(9\)\), \(\(\ \ \ \)\(1.0006426545303380\)\), " ", 
              " ", " "},
            {"10", \(\(\ \ \ \)\(1.0003213616711790\)\), " ", " ", " "},
            {"11", \(\(\ \ \ \)\(1.0001606894404667\)\), " ", " ", " "},
            {"12", \(\(\ \ \ \)\(1.0000803468718082\)\), " ", " ", " "},
            {"13", \(\(\ \ \ \)\(1.0000401739737912\)\), " ", " ", " "},
            {"14", \(\(\ \ \ \)\(1.0000200871215184\)\), " ", " ", " "},
            {"15", \(\(\ \ \ \)\(1.0000100435959605\)\), " ", " ", " "},
            {"16", \(\(\ \ \ \)\(1.0000050218117467\)\), " ", " ", " "},
            {"17", \(\(\ \ \ \)\(1.0000025108999528\)\), " ", " ", " "},
            {"18", \(\(\ \ \ \)\(1.0000012554432040\)\), " ", " ", " "},
            {"19", \(\(\ \ \ \)\(1.0000006277184188\)\), " ", " ", " "},
            {"20", \(\(\ \ \ \)\(1.0000003138985527\)\), " ", " ", " "},
            {"21", \(\(\ \ \ \)\(1.0000001570966839\)\), " ", " ", " "},
            {"22", \(\(\ \ \ \)\(1.0000000784159522\)\), " ", " ", " "},
            {"23", \(\(\ \ \ \)\(1.0000000397170727\)\), " ", " ", " "},
            {"24", \(\(\ \ \ \)\(1.0000000201497670\)\), " ", " ", " "},
            {"25", \(\(\ \ \ \)\(1.0000000091300563\)\), " ", " ", " "},
            {"26", \(\(\ \ \ \)\(1.0000000050766930\)\), " ", " ", " "}
            }],
        FontWeight->"Bold"]]],
  "  "
}], "Text",
  Editable->False],

Cell[TextData[{
  StyleBox["\tObserve in this example that the standard Newton-Raphson method \
converges linearly and methods A and B converge quadratically.  The reader \
can use formulas (12) to verify that ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(m = 2\)]],
  StyleBox[" is the order of the root ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p = 1\)]],
  StyleBox[".  The new method C is almost as fast as methods A and B. ",
    FontFamily->"Times New Roman"]
}], "Text"],

Cell[TextData[{
  StyleBox["Reminder.",
    FontFamily->"Times New Roman",
    FontWeight->"Bold",
    FontColor->RGBColor[0, 1, 0]],
  StyleBox["  The goal of this investigation is to show how the adaptive \
Newton-Raphson method is superior to the standard Newton-Raphson method, \
because of the limitations of Methods A and B. ",
    FontFamily->"Times New Roman"]
}], "Text"],

Cell[TextData[{
  StyleBox["Caveat.",
    FontWeight->"Bold",
    FontColor->RGBColor[1, 0, 0]],
  "  Why is it difficult to locate a multiple root.  Because the function \
values themselves are essentially \"noise\" when you get close to a multiple \
root.  "
}], "Text"],

Cell[BoxData[{
    \(\(Needs["\<Graphics`Colors`\>"];\)\), "\[IndentingNewLine]", 
    \(\(Plot[f[x], {x, 0.5, 1.5}, PlotRange \[Rule] {{0.5, 1.5}, All}, 
        PlotStyle \[Rule] Magenta];\)\ \), "\[IndentingNewLine]", 
    \(\(Print["\<f[x] = \>", f[x]\ ];\)\)}], "Input"],

Cell[BoxData[{
    \(\(Needs["\<Graphics`Colors`\>"];\)\), "\[IndentingNewLine]", 
    \(\(Plot[\((x - 1)\)\^2\ \((x + 2)\), {x, 0.5, 1.5}, 
        PlotRange \[Rule] {{0.5, 1.5}, All}, 
        PlotStyle \[Rule] Red];\)\ \), "\[IndentingNewLine]", 
    \(\(Print["\<f[x] = \>", Factor[f[x]]\ ];\)\)}], "Input"],

Cell[TextData[StyleBox["One way to tell is to graph their difference.  ",
  FontFamily->"Times New Roman"]], "Text"],

Cell[BoxData[
    \(\(\(Plot[{\((x - 1)\)\^2\ \((x + 2)\) - f[x]}, {x, 0.5, 1.5}, 
        PlotRange \[Rule] {{0.5, 1.5}, All}, 
        PlotStyle \[Rule] Blue];\)\(\ \)\)\)], "Input"],

Cell[TextData[{
  StyleBox["The formula  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(f[x]\  = \ \((x - 1)\)\^2\ \((x + 2)\)\)]],
  StyleBox["  should be considered the \"true value.\" \nSo one should be \
suspect of the computation  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(f[x]\  = \ \((x - 1)\)\^2\ \((x + 2)\)\)]],
  "  for values of  x  is near  x=1."
}], "Text"],

Cell[BoxData[{
    \(\(Needs["\<Graphics`Colors`\>"];\)\), "\[IndentingNewLine]", 
    \(\(a = 0.99999999;\)\ \), "\[IndentingNewLine]", 
    \(\(b = 1.00000001;\)\), "\[IndentingNewLine]", 
    \(\(Plot[f[x], {x, a, b}, PlotRange \[Rule] {{a, b}, All}, 
        Ticks \[Rule] {None, Automatic}, 
        PlotStyle \[Rule] Red];\)\ \), "\[IndentingNewLine]", 
    \(\(Print["\<f[x] = \>", f[x]\ ];\)\), "\[IndentingNewLine]", 
    \(\(Print["\<Ploted over the interval [a,b] = [\>", 
        NumberForm[a, 12], "\< , \>", 
        NumberForm[b, 12], "\<].\>"];\)\ \), "\[IndentingNewLine]", 
    \(\(Print["\<The graph is just multiples of 'Machine Epsilon'\>"];\)\), "\
\[IndentingNewLine]", 
    \(\(Print["\<Machine Epsilon = \>", $MachineEpsilon\ ];\)\), "\
\[IndentingNewLine]", 
    \(\(Print["\<The computer will compute f[x] = 0 at many locations.\>"];\)\
\ \)}], "Input"]
}, Closed]],

Cell[TextData[{
  StyleBox["Example 2.",
    FontFamily->"Times New Roman",
    FontWeight->"Bold",
    FontColor->RGBColor[1, 0, 0]],
  StyleBox["  Use the value  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p\_0 = 1.3\)]],
  "  ",
  StyleBox["and compare Methods A,B and C for finding the triple root  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p = 1\)]],
  StyleBox["  of the equation  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(x\^4 - x\^3 - 3\ x\^2 + 5\ x - 2\  = \ 0\)]],
  StyleBox[". ",
    FontFamily->"Times New Roman"]
}], "Text"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Solution 2.",
  FontFamily->"Times New Roman",
  FontWeight->"Bold",
  FontColor->RGBColor[1, 0, 1]]], "Text"],

Cell[BoxData[{
    \(\(f[x_]\  = \ 
        x\^4 - x\^3 - 3\ x\^2 + 5\ x - 2;\)\ \ \), "\[IndentingNewLine]", 
    \(\(Print["\<f[x] = \>", f[x]\ ];\)\ \ \), "\[IndentingNewLine]", 
    \(\(Print["\<We know that\>"];\)\ \), "\[IndentingNewLine]", 
    \(\(Print["\<f[x] = \>", Factor[f[x]]];\)\ \ \), "\[IndentingNewLine]", 
    \(\(Print["\<We investigate various iterative 'Newton' methods to find \
the double root\>"];\)\), "\[IndentingNewLine]", 
    \(\(Print["\<For approximating the double root  p = 1.\>"];\)\)}], "Input"],

Cell[TextData[StyleBox["First, we will compute the iterations for each \
method, and afterward a table comparing the methods is given.  For the method \
C, all the iterations in the linear search are included.  ",
  FontFamily->"Times New Roman"]], "Text"],

Cell[TextData[StyleBox["Using formula (2), the standard Newton-Raphson \
method.  ",
  FontFamily->"Times New Roman"]], "Text"],

Cell[BoxData[
    \(NewtonRaphson[1.3, 28]\)], "Input"],

Cell[TextData[{
  StyleBox["Using formula (9) Method A, the accelerated Newton-Raphson method \
with  ",
    FontFamily->"Times New Roman"],
  StyleBox["m=3",
    FontFamily->"Courier New"],
  StyleBox[".  ",
    FontFamily->"Times New Roman"]
}], "Text"],

Cell[BoxData[
    \(NewtonRaphsonAccelerate[1.3, 3, 3]\)], "Input"],

Cell[TextData[{
  StyleBox["Using formula (11) Method B, the ",
    FontFamily->"Times New Roman"],
  StyleBox["modified Newton-Raphson method. ",
    FontFamily->"Times New Roman"]
}], "Text"],

Cell[BoxData[
    \(NewtonRaphsonModified[1.3, 3]\)], "Input"],

Cell[TextData[StyleBox["Using formula (13) Method C, the adaptive \
Newton-Raphson method. ",
  FontFamily->"Times New Roman"]], "Text"],

Cell[TextData[{
  StyleBox["The details for obtaining  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      RowBox[{\(p\_1\), ",", 
        RowBox[{\(p\_2\), "  ", 
          StyleBox["and",
            FontFamily->"Times New Roman",
            FontSize->12,
            FontWeight->"Plain",
            FontSlant->"Plain",
            FontColor->GrayLevel[0],
            FontVariations->{"Underline"->False,
            "StrikeThrough"->False}], "  ", \(p\_3\)}]}]]],
  " are:"
}], "Text"],

Cell[BoxData[{
    \(\(P\_0\  = \ 1.3;\)\), "\[IndentingNewLine]", 
    \(\(For[k = 0, 
        k \[LessEqual] 4, \(k++\), \[IndentingNewLine]P\_k\  = \ 
          P\_0\  - k\ f[P\_0]\/\(f'\)[P\_0]; \[IndentingNewLine]If[k > 0, 
          Print["\< p\>"\_k, \*"\"\< =  \!\(p\_0\) - \>\"", 
            k, \*"\"\<\!\(f[p\_0]\/\(f'\)[p\_0]\)\>\""]]; \ \
\[IndentingNewLine]Print["\< p\>"\_k, "\< = \>", 
          PaddedForm[P\_k, {16, 15}], "\<,   f[\>", "\<p\>"\_k, "\<] = \>", 
          NumberForm[f[P\_k], 16]\ ];\ ];\)\)}], "Input"],

Cell[TextData[{
  StyleBox["Since  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(\(\(|\)\(f[p\_4]\  > f[p\_3]\)\)\)]],
  "  we reject  ",
  Cell[BoxData[
      \(p\_4\)]],
  "  and set  ",
  Cell[BoxData[
      \(p\_0\  = \ p\_3\)]],
  "  and continue the iteration using formula (13).  The subroutine makes all \
these choices automatically. \n\t\t",
  Cell[GraphicsData["PostScript", "\<\
%!
%%Creator: Mathematica
%%AspectRatio: .61803 
MathPictureStart
/Mabs {
Mgmatrix idtransform
Mtmatrix dtransform
} bind def
/Mabsadd { Mabs
3 -1 roll add
3 1 roll add
exch } bind def
%% Graphics
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 10  scalefont  setfont
% Scaling calculations
-1.50943 1.88679 0.115567 5.02467 [
[.18868 .10307 -9 -9 ]
[.18868 .10307 9 0 ]
[.37736 .10307 -3 -9 ]
[.37736 .10307 3 0 ]
[.56604 .10307 -9 -9 ]
[.56604 .10307 9 0 ]
[.75472 .10307 -9 -9 ]
[.75472 .10307 9 0 ]
[.9434 .10307 -9 -9 ]
[.9434 .10307 9 0 ]
[-0.0125 .01507 -30 -4.5 ]
[-0.0125 .01507 0 4.5 ]
[-0.0125 .21606 -24 -4.5 ]
[-0.0125 .21606 0 4.5 ]
[-0.0125 .31655 -24 -4.5 ]
[-0.0125 .31655 0 4.5 ]
[-0.0125 .41705 -24 -4.5 ]
[-0.0125 .41705 0 4.5 ]
[-0.0125 .51754 -24 -4.5 ]
[-0.0125 .51754 0 4.5 ]
[-0.0125 .61803 -18 -4.5 ]
[-0.0125 .61803 0 4.5 ]
[ 0 0 0 0 ]
[ 1 .61803 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
0 g
.25 Mabswid
[ ] 0 setdash
.18868 .11557 m
.18868 .12182 L
s
[(0.9)] .18868 .10307 0 1 Mshowa
.37736 .11557 m
.37736 .12182 L
s
[(1)] .37736 .10307 0 1 Mshowa
.56604 .11557 m
.56604 .12182 L
s
[(1.1)] .56604 .10307 0 1 Mshowa
.75472 .11557 m
.75472 .12182 L
s
[(1.2)] .75472 .10307 0 1 Mshowa
.9434 .11557 m
.9434 .12182 L
s
[(1.3)] .9434 .10307 0 1 Mshowa
.125 Mabswid
.03774 .11557 m
.03774 .11932 L
s
.07547 .11557 m
.07547 .11932 L
s
.11321 .11557 m
.11321 .11932 L
s
.15094 .11557 m
.15094 .11932 L
s
.22642 .11557 m
.22642 .11932 L
s
.26415 .11557 m
.26415 .11932 L
s
.30189 .11557 m
.30189 .11932 L
s
.33962 .11557 m
.33962 .11932 L
s
.41509 .11557 m
.41509 .11932 L
s
.45283 .11557 m
.45283 .11932 L
s
.49057 .11557 m
.49057 .11932 L
s
.5283 .11557 m
.5283 .11932 L
s
.60377 .11557 m
.60377 .11932 L
s
.64151 .11557 m
.64151 .11932 L
s
.67925 .11557 m
.67925 .11932 L
s
.71698 .11557 m
.71698 .11932 L
s
.79245 .11557 m
.79245 .11932 L
s
.83019 .11557 m
.83019 .11932 L
s
.86792 .11557 m
.86792 .11932 L
s
.90566 .11557 m
.90566 .11932 L
s
.98113 .11557 m
.98113 .11932 L
s
.25 Mabswid
0 .11557 m
1 .11557 L
s
0 .01507 m
.00625 .01507 L
s
[(-0.02)] -0.0125 .01507 1 0 Mshowa
0 .21606 m
.00625 .21606 L
s
[(0.02)] -0.0125 .21606 1 0 Mshowa
0 .31655 m
.00625 .31655 L
s
[(0.04)] -0.0125 .31655 1 0 Mshowa
0 .41705 m
.00625 .41705 L
s
[(0.06)] -0.0125 .41705 1 0 Mshowa
0 .51754 m
.00625 .51754 L
s
[(0.08)] -0.0125 .51754 1 0 Mshowa
0 .61803 m
.00625 .61803 L
s
[(0.1)] -0.0125 .61803 1 0 Mshowa
.125 Mabswid
0 .0402 m
.00375 .0402 L
s
0 .06532 m
.00375 .06532 L
s
0 .09044 m
.00375 .09044 L
s
0 .14069 m
.00375 .14069 L
s
0 .16581 m
.00375 .16581 L
s
0 .19094 m
.00375 .19094 L
s
0 .24118 m
.00375 .24118 L
s
0 .26631 m
.00375 .26631 L
s
0 .29143 m
.00375 .29143 L
s
0 .34168 m
.00375 .34168 L
s
0 .3668 m
.00375 .3668 L
s
0 .39192 m
.00375 .39192 L
s
0 .44217 m
.00375 .44217 L
s
0 .46729 m
.00375 .46729 L
s
0 .49242 m
.00375 .49242 L
s
0 .54266 m
.00375 .54266 L
s
0 .56779 m
.00375 .56779 L
s
0 .59291 m
.00375 .59291 L
s
.25 Mabswid
0 0 m
0 .61803 L
s
0 0 m
1 0 L
1 .61803 L
0 .61803 L
closepath
clip
newpath
1 0 1 r
.5 Mabswid
0 .00186 m
.0153 .01587 L
.06746 .05243 L
.11767 .07807 L
.14511 .08861 L
.17104 .09658 L
.19677 .10277 L
.22051 .10715 L
.24462 .11044 L
.25834 .11186 L
.27118 .11293 L
.28455 .1138 L
.29726 .11443 L
.30866 .11485 L
.32111 .11517 L
.32795 .1153 L
.3344 .11539 L
.34019 .11545 L
.34645 .1155 L
.34971 .11552 L
.35329 .11554 L
.35509 .11554 L
.35702 .11555 L
.35869 .11555 L
.36051 .11556 L
.36232 .11556 L
.36399 .11556 L
.36559 .11556 L
.36728 .11557 L
.36879 .11557 L
.37022 .11557 L
.37177 .11557 L
.37345 .11557 L
.37492 .11557 L
.37652 .11557 L
.37802 .11557 L
.37941 .11557 L
.38103 .11557 L
.38185 .11557 L
.38275 .11557 L
.38431 .11557 L
.38578 .11557 L
.38668 .11557 L
.38754 .11557 L
.38915 .11557 L
.39088 .11557 L
.39276 .11558 L
.39613 .11558 L
.39926 .11559 L
.40282 .1156 L
Mistroke
.40617 .11562 L
.41242 .11566 L
.41593 .1157 L
.41916 .11573 L
.42643 .11583 L
.4325 .11595 L
.439 .1161 L
.45072 .11646 L
.46466 .11708 L
.47735 .11785 L
.49015 .11885 L
.50197 .12001 L
.52872 .12356 L
.55281 .12806 L
.57936 .13472 L
.60432 .14286 L
.6312 .15392 L
.65655 .16681 L
.68424 .18394 L
.73533 .22502 L
.78763 .28178 L
.83798 .35274 L
.89148 .44824 L
.94304 .56239 L
Mfstroke
.94304 .56239 m
.96383 .61803 L
s
.025 w
.9434 .56327 Mdot
0 0 1 r
.76027 .25008 Mdot
1 0 0 r
.57714 .13409 Mdot
0 1 0 r
.39401 .11558 Mdot
1 .5 0 r
.21088 .10552 Mdot
0 0 1 r
.5 Mabswid
.9434 .56327 m
.76027 .11557 L
s
1 0 0 r
.9434 .56327 m
.57714 .11557 L
s
0 1 0 r
.9434 .56327 m
.39401 .11557 L
s
1 .5 0 r
.9434 .56327 m
.21088 .11557 L
s
1 0 1 r
.008 w
.9434 .09547 m
.9434 .13567 L
s
0 0 1 r
.76027 .09547 m
.76027 .13567 L
s
1 0 0 r
.57714 .09547 m
.57714 .13567 L
s
0 1 0 r
.39401 .09547 m
.39401 .13567 L
s
1 .5 0 r
.21088 .09547 m
.21088 .13567 L
s
% End of Graphics
MathPictureEnd
\
\>"], "Graphics",
    ImageSize->{288, 177.938},
    ImageMargins->{{0, 0}, {0, 0}},
    ImageRegion->{{0, 1}, {0, 1}},
    ImageCache->GraphicsData["Bitmap", "\<\
CF5dJ6E]HGAYHf4PAg9QL6QYHg<PAVmbKF5d0`40004P0000/B000`400?l00000o`00003oo`3ooolQ
0?ooo`00o`3ooolQ0?ooo`00o`3ooolQ0?ooo`00o`3ooolQ0?ooo`00o`3ooolQ0?ooo`00o`3ooolQ
0?ooo`00o`3ooolQ0?ooo`00o`3ooolQ0?ooo`008@3oool00`3o0?l0oooo0?ooo`3l0?ooo`008@3o
ool00`000000o`3o0?ooo`3l0?ooo`00203oool2000000@0oooo0P0000040?ooo`8000000`3oool4
000000@0oooo00<000000?ooo`3o0?l0o03oool000L0oooo00@000000?ooo`3oool00000203oool0
10000000oooo0?ooo`0000020?ooo`030000003oool0oooo00D0oooo00@000000?ooo`3oool0o`3o
n`3oool000L0oooo00@000000?ooo`3oool00000203oool010000000oooo0?ooo`0000030?ooo`03
0000003oool0oooo00@0oooo0P0000020?ooo`030?l0o`3oool0oooo0?P0oooo00000`3oool00000
0000000200000080oooo00@000000?ooo`3oool00000203oool010000000oooo0?ooo`0000040?oo
o`030000003oool0oooo00<0oooo00<000000?ooo`3oool00P3oool20?l0ooP0oooo00070?ooo`04
0000003oool0oooo000000P0oooo00@000000?ooo`3oool000000P3oool010000000oooo0?ooo`00
00040?ooo`030000003oool0oooo00@0oooo00<0o`3o0?ooo`3oool0m@3oool000P0oooo0P00000:
0?ooo`800000103oool2000000D0oooo00<000000?ooo`3oool01@3oool20?l0ooD0oooo000Q0?oo
o`030000003oool0oooo00L0oooo00<0o`3o0?ooo`3oool0lP3oool00240oooo00<000000?ooo`3o
ool0203oool00`3o0?l0oooo0?ooo`3a0?ooo`008@3oool2000000X0oooo0P3o0?oa0?ooo`008@3o
ool00`000000oooo0?ooo`0;0?ooo`030?l0o`3oool0oooo0>h0oooo000Q0?ooo`030000003oool0
oooo00`0oooo0P3o0?o^0?ooo`008@3oool00`000000oooo0?ooo`0>0?ooo`80o`3ok03oool00240
oooo00<000000?ooo`3oool0403oool20?l0onX0oooo000Q0?ooo`030000003oool0oooo0180oooo
0P3o0?oX0?ooo`008@3oool2000001D0oooo0P3o0?oV0?ooo`008@3oool00`000000oooo0?ooo`0F
0?ooo`80o`3oi03oool00240oooo00<000000?ooo`3oool0603oool20?l0o``0oooo0P0000040?oo
o`8000000`3oool3000002H0oooo1@00000U0?ooo`D000000P3oool2000000<0oooo1@00000O0?oo
o`D000000P3oool2000000<0oooo1000000P0?ooo`D000000P3oool2000000@0oooo0P0000090?oo
o`008@3oool00`000000oooo0?ooo`0J0?ooo`<0o`3o203oool010000000oooo0?ooo`00000:0?oo
o`030000003oool0oooo02H0oooo00<000000?ooo`3oool09`3oool00`000000oooo0?ooo`090?oo
o`030000003oool0oooo0240oooo00<000000?ooo`3oool01`3oool00`000000oooo0?ooo`0S0?oo
o`030000003oool0oooo00L0oooo00@000000?ooo`3oool00000203oool00240oooo00<000000?oo
o`3oool07@3oool20?l0o`H0oooo00@000000?ooo`3oool000002@3oool3000002L0oooo00<00000
0?ooo`3oool09`3oool00`000000oooo0?ooo`090?ooo`030000003oool0oooo0240oooo00<00000
0?ooo`3oool0203oool00`000000oooo0?ooo`0R0?ooo`030000003oool0oooo00T0oooo00<00000
0?ooo`3oool01`3oool00240oooo00<000000?ooo`3oool07`3oool20?l0o`@0oooo00@000000?oo
o`3oool00000203oool010000000oooo0?ooo`00000W0?ooo`030000003oool0oooo02L0oooo00<0
00000?ooo`3oool02@3oool00`000000oooo0?ooo`0Q0?ooo`030000003oool0oooo00T0oooo00<0
00000?ooo`3oool08@3oool00`000000oooo0?ooo`0:0?ooo`030000003oool0oooo00H0oooo000Q
0?ooo`030000003oool0oooo0240oooo0`3o0?l01@3oool000000?ooo`3oool0000000P0oooo00@0
00000?ooo`3oool000009`3oool00`000000oooo0?ooo`0W0?ooo`030000003oool0oooo00T0oooo
00<000000?ooo`3oool08@3oool00`000000oooo0?ooo`070?ooo`040000003oool0oooo00000280
oooo00<000000?ooo`3oool01`3oool010000000oooo0?ooo`0000080?ooo`008@3oool2000002D0
oooo0`3o0?l00`000000oooo0?ooo`080?ooo`<000009P3oool2000002P0oooo0P00000:0?ooo`80
00008P3oool2000000X0oooo0P00000R0?ooo`8000002P3oool2000000T0oooo000Q0?ooo`030000
003oool0oooo02L0oooo0`3o0?l70?ooo`<0ogl0;03oool2003o02`0oooo0P3o000]0?ooo`80003o
;03oool20?l0o`l0oooo000Q0?ooo`030000003oool0oooo02X0oooo103o0?l30?ooo`@0ogl0:`3o
ool2003o02`0oooo0P3o000]0?ooo`80003o;03oool20?l0o`l0oooo000Q0?ooo`030000003oool0
oooo02h0oooo0P3o0?l60?mo02X0oooo0P00o`0/0?ooo`80o`00;@3oool20000ob`0oooo0P3o0?l?
0?ooo`008@3oool00`000000oooo0?ooo`0`0?ooo`H0ogl00P3o0?lX0?ooo`800?l0;03oool20?l0
02d0oooo0P000?l/0?ooo`80o`3o3`3oool00240oooo00<000000?ooo`3oool0<@3oool40?mo00<0
oooo303o0?lK0?ooo`@00?l0:`3oool20?l002d0oooo0P000?l/0?ooo`80o`3o3`3oool00240oooo
=00000030?mo010000006P3o0?l6003o0140o`3o6@0000020?l002d000000P000?l/00000080o`3o
3`0000000240oooo00<000000?ooo`3oool01P3oool00`000000oooo0?ooo`070?ooo`030000003o
ool0oooo00H0oooo00<000000?ooo`3oool01`3oool00`000000oooo0?ooo`070?ooo`040000003o
ool0oooo0?ooo`@0ogl000<0oooo0000003oool0203oool00`000000oooo0?ooo`060?ooo`030000
003oool0oooo00L0oooo00<000000?ooo`3oool01P3oool00`000000oooo003o0005003o0080oooo
00<000000?ooo`3oool01`3oool00`000000oooo0?ooo`020?ooo`/0o`3o0`3oool00`000000oooo
0?ooo`060?ooo`030000003oool0o`000080o`001@3oool00`000000oooo0?ooo`070?ooo`030000
003oool0oooo00H0oooo00<000000?ooo`3oool01`3oool00`000000oooo0?ooo`060?ooo`030000
00000?l0003o00L0oooo00<000000?ooo`3oool01P3oool00`000000oooo0?ooo`070?ooo`030000
003oool0oooo00L0oooo00<000000?ooo`3oool01@3oool20?l0o`T0oooo00<000000?ooo`3oool0
0`3oool00240oooo00<000000?ooo`3oool0;@3oool010000000oooo0?ooo`3oool20?mo0080oooo
0P3oO`0U0?ooo`030000003oool0oooo00H00?l06`3oool60?l0o`H0oooo00<000000?ooo`3o0000
0`3o000Z0?ooo`04000000000?l0003o0000ob/0oooo0P3o0?l?0?ooo`008@3oool00`000000oooo
0?ooo`0a0?ooo`80ogl0103oool00`3oO`00oooo0?ooo`0V0?ooo`800?l00`3oool00`00o`00oooo
0?ooo`0N0?ooo`D0o`3o0`3oool40?l002/0oooo0`000?l[0?ooo`80o`3o3`3oool00240oooo00<0
00000?ooo`3oool0<@3oool20?mo00D0oooo0P3oO`0V0?ooo`800?l0103oool00`00o`00oooo0?oo
o`0R0?ooo`80o`3o1P3o000Z0?ooo`80003o00<0oooo0000o`3oool0:@3oool20?l0o`l0oooo000Q
0?ooo`030000003oool0oooo0340oooo0P3oO`070?ooo`030?mo003oool0oooo02<0oooo0P00o`05
0?ooo`03003o003oool0oooo02<0oooo1`3o000Y0?ooo`80003o00<0oooo0000o`3oool0:@3oool2
0?l0o`l0oooo000Q0?ooo`800000<P3oool20?mo00P0oooo0P3oO`0S0?ooo`800?l01P3oool00`00
o`00oooo0?ooo`0S0?ooo`@0o`000P3o0?l00`3o0000oooo0?ooo`0V0?ooo`80003o00<0oooo0000
o`3oool0:@3oool20?l0o`l0oooo000Q0?ooo`030000003oool0oooo03d0oooo0P3oO`0Z0?ooo`80
0?l0903oool20?l000@0oooo00<0o`000?l0o`3o0?l0:@3oool00`000?l0oooo0?ooo`0h0?ooo`00
8@3oool00`000000oooo0?ooo`0o0?ooo`030?mo003oool0oooo02T0oooo00<00?l00?ooo`3oool0
:03oool0103o0000oooo0?l0o`3o0?lW0?ooo`030000o`3oool0oooo03P0oooo000Q0?ooo`030000
003oool0oooo0400oooo0P3oO`0Z0?ooo`03003o003oool0oooo02L0oooo00@0o`000?ooo`3oool0
oooo0P3o0?lV0?ooo`030000o`3oool0oooo03L0oooo000Q0?ooo`030000003oool0oooo0480oooo
0P3oO`0Y0?ooo`03003o003oool0oooo02L0oooo00<0o`000?ooo`3oool00P3oool20?l0ob@0oooo
00<0003o0?ooo`3oool0=`3oool00240oooo00<000000?ooo`3oool0A03oool00`3oO`00oooo0?oo
o`0W0?ooo`800?l0:03oool00`3o0000oooo0?ooo`030?ooo`80o`3o8P3oool00`000?l0oooo0?oo
o`0g0?ooo`008@3oool00`000000oooo0?ooo`150?ooo`80ogl0:@3oool00`00o`00oooo0?ooo`0V
0?ooo`030?l0003oool0oooo00@0oooo0P3o0?lQ0?ooo`030000o`3oool0oooo03H0oooo000Q0?oo
o`800000B03oool20?mo02P0oooo00<00?l00?ooo`3oool09P3oool00`3o0000oooo0?ooo`050?oo
o`80o`3o7`3oool00`000?l0oooo0?ooo`0f0?ooo`008@3oool00`000000oooo0?ooo`190?ooo`03
0?mo003oool0oooo02H0oooo00<00?l00?ooo`3oool09@3oool00`3o0000oooo0?ooo`070?ooo`80
o`3o7P3oool00`000?l0oooo0?ooo`0e0?ooo`008@3oool00`000000oooo0?ooo`1:0?ooo`80ogl0
9`3oool00`00o`00oooo0?ooo`0U0?ooo`030?l0003oool0oooo00P0oooo0P3o0?lL0?ooo`030000
o`3oool0oooo03D0oooo000Q0?ooo`030000003oool0oooo04`0oooo00<0ogl00?ooo`3oool09@3o
ool2003o02H0oooo00<0o`000?ooo`3oool02@3oool20?l0oaX0oooo00<0003o0?ooo`3oool0=@3o
ool00240oooo00<000000?ooo`3oool0C@3oool20?mo02L0oooo00<00?l00?ooo`3oool0903oool0
0`3o0000oooo0?ooo`0:0?ooo`030?l0o`3oool0oooo01P0oooo00<0003o0?ooo`3oool0=03oool0
0240oooo00<000000?ooo`3oool0C`3oool20?mo02H0oooo00<00?l00?ooo`3oool0903oool00`3o
0000oooo0?ooo`0:0?ooo`030?l0o`3oool0oooo01L0oooo00<0003o0?ooo`3oool0=03oool00240
oooo0P00001B0?ooo`030?mo003oool0oooo02@0oooo00<00?l00?ooo`3oool08`3oool00`3o0000
oooo0?ooo`0;0?ooo`030?l0o`3oool0oooo01L0oooo00<0003o0?ooo`3oool0<`3oool00240oooo
00<000000?ooo`3oool0DP3oool20?mo02D0oooo00<00?l00?ooo`3oool08`3oool00`3o0000oooo
0?ooo`0;0?ooo`80o`3o5`3oool00`000?l0oooo0?ooo`0c0?ooo`008@3oool00`000000oooo0?oo
o`1D0?ooo`80ogl0903oool2003o02@0oooo00<0o`000?ooo`3oool0303oool00`3o0?l0oooo0?oo
o`0D0?ooo`030000o`3oool0oooo03<0oooo000Q0?ooo`030000003oool0oooo05H0oooo00<0ogl0
0?ooo`3oool08`3oool00`00o`00oooo0?ooo`0R0?ooo`030?l0003oool0oooo00`0oooo00<0o`3o
0?ooo`3oool0503oool00`000?l0oooo0?ooo`0b0?ooo`008@3oool00`000000oooo0?ooo`1G0?oo
o`80ogl0903oool00`00o`00oooo0?ooo`0R0?ooo`030?l0003oool0oooo00`0oooo00<0o`3o0?oo
o`3oool04`3oool00`000?l0oooo0?ooo`0b0?ooo`00203oool2000000@0oooo0P0000040?ooo`80
00000`3oool4000000@0oooo00<000000?ooo`3oool0F@3oool00`3oO`00oooo0?ooo`0R0?ooo`03
003o003oool0oooo0280oooo00<0o`000?ooo`3oool0303oool00`3o0?l0oooo0?ooo`0C0?ooo`03
0000o`3oool0oooo0340oooo00070?ooo`040000003oool0oooo000000P0oooo00@000000?ooo`3o
ool000000P3oool00`000000oooo0?ooo`050?ooo`030000003oool0oooo05X0oooo0P3oO`0S0?oo
o`800?l08P3oool00`3o0000oooo0?ooo`0=0?ooo`80o`3o4`3oool00`000?l0oooo0?ooo`0a0?oo
o`001`3oool010000000oooo0?ooo`0000080?ooo`040000003oool0oooo000000<0oooo00<00000
0?ooo`3oool0103oool2000005d0oooo0P3oO`0S0?ooo`03003o003oool0oooo0200oooo00<0o`00
0?ooo`3oool03P3oool00`3o0?l0oooo0?ooo`0@0?ooo`030000o`3oool0oooo0340oooo00070?oo
o`040000003oool0oooo000000P0oooo00@000000?ooo`3oool00000103oool00`000000oooo0?oo
o`030?ooo`030000003oool0oooo05h0oooo00<0ogl00?ooo`3oool08@3oool00`00o`00oooo0?oo
o`0P0?ooo`030?l0003oool0oooo00h0oooo00<0o`3o0?ooo`3oool0403oool00`000?l0oooo0?oo
o`0`0?ooo`001`3oool010000000oooo0?ooo`0000080?ooo`040000003oool0oooo00000080oooo
00@000000?ooo`3oool00000103oool00`000000oooo0?ooo`1O0?ooo`80ogl08P3oool00`00o`00
oooo0?ooo`0P0?ooo`030?l0003oool0oooo00h0oooo00<0o`3o0?ooo`3oool03`3oool00`000?l0
oooo0?ooo`0`0?ooo`00203oool2000000X0oooo0P0000040?ooo`8000001@3oool00`000000oooo
0?ooo`1Q0?ooo`80ogl08@3oool00`00o`00oooo0?ooo`0P0?ooo`030?l0003oool0oooo00h0oooo
00<0o`3o0?ooo`3oool03`3oool00`000?l0oooo0?ooo`0_0?ooo`008@3oool00`000000oooo0?oo
o`1S0?ooo`030?mo003oool0oooo01l0oooo0P00o`0P0?ooo`030?l0003oool0oooo00l0oooo00<0
o`3o0?ooo`3oool03P3oool00`000?l0oooo0?ooo`0_0?ooo`008@3oool00`000000oooo0?ooo`1T
0?ooo`80ogl08@3oool00`00o`00oooo0?ooo`0N0?ooo`030?l0003oool0oooo00l0oooo00<0o`3o
0?ooo`3oool03P3oool00`000?l0oooo0?ooo`0^0?ooo`008@3oool2000006L0oooo0P3oO`0P0?oo
o`03003o003oool0oooo01h0oooo00<0o`000?ooo`3oool03`3oool0103o0?l0oooo0000o`000?l<
0?ooo`030000o`3oool0oooo02h0oooo000Q0?ooo`030000003oool0oooo06P0oooo00<0ogl00?oo
o`3oool07P3oool00`00o`00oooo0?ooo`0N0?ooo`030?l0003oool0oooo00l0oooo10000?l;0?oo
o`030000o`3oool0oooo02h0oooo000Q0?ooo`030000003oool0oooo06T0oooo0P3oO`0O0?ooo`80
0?l07`3oool00`3o0000oooo0?ooo`0=0?ooo`H0003o2`3oool00`000?l0oooo0?ooo`0]0?ooo`00
8@3oool00`000000oooo0?ooo`1[0?ooo`030?mo003oool0oooo01h0oooo00<00?l00?ooo`3oool0
7@3oool00`3o0000oooo0?ooo`0<0?ooo`H0003o2`3oool00`000?l0oooo0?ooo`0]0?ooo`008@3o
ool00`000000oooo0?ooo`1/0?ooo`80ogl07`3oool00`00o`00oooo0?ooo`0L0?ooo`030?l0003o
ool0oooo00d0oooo10000?l=0?ooo`030000o`3oool0oooo02`0oooo000Q0?ooo`030000003oool0
oooo06h0oooo0P3oO`0N0?ooo`03003o003oool0oooo01`0oooo00<0o`000?ooo`3oool03@3oool2
0000o`030?ooo`3o0?l0oooo00/0oooo00<0003o0?ooo`3oool0;03oool00240oooo0P00001a0?oo
o`030?mo003oool0oooo01`0oooo00<00?l00?ooo`3oool0703oool00`3o0000oooo0?ooo`0@0?oo
o`030?l0o`3oool0oooo00T0oooo00<0003o0?ooo`3oool0;03oool00240oooo00<000000?ooo`3o
ool0L@3oool20?mo01d0oooo0P00o`0M0?ooo`030?l0003oool0oooo0100oooo00<0o`3o0?ooo`3o
ool02@3oool00`000?l0oooo0?ooo`0[0?ooo`008@3oool00`000000oooo0?ooo`1c0?ooo`80ogl0
7@3oool00`00o`00oooo0?ooo`0K0?ooo`030?l0003oool0oooo0100oooo00<0o`3o0?ooo`3oool0
203oool00`000?l0oooo0?ooo`0[0?ooo`008@3oool00`000000oooo0?ooo`1e0?ooo`030?mo003o
ool0oooo01/0oooo00<00?l00?ooo`3oool06P3oool00`3o0000oooo0?ooo`0A0?ooo`030?l0o`3o
ool0oooo00P0oooo00<0003o0?ooo`3oool0:P3oool00240oooo00<000000?ooo`3oool0MP3oool2
0?mo01`0oooo00<00?l00?ooo`3oool06P3oool00`3o0000oooo0?ooo`0A0?ooo`030?l0o`3oool0
oooo00L0oooo00<0003o0?ooo`3oool0:P3oool00240oooo00<000000?ooo`3oool0N03oool00`3o
O`00oooo0?ooo`0J0?ooo`800?l06`3oool00`3o0000oooo0?ooo`0A0?ooo`030?l0o`3oool0oooo
00H0oooo00<0003o0?ooo`3oool0:P3oool00240oooo00<000000?ooo`3oool0N@3oool20?mo01`0
oooo00<00?l00?ooo`3oool06@3oool00`3o0000oooo0?ooo`0@0?ooo`030?l0o`3oool0oooo00L0
oooo00<0003o0?ooo`3oool0:@3oool00240oooo0P00001l0?ooo`80ogl06`3oool00`00o`00oooo
0?ooo`0I0?ooo`030?l0003oool0oooo0100oooo00<0o`3o0?ooo`3oool01P3oool00`000?l0oooo
0?ooo`0Y0?ooo`008@3oool00`000000oooo0?ooo`1m0?ooo`030?mo003oool0oooo01T0oooo00<0
0?l00?ooo`3oool06@3oool00`3o0000oooo0?ooo`0@0?ooo`030?l0o`3oool0oooo00H0oooo00<0
003o0?ooo`3oool0:03oool00240oooo00<000000?ooo`3oool0OP3oool20?mo01X0oooo00<00?l0
0?ooo`3oool0603oool00`3o0000oooo0?ooo`0@0?ooo`030?l0o`3oool0oooo00H0oooo00<0003o
0?ooo`3oool0:03oool00240oooo00<000000?ooo`3oool0P03oool20?mo01T0oooo0P00o`0I0?oo
o`030?l0003oool0oooo0100oooo00<0o`3o0?ooo`3oool01@3oool00`000?l0oooo0?ooo`0X0?oo
o`00203oool2000000@0oooo0P0000040?ooo`8000001@3oool3000000<0oooo00<000000?ooo`3o
ool0PP3oool00`3oO`00oooo0?ooo`0H0?ooo`03003o003oool0oooo01L0oooo00<0o`000?ooo`3o
ool0403oool00`3o0?l0oooo0?ooo`050?ooo`030000o`3oool0oooo02L0oooo00070?ooo`040000
003oool0oooo000000P0oooo00@000000?ooo`3oool000001@3oool00`000000oooo0?ooo`020?oo
o`030000003oool0oooo08<0oooo0P3oO`0I0?ooo`03003o003oool0oooo01L0oooo00<0o`000?oo
o`3oool03`3oool00`3o0?l0oooo0?ooo`050?ooo`030000o`3oool0oooo02L0oooo00070?ooo`04
0000003oool0oooo000000P0oooo00@000000?ooo`3oool000000P3oool5000000<0oooo0P000026
0?ooo`80ogl0603oool00`00o`00oooo0?ooo`0G0?ooo`030?l0003oool0oooo00l0oooo00<0o`3o
0?ooo`3oool01@3oool00`000?l0oooo0?ooo`0V0?ooo`001`3oool010000000oooo0?ooo`000008
0?ooo`040000003oool0oooo00000080oooo00@000000?ooo`3oool00000103oool00`000000oooo
0?ooo`270?ooo`030?mo003oool0oooo01H0oooo0P00o`0G0?ooo`030?l0003oool0oooo0100oooo
00<0o`3o0?ooo`3oool0103oool00`000?l0oooo0?ooo`0V0?ooo`001`3oool010000000oooo0?oo
o`0000080?ooo`040000003oool0oooo000000<0oooo00<000000?ooo`000000103oool00`000000
oooo0?ooo`280?ooo`80ogl0603oool00`00o`00oooo0?ooo`0E0?ooo`030?l0003oool0oooo00l0
oooo00<0o`3o0?ooo`3oool0103oool00`000?l0oooo0?ooo`0V0?ooo`00203oool2000000X0oooo
0P0000050?ooo`800000103oool00`000000oooo0?ooo`2:0?ooo`030?mo003oool0oooo01H0oooo
00<00?l00?ooo`3oool05@3oool00`3o0000oooo0?ooo`0?0?ooo`030?l0o`3oool0oooo00@0oooo
00<0003o0?ooo`3oool09@3oool00240oooo00<000000?ooo`3oool0R`3oool20?mo01L0oooo00<0
0?l00?ooo`3oool05@3oool00`3o0000oooo0?ooo`0?0?ooo`030?l0o`3oool0oooo00<0oooo00<0
003o0?ooo`3oool09@3oool00240oooo00<000000?ooo`3oool0S@3oool20?mo01H0oooo00<00?l0
0?ooo`3oool05@3oool00`3o0000oooo0?ooo`0>0?ooo`030?l0o`3oool0oooo00@0oooo00<0003o
0?ooo`3oool0903oool00240oooo0P00002@0?ooo`030?mo003oool0oooo01@0oooo0P00o`0E0?oo
o`030?l0003oool0oooo00l0oooo00<0o`3o0?ooo`3oool00`3oool00`000?l0oooo0?ooo`0T0?oo
o`008@3oool00`000000oooo0?ooo`2@0?ooo`80ogl05P3oool00`00o`00oooo0?ooo`0C0?ooo`03
0?l0003oool0oooo00l0oooo00<0o`3o0?ooo`3oool00P3oool00`000?l0oooo0?ooo`0T0?ooo`00
8@3oool00`000000oooo0?ooo`2B0?ooo`80ogl05@3oool00`00o`00oooo0?ooo`0C0?ooo`030?l0
003oool0oooo00h0oooo00<0o`3o0?ooo`3oool00`3oool00`000?l0oooo0?ooo`0S0?ooo`008@3o
ool00`000000oooo0?ooo`2D0?ooo`030?mo003oool0oooo01<0oooo00<00?l00?ooo`3oool04`3o
ool00`3o0000oooo0?ooo`0>0?ooo`030?l0o`3oool0oooo0080oooo00<0003o0?ooo`3oool08`3o
ool00240oooo00<000000?ooo`3oool0U@3oool20?mo01@0oooo00<00?l00?ooo`3oool04`3oool0
0`3o0000oooo0?ooo`0>0?ooo`030?l0o`3oool0oooo0080oooo00<0003o0?ooo`3oool08P3oool0
0240oooo00<000000?ooo`3oool0U`3oool00`3oO`00oooo0?ooo`0B0?ooo`800?l0503oool00`3o
0000oooo0?ooo`0=0?ooo`030?l0o`3oool0oooo0080oooo00<0003o0?ooo`3oool08P3oool00240
oooo00<000000?ooo`3oool0V03oool20?mo01@0oooo00<00?l00?ooo`3oool04@3oool00`3o0000
oooo0?ooo`0>0?ooo`050?l0o`3oool0oooo0?ooo`000?l0903oool00240oooo0P00002K0?ooo`80
ogl04`3oool00`00o`00oooo0?ooo`0A0?ooo`030?l0003oool0oooo00d0oooo00<0o`3o0?ooo`3o
ool00P3oool00`000?l0oooo0?ooo`0Q0?ooo`008@3oool00`000000oooo0?ooo`2L0?ooo`030?mo
003oool0oooo0140oooo00<00?l00?ooo`3oool04@3oool00`3o0000oooo0?ooo`0=0?ooo`050?l0
o`3oool0oooo0?ooo`000?l08`3oool00240oooo00<000000?ooo`3oool0W@3oool20?mo0180oooo
0P00o`0B0?ooo`030?l0003oool0oooo00`0oooo00<0o`3o0?ooo`3oool00P3oool00`000?l0oooo
0?ooo`0P0?ooo`008@3oool00`000000oooo0?ooo`2O0?ooo`80ogl04P3oool00`00o`00oooo0?oo
o`0@0?ooo`030?l0003oool0oooo00`0oooo00D0o`3o0?ooo`3oool0oooo0000o`0R0?ooo`008@3o
ool00`000000oooo0?ooo`2Q0?ooo`030?mo003oool0oooo0100oooo00<00?l00?ooo`3oool03`3o
ool00`3o0000oooo0?ooo`0=0?ooo`040?l0o`3oool0oooo0000ob80oooo000Q0?ooo`030000003o
ool0oooo0:80oooo0P3oO`0A0?ooo`03003o003oool0oooo00l0oooo00<0o`000?ooo`3oool0303o
ool01@3o0?l0oooo0?ooo`3oool0003o0240oooo000Q0?ooo`800000Y@3oool20?mo0100oooo00<0
0?l00?ooo`3oool03`3oool00`3o0000oooo0?ooo`0<0?ooo`040?l0o`3oool0oooo0000ob40oooo
000Q0?ooo`030000003oool0oooo0:H0oooo00<0ogl00?ooo`3oool03P3oool2003o0100oooo00<0
o`000?ooo`3oool02`3oool01@3o0?l0oooo0?ooo`3oool0003o0200oooo000Q0?ooo`030000003o
ool0oooo0:L0oooo0P3oO`0@0?ooo`03003o003oool0oooo00h0oooo00<0o`000?ooo`3oool02`3o
ool0103o0?l0oooo0?ooo`000?lP0?ooo`008@3oool00`000000oooo0?ooo`2Y0?ooo`030?mo003o
ool0oooo00h0oooo00<00?l00?ooo`3oool03P3oool00`3o0000oooo0?ooo`0;0?ooo`030?l0o`3o
ool0003o0200oooo000Q0?ooo`030000003oool0oooo0:X0oooo0P3oO`0?0?ooo`03003o003oool0
oooo00d0oooo00<0o`000?ooo`3oool02`3oool0103o0?l0oooo0?ooo`000?lO0?ooo`00203oool2
000000@0oooo0P0000040?ooo`8000000`3oool3000000D0oooo00<000000?ooo`3oool0[03oool2
0?mo00h0oooo0P00o`0>0?ooo`030?l0003oool0oooo00/0oooo00<0o`3o0?ooo`000?l07`3oool0
00L0oooo00@000000?ooo`3oool00000203oool010000000oooo0?ooo`0000020?ooo`040000003o
ool0oooo000000@0oooo00<000000?ooo`3oool0[P3oool00`3oO`00oooo0?ooo`0=0?ooo`03003o
003oool0oooo00`0oooo00<0o`000?ooo`3oool02P3oool0103o0?l0oooo0?ooo`000?lN0?ooo`00
1`3oool010000000oooo0?ooo`0000080?ooo`040000003oool0oooo00000080oooo00@000000?oo
o`3oool00000103oool200000;00oooo0P3oO`0>0?ooo`03003o003oool0oooo00`0oooo00<0o`00
0?ooo`3oool02P3oool00`3o0?l0oooo0000o`0N0?ooo`001`3oool010000000oooo0?ooo`000008
0?ooo`040000003oool0oooo00000080oooo0`0000050?ooo`030000003oool0oooo0;40oooo0P3o
O`0=0?ooo`03003o003oool0oooo00`0oooo00<0o`000?ooo`3oool02@3oool00`3o0?l0oooo0000
o`0N0?ooo`001`3oool010000000oooo0?ooo`0000080?ooo`040000003oool0oooo000000<0oooo
00<000000?ooo`3oool0103oool00`000000oooo0?ooo`2c0?ooo`030?mo003oool0oooo00/0oooo
00<00?l00?ooo`3oool02`3oool00`3o0000oooo0?ooo`0:0?ooo`030?l0o`3oool0003o01d0oooo
00080?ooo`8000002P3oool2000000@0oooo0`0000040?ooo`030000003oool0oooo0;@0oooo0P3o
O`0<0?ooo`800?l0303oool00`3o0000oooo0?ooo`0:0?ooo`030?l0o`000?l0oooo01`0oooo000Q
0?ooo`030000003oool0oooo0;H0oooo00<0ogl00?ooo`3oool02`3oool00`00o`00oooo0?ooo`0:
0?ooo`030?l0003oool0oooo00T0oooo00<0o`3o0?ooo`000?l0703oool00240oooo00<000000?oo
o`3oool0]`3oool20?mo00`0oooo00<00?l00?ooo`3oool02P3oool00`3o0000oooo0?ooo`090?oo
o`030?l0o`000?l0oooo01/0oooo000Q0?ooo`800000^P3oool20?mo00/0oooo00<00?l00?ooo`3o
ool02P3oool00`3o0000oooo0?ooo`080?ooo`030?l0o`000?l0oooo01/0oooo000Q0?ooo`030000
003oool0oooo0;/0oooo00<0ogl00?ooo`3oool02@3oool2003o00/0oooo00<0o`000?ooo`3oool0
203oool00`3o0?l0003o0?ooo`0J0?ooo`008@3oool00`000000oooo0?ooo`2l0?ooo`80ogl02`3o
ool00`00o`00oooo0?ooo`080?ooo`030?l0003oool0oooo00P0oooo00<0o`3o0000o`3oool06P3o
ool00240oooo00<000000?ooo`3oool0_P3oool20?mo00X0oooo00<00?l00?ooo`3oool0203oool0
0`3o0000oooo0?ooo`080?ooo`030?l0o`000?l0oooo01T0oooo000Q0?ooo`030000003oool0oooo
0<00oooo00<0ogl00?ooo`3oool0203oool00`00o`00oooo0?ooo`080?ooo`030?l0003oool0oooo
00L0oooo00<0o`3o0000o`3oool06@3oool00240oooo00<000000?ooo`3oool0`@3oool20?mo00T0
oooo00<00?l00?ooo`3oool0203oool00`3o0000oooo0?ooo`070?ooo`030?l0o`000?l0oooo01P0
oooo000Q0?ooo`800000a03oool20?mo00P0oooo0P00o`090?ooo`030?l0003oool0oooo00H0oooo
00<0o`3o0000o`3oool0603oool00240oooo00<000000?ooo`3oool0a@3oool00`3oO`00oooo0?oo
o`070?ooo`03003o003oool0oooo00H0oooo00<0o`000?ooo`3oool01`3oool00`000?l0oooo0?oo
o`0G0?ooo`008@3oool00`000000oooo0?ooo`360?ooo`80ogl0203oool00`00o`00oooo0?ooo`06
0?ooo`030?l0003oool0oooo00H0oooo00<0o`3o0000o`3oool05`3oool00240oooo00<000000?oo
o`3oool0b03oool00`3oO`00oooo0?ooo`060?ooo`03003o003oool0oooo00H0oooo00<0o`000?oo
o`3oool01P3oool00`000?l0oooo0?ooo`0F0?ooo`008@3oool00`000000oooo0?ooo`390?ooo`80
ogl01`3oool2003o00L0oooo00<0o`000?ooo`3oool01@3oool00`3o0?l0003o0?ooo`0F0?ooo`00
8@3oool00`000000oooo0?ooo`3;0?ooo`80ogl01`3oool00`00o`00oooo0?ooo`050?ooo`030?l0
003oool0oooo00@0oooo00<0o`3o0000o`3oool05P3oool00240oooo00<000000?ooo`3oool0c@3o
ool00`3oO`00oooo0?ooo`050?ooo`03003o003oool0oooo00@0oooo00<0o`000?ooo`3oool01@3o
ool00`000?l0oooo0?ooo`0E0?ooo`008@3oool200000<l0oooo0P3oO`060?ooo`03003o003oool0
oooo00@0oooo00<0o`000?ooo`3oool0103oool00`3o0?l0003o0?ooo`0E0?ooo`008@3oool00`00
0000oooo0?ooo`3@0?ooo`80ogl01@3oool00`00o`00oooo0?ooo`040?ooo`030?l0003oool0oooo
00@0oooo00<0003o0?ooo`3oool0503oool00240oooo00<000000?ooo`3oool0dP3oool00`3oO`00
oooo0?ooo`030?ooo`800?l01@3oool00`3o0000oooo0?ooo`030?ooo`030?l0o`000?l0oooo01@0
oooo000Q0?ooo`030000003oool0oooo0=<0oooo0P3oO`050?ooo`03003o003oool0oooo00<0oooo
00<0o`000?ooo`3oool00`3oool00`000?l0oooo0?ooo`0C0?ooo`00203oool2000000@0oooo0P00
00040?ooo`800000103oool2000000D0oooo00<000000?ooo`3oool0e@3oool00`3oO`00oooo0?oo
o`030?ooo`03003o003oool0oooo00<0oooo00<0o`000?ooo`3oool00P3oool00`000?l0oooo0?oo
o`0C0?ooo`001`3oool010000000oooo0?ooo`0000080?ooo`040000003oool0oooo00000080oooo
00@000000?ooo`3oool00000103oool00`000000oooo0?ooo`3F0?ooo`80ogl0103oool00`00o`00
oooo0?ooo`020?ooo`030?l0003oool0oooo00<0oooo00<0003o0?ooo`3oool04P3oool000L0oooo
00@000000?ooo`3oool00000203oool010000000oooo0?ooo`0000020?ooo`040000003oool0oooo
000000@0oooo0P00003I0?ooo`80ogl00`3oool00`00o`00oooo0?ooo`020?ooo`030?l0003oool0
oooo0080oooo00<0003o0?ooo`3oool04P3oool000L0oooo00@000000?ooo`3oool00000203oool0
10000000oooo0?ooo`0000030?ooo`8000001@3oool00`000000oooo0?ooo`3J0?ooo`040?mo003o
ool0oooo0?ooo`800?l00`3oool00`3o0000oooo0?ooo`020?ooo`030000o`3oool0oooo0140oooo
00070?ooo`040000003oool0oooo000000P0oooo00@000000?ooo`3oool000000P3oool010000000
oooo0?ooo`0000040?ooo`030000003oool0oooo0=/0oooo0P3oO`030?ooo`05003o003oool0oooo
0?ooo`3o00000`3oool00`000?l0oooo0?ooo`0A0?ooo`00203oool2000000X0oooo0P0000040?oo
o`8000001@3oool00`000000oooo0?ooo`3M0?ooo`80ogl00P3oool01@00o`00oooo0?ooo`3oool0
o`000080oooo00<0003o0?ooo`3oool04@3oool00240oooo00<000000?ooo`3oool0g`3oool0103o
O`00oooo0?ooo`00o`020?ooo`050?l0003oool0oooo0?ooo`000?l04P3oool00240oooo00<00000
0?ooo`3oool0h03oool20?mo00050?ooo`00o`000?l00?ooo`3o00000P3oool00`000?l0oooo0?oo
o`0@0?ooo`008@3oool200000><0oooo0P3oO`00103oool00?l00?ooo`3o00020?ooo`030000o`3o
ool0oooo00l0oooo000Q0?ooo`030000003oool0oooo0>@0oooo00L0ogl00?ooo`00o`00oooo0?l0
003oool0003o0140oooo000Q0?ooo`030000003oool0oooo0>D0oooo0P3oO`001@00o`00oooo0?l0
00000?l0o`3o0100oooo000Q0?ooo`030000003oool0oooo0>L0oooo00D0ogl0003o003oool0o`00
0000o`020?l0o`h0oooo000Q0?ooo`030000003oool0oooo0>P0oooo0P3oO`000`00o`00003o0?l0
o`020?l0o`d0oooo000Q0?ooo`030000003oool0oooo0>X0oooo0P3oO`0010000?l0o`3o0?l0o`3o
0?l<0?ooo`008@3oool00`000000oooo0?ooo`3Z0?ooo`80o`3o00@0ogl00?l0o`3o0?l0o`3o303o
ool00240oooo0P00003/0?ooo`@0o`3o3@3oool00240oooo00<000000?ooo`3oool0k03oool20?l0
o`h0oooo000Q0?ooo`030000003oool0oooo0>d0oooo00<0o`3o0?ooo`3oool0303oool00240oooo
00<000000?ooo`3oool0kP3oool00`3o0?l0oooo0?ooo`0;0?ooo`008@3oool00`000000oooo0?oo
o`3^0?ooo`030?l0o`3oool0oooo00/0oooo000Q0?ooo`030000003oool0oooo0>h0oooo00<0o`3o
0?ooo`3oool02`3oool00240oooo0P00003`0?ooo`030?l0o`3oool0oooo00X0oooo000Q0?ooo`03
0000003oool0oooo0>l0oooo00<0o`3o0?ooo`3oool02P3oool00240oooo00<000000?ooo`3oool0
k`3oool00`3o0?l0oooo0?ooo`0:0?ooo`008@3oool00`000000oooo0?ooo`3`0?ooo`030?l0o`3o
ool0oooo00T0oooo000Q0?ooo`030000003oool0oooo0?00oooo00<0o`3o0?ooo`3oool02@3oool0
00h0oooo0P0000040?ooo`8000000`3oool5000000<0oooo00<000000?ooo`3oool0l03oool00`3o
0?l0oooo0?ooo`090?ooo`003@3oool010000000oooo0?ooo`00000:0?ooo`030000003oool0oooo
00<0oooo00<000000?ooo`3oool0l@3oool00`3o0?l0oooo0?ooo`080?ooo`003@3oool010000000
oooo0?ooo`00000:0?ooo`030000003oool0oooo00<0oooo0P00003b0?ooo`030?l0o`3oool0oooo
00P0oooo000=0?ooo`040000003oool0oooo000000X0oooo00<000000?ooo`3oool0o`3oool30?oo
o`003@3oool010000000oooo0?ooo`00000:0?ooo`030000003oool0oooo0?l0oooo0`3oool000h0
oooo0P00000:0?ooo`800000o`3oool50?ooo`00o`3ooolQ0?ooo`00o`3ooolQ0?ooo`00o`3ooolQ
0?ooo`00o`3ooolQ0?ooo`00o`3ooolQ0?ooo`00o`3ooolQ0?ooo`00o`3ooolQ0?ooo`00o`3ooolQ
0?ooo`00\
\>"],
    ImageRangeCache->{{{0, 287}, {176.938, 0}} -> {0, 0, 0, 0}}],
  "  "
}], "Text",
  Editable->False],

Cell[BoxData[
    \(NewtonRaphsonAdaptive[1.3, 6]\)], "Input"],

Cell[TextData[{
  StyleBox["Caveat.",
    FontWeight->"Bold",
    FontColor->RGBColor[1, 0, 0]],
  "  Another shortcoming of ",
  StyleBox[" Method A, the accelerated Newton-Raphson method is the wrong \
choice for  ",
    FontFamily->"Times New Roman"],
  StyleBox["m",
    FontFamily->"Courier New"],
  StyleBox[".  Suppose that one chose  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(m = 2\)]],
  "  instead of",
  StyleBox["  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(m = 3\)]],
  "?  Let's see what happens!"
}], "Text"],

Cell[BoxData[
    \(NewtonRaphsonAccelerate[1.3, 2, 20]\)], "Input"],

Cell[TextData[{
  "If the wrong choice ",
  StyleBox["for  ",
    FontFamily->"Times New Roman"],
  StyleBox["m",
    FontFamily->"Courier New"],
  StyleBox["  is made then convergence will be linear (or slow).  ",
    FontFamily->"Times New Roman"]
}], "Text"]
}, Closed]],

Cell[TextData[{
  StyleBox["Example 3.",
    FontFamily->"Times New Roman",
    FontWeight->"Bold",
    FontColor->RGBColor[1, 0, 0]],
  StyleBox["  Use the value  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p\_0 = 1.3\)]],
  "  ",
  StyleBox["and compare Methods A,B and C for finding the quadruple root  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(p = 1\)]],
  StyleBox["  of the equation  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(x\^5 - 2\ x\^4 - 2\ x\^3 + 8\ x\^2 - 7\ x + 2\  = \ 0\)]],
  StyleBox[". ",
    FontFamily->"Times New Roman"]
}], "Text"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Solution 3.",
  FontFamily->"Times New Roman",
  FontWeight->"Bold",
  FontColor->RGBColor[1, 0, 1]]], "Text"],

Cell[BoxData[{
    \(\(f[x_]\  = \ 
        x\^5 - 2\ x\^4 - 2\ x\^3 + 8\ x\^2 - 7\ x + 
          2;\)\ \ \), "\[IndentingNewLine]", 
    \(\(Print["\<f[x] = \>", f[x]\ ];\)\ \ \), "\[IndentingNewLine]", 
    \(\(Print["\<We know that\>"];\)\ \), "\[IndentingNewLine]", 
    \(\(Print["\<f[x] = \>", Factor[f[x]]];\)\ \ \), "\[IndentingNewLine]", 
    \(\(Print["\<We investigate various iterative 'Newton' methods to find \
the double root\>"];\)\), "\[IndentingNewLine]", 
    \(\(Print["\<For approximating the double root  p = 1.\>"];\)\)}], "Input"],

Cell[TextData[StyleBox["First, we will compute the iterations for each \
method, and afterward a table comparing the methods is given.  For the method \
C, all the iterations in the linear search are included.  ",
  FontFamily->"Times New Roman"]], "Text"],

Cell[TextData[StyleBox["Using formula (2), the standard Newton-Raphson \
method.  ",
  FontFamily->"Times New Roman"]], "Text"],

Cell[BoxData[
    \(NewtonRaphson[1.3, 26]\)], "Input"],

Cell[TextData[{
  StyleBox["Using formula (9) Method A, the accelerated Newton-Raphson method \
with  ",
    FontFamily->"Times New Roman"],
  StyleBox["m=3",
    FontFamily->"Courier New"],
  StyleBox[".  ",
    FontFamily->"Times New Roman"]
}], "Text"],

Cell[BoxData[
    \(NewtonRaphsonAccelerate[1.3, 3, 6]\)], "Input"],

Cell[TextData[{
  StyleBox["Using formula (11) Method B, the ",
    FontFamily->"Times New Roman"],
  StyleBox["modified Newton-Raphson method. ",
    FontFamily->"Times New Roman"]
}], "Text"],

Cell[BoxData[
    \(NewtonRaphsonModified[1.3, 5]\)], "Input"],

Cell[TextData[StyleBox["Using formula (13) Method C, the adaptive \
Newton-Raphson method. ",
  FontFamily->"Times New Roman"]], "Text"],

Cell[TextData[{
  StyleBox["The details for obtaining  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      RowBox[{\(p\_1\), ",", \(p\_2\), ",", 
        RowBox[{\(p\_3\), "  ", 
          StyleBox["and",
            FontFamily->"Times New Roman",
            FontSize->12,
            FontWeight->"Plain",
            FontSlant->"Plain",
            FontColor->GrayLevel[0],
            FontVariations->{"Underline"->False,
            "StrikeThrough"->False}], "  ", \(p\_4\)}]}]]],
  " are:"
}], "Text"],

Cell[BoxData[{
    \(\(P\_0\  = \ 1.3;\)\), "\[IndentingNewLine]", 
    \(\(For[k = 0, 
        k \[LessEqual] 5, \(k++\), \[IndentingNewLine]P\_k\  = \ 
          P\_0\  - k\ f[P\_0]\/\(f'\)[P\_0]; \[IndentingNewLine]If[k > 0, 
          Print["\< p\>"\_k, \*"\"\< =  \!\(p\_0\) - \>\"", 
            k, \*"\"\<\!\(f[p\_0]\/\(f'\)[p\_0]\)\>\""]]; \ \
\[IndentingNewLine]Print["\< p\>"\_k, "\< = \>", 
          PaddedForm[P\_k, {16, 15}], "\<,   f[\>", "\<p\>"\_k, "\<] = \>", 
          NumberForm[f[P\_k], 16]\ ];\ ];\)\)}], "Input"],

Cell[TextData[{
  StyleBox["Since  ",
    FontFamily->"Times New Roman"],
  Cell[BoxData[
      \(\(\(|\)\(f[p\_5]\  > f[p\_4]\)\)\)]],
  "  we reject  ",
  Cell[BoxData[
      \(p\_5\)]],
  "  and set  ",
  Cell[BoxData[
      \(p\_0\  = \ p\_4\)]],
  "  and continue the iteration using formula (13).  The subroutine makes all \
these choices automatically. "
}], "Text"],

Cell[BoxData[
    \(NewtonRaphsonAdaptive[1.3, 7]\)], "Input"]
}, Closed]],

Cell[TextData[{
  StyleBox["Acknowledgement",
    FontFamily->"Times New Roman",
    FontWeight->"Bold",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["\n\n\tThis module uses ",
    FontFamily->"Times New Roman"],
  StyleBox["Mathematica",
    FontFamily->"Times New Roman",
    FontSlant->"Italic"],
  StyleBox[" instead of Pascal, and the content is that of the article: \n\n",
    
    FontFamily->"Times New Roman"],
  ButtonBox["John Mathews, An Improved Newton's Method, The AMATYC Review, \
Vol. 10, No. 2, Spring, 1989, pp. 9-14.",
    ButtonData:>{
      URL[ 
      "http://math.fullerton.edu/mathews/articles/1989ImprovedNewtonMethod.\
pdf"], None},
    ButtonStyle->"Hyperlink"],
  StyleBox[" ",
    FontFamily->"Times New Roman"]
}], "Text"],

Cell[TextData[{
  StyleBox["References",
    FontFamily->"Times New Roman",
    FontWeight->"Bold",
    FontColor->RGBColor[0, 0, 1]],
  StyleBox["\n\n1.  Dodes, 1. A.,  Numerical analysis for computer science, \
1978, New York: North-Holland. \n2.  Mathews, J. H.,  Numerical methods for \
computer science, engineering and mathematics, 1987, Englewood Cliffs, NJ: \
Prentice-Hall. \n3.  Ralston, A. & Rabinowitz, P.,  A first course in \
numerical analysis, second ed., 1978, New York: McGraw-Hill. \n4.  Rice, J. \
R.,  Numerical methods, software and analysis: IMSL reference edition, 1983, \
New York: McGraw-Hill. ",
    FontFamily->"Times New Roman"]
}], "Text"],

Cell[TextData[StyleBox["Related Material",
  FontFamily->"Times New Roman",
  FontWeight->"Bold",
  FontColor->RGBColor[0, 0, 1]]], "Text"],

Cell[TextData[{
  StyleBox["Animations (",
    FontWeight->"Bold",
    FontColor->RGBColor[0.500008, 0, 0.996109]],
  " ",
  StyleBox[ButtonBox["Newton's Method",
    ButtonData:>{
      URL[ 
      "http://www.ecs.fullerton.edu/~mathews/a2001/Animations/RootFinding/\
NewtonMethod/NewtonMethod.html"], None},
    ButtonStyle->"Hyperlink"],
    FontWeight->"Bold",
    FontColor->RGBColor[1, 0, 0]],
  "  ",
  StyleBox[ButtonBox["Newton's Method",
    ButtonData:>{
      URL[ 
      "http://math.fullerton.edu/mathews/a2001/Animations/RootFinding/\
NewtonMethod/NewtonMethod.html"], None},
    ButtonStyle->"Hyperlink"],
    FontWeight->"Bold"],
  " ",
  StyleBox[").",
    FontWeight->"Bold",
    FontColor->RGBColor[0.500008, 0, 0.996109]],
  "  "
}], "Text"],

Cell[TextData[StyleBox["Research Experience for Undergraduates",
  FontSize->14,
  FontWeight->"Bold",
  FontColor->RGBColor[0.500008, 0, 0.996109]]], "Text"],

Cell[TextData[{
  StyleBox[ButtonBox["Newton-Raphson Method",
    ButtonData:>{
      URL[ 
      "http://www.ecs.fullerton.edu/~mathews/n2003/Newton'sMethodBib.html"], 
      None},
    ButtonStyle->"Hyperlink"],
    FontWeight->"Bold",
    FontColor->RGBColor[1, 0, 0]],
  "  ",
  StyleBox[ButtonBox["Newton-Raphson Method",
    ButtonData:>{
      URL[ "http://math.fullerton.edu/mathews/n2003/Newton'sMethodBib.html"], 
      None},
    ButtonStyle->"Hyperlink"],
    FontWeight->"Bold"],
  "  ",
  "Internet hyperlinks to web sites and a bibliography of articles.  "
}], "Text"],

Cell[TextData[StyleBox[ButtonBox["Return to the Numerical Analysis Project",
  ButtonData:>{
    URL[ "http://math.fullerton.edu/mathews/numerical.html"], None},
  ButtonStyle->"Hyperlink"],
  FontWeight->"Bold",
  FontColor->RGBColor[1, 0, 1],
  FontVariations->{"Underline"->True}]], "Text"]
},
FrontEndVersion->"5.2 for Microsoft Windows",
ScreenRectangle->{{0, 1024}, {0, 685}},
AutoGeneratedPackage->None,
CellGrouping->Manual,
WindowSize->{1013, 651},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
PrintingCopies->1,
PrintingPageRange->{1, Automatic},
SpellingDictionaries->{"CorrectWords"->{
  "Mathews", "Bartlett", "Sudbury", "Tele.", "mkt", "jbpub", "com", "mathews",
     "edu", "westmont", "Raphson", "solset"}}
]

(*******************************************************************
Cached data follows.  If you edit this Notebook file directly, not
using Mathematica, you must remove the line containing CacheID at
the top of  the file.  The cache data will then be recreated when
you save this file from within Mathematica.
*******************************************************************)

(*CellTagsOutline
CellTagsIndex->{}
*)

(*CellTagsIndex
CellTagsIndex->{}
*)

(*NotebookFileOutline
Notebook[{

Cell[CellGroupData[{
Cell[1776, 53, 179, 4, 35, "Text"],
Cell[1958, 59, 1464, 49, 99, "Text"]
}, Closed]],
Cell[3437, 111, 742, 22, 106, "Text"],
Cell[4182, 135, 814, 24, 95, "Text"],
Cell[4999, 161, 1646, 52, 115, "Text"],
Cell[6648, 215, 620, 20, 33, "Text"],
Cell[7271, 237, 154, 2, 33, "Text"],
Cell[7428, 241, 1170, 20, 330, "Input"],
Cell[8601, 263, 765, 21, 52, "Text"],
Cell[9369, 286, 3730, 109, 314, "Text"],
Cell[13102, 397, 2277, 76, 147, "Text"],
Cell[15382, 475, 1972, 61, 206, "Text"],
Cell[17357, 538, 641, 22, 33, "Text"],
Cell[18001, 562, 277, 3, 52, "Text"],
Cell[18281, 567, 183, 4, 33, "Text"],
Cell[18467, 573, 1877, 58, 196, "Text"],
Cell[20347, 633, 673, 22, 33, "Text"],
Cell[21023, 657, 659, 21, 33, "Text"],
Cell[21685, 680, 168, 3, 33, "Text"],
Cell[21856, 685, 1189, 20, 330, "Input"],
Cell[23048, 707, 505, 15, 38, "Text"],

Cell[CellGroupData[{
Cell[23578, 726, 100, 2, 33, "Text"],
Cell[23681, 730, 884, 14, 266, "Input"]
}, Closed]],
Cell[24580, 747, 314, 11, 30, "Text"],
Cell[24897, 760, 690, 20, 114, "Text"],

Cell[CellGroupData[{
Cell[25612, 784, 100, 2, 33, "Text"],
Cell[25715, 788, 777, 14, 289, "Input"]
}, Closed]],
Cell[26507, 805, 1415, 45, 112, "Text"],
Cell[27925, 852, 673, 22, 33, "Text"],
Cell[28601, 876, 659, 21, 33, "Text"],
Cell[29263, 899, 165, 3, 33, "Text"],
Cell[29431, 904, 1304, 22, 384, "Input"],
Cell[30738, 928, 176, 4, 33, "Text"],
Cell[30917, 934, 5362, 159, 210, "Text"],
Cell[36282, 1095, 1601, 45, 71, "Text"],
Cell[37886, 1142, 188, 4, 33, "Text"],
Cell[38077, 1148, 2668, 79, 239, "Text"],
Cell[40748, 1229, 434, 14, 77, "Text"],
Cell[41185, 1245, 613, 19, 77, "Text"],
Cell[41801, 1266, 1133, 37, 74, "Text"],
Cell[42937, 1305, 1877, 58, 229, "Text"],
Cell[44817, 1365, 2213, 69, 133, "Text"],
Cell[47033, 1436, 55114, 1046, 417, "Text"],
Cell[102150, 2484, 2272, 70, 128, "Text"],
Cell[104425, 2556, 1294, 34, 362, "Text"],
Cell[105722, 2592, 1110, 33, 57, "Text"],
Cell[106835, 2627, 165, 3, 33, "Text"],
Cell[107003, 2632, 2457, 42, 650, "Input"],
Cell[109463, 2676, 582, 20, 33, "Text"],

Cell[CellGroupData[{
Cell[110070, 2700, 134, 3, 33, "Text"],
Cell[110207, 2705, 513, 7, 130, "Input"],
Cell[110723, 2714, 256, 3, 33, "Text"],
Cell[110982, 2719, 127, 2, 33, "Text"],
Cell[111112, 2723, 55, 1, 30, "Input"],
Cell[111170, 2726, 255, 8, 33, "Text"],
Cell[111428, 2736, 67, 1, 30, "Input"],
Cell[111498, 2739, 193, 5, 33, "Text"],
Cell[111694, 2746, 62, 1, 30, "Input"],
Cell[111759, 2749, 136, 2, 33, "Text"],
Cell[111898, 2753, 450, 14, 33, "Text"],
Cell[112351, 2769, 536, 9, 144, "Input"],
Cell[112890, 2780, 30579, 722, 216, "Text"],
Cell[143472, 3504, 62, 1, 30, "Input"],
Cell[143537, 3507, 3361, 61, 559, "Text"],
Cell[146901, 3570, 515, 13, 52, "Text"],
Cell[147419, 3585, 380, 9, 52, "Text"],
Cell[147802, 3596, 272, 7, 33, "Text"],
Cell[148077, 3605, 275, 4, 70, "Input"],
Cell[148355, 3611, 311, 5, 71, "Input"],
Cell[148669, 3618, 116, 1, 33, "Text"],
Cell[148788, 3621, 184, 3, 31, "Input"],
Cell[148975, 3626, 408, 11, 52, "Text"],
Cell[149386, 3639, 880, 16, 190, "Input"]
}, Closed]],
Cell[150281, 3658, 599, 20, 30, "Text"],

Cell[CellGroupData[{
Cell[150905, 3682, 134, 3, 33, "Text"],
Cell[151042, 3687, 531, 8, 130, "Input"],
Cell[151576, 3697, 256, 3, 33, "Text"],
Cell[151835, 3702, 127, 2, 33, "Text"],
Cell[151965, 3706, 55, 1, 30, "Input"],
Cell[152023, 3709, 255, 8, 33, "Text"],
Cell[152281, 3719, 67, 1, 30, "Input"],
Cell[152351, 3722, 193, 5, 33, "Text"],
Cell[152547, 3729, 62, 1, 30, "Input"],
Cell[152612, 3732, 136, 2, 33, "Text"],
Cell[152751, 3736, 500, 15, 33, "Text"],
Cell[153254, 3753, 536, 9, 144, "Input"],
Cell[153793, 3764, 29238, 676, 216, "Text"],
Cell[183034, 4442, 62, 1, 30, "Input"],
Cell[183099, 4445, 564, 20, 33, "Text"],
Cell[183666, 4467, 68, 1, 30, "Input"],
Cell[183737, 4470, 261, 8, 33, "Text"]
}, Closed]],
Cell[184013, 4481, 615, 20, 30, "Text"],

Cell[CellGroupData[{
Cell[184653, 4505, 134, 3, 33, "Text"],
Cell[184790, 4510, 555, 9, 130, "Input"],
Cell[185348, 4521, 256, 3, 33, "Text"],
Cell[185607, 4526, 127, 2, 33, "Text"],
Cell[185737, 4530, 55, 1, 30, "Input"],
Cell[185795, 4533, 255, 8, 33, "Text"],
Cell[186053, 4543, 67, 1, 30, "Input"],
Cell[186123, 4546, 193, 5, 33, "Text"],
Cell[186319, 4553, 62, 1, 30, "Input"],
Cell[186384, 4556, 136, 2, 33, "Text"],
Cell[186523, 4560, 515, 15, 33, "Text"],
Cell[187041, 4577, 536, 9, 144, "Input"],
Cell[187580, 4588, 373, 13, 33, "Text"],
Cell[187956, 4603, 62, 1, 30, "Input"]
}, Closed]],
Cell[188033, 4607, 754, 22, 106, "Text"],
Cell[188790, 4631, 669, 13, 128, "Text"],
Cell[189462, 4646, 139, 3, 33, "Text"],
Cell[189604, 4651, 762, 26, 33, "Text"],
Cell[190369, 4679, 158, 3, 35, "Text"],
Cell[190530, 4684, 583, 18, 33, "Text"],
Cell[191116, 4704, 293, 6, 33, "Text"]
}
]
*)



(*******************************************************************
End of Mathematica Notebook file.
*******************************************************************)

